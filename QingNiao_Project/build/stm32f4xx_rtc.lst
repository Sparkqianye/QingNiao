ARM GAS  /tmp/cccsESzb.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_rtc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Library/stm32f4xx_rtc.c"
  20              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	RTC_ByteToBcd2:
  27              	.LVL0:
  28              	.LFB178:
   1:./Library/stm32f4xx_rtc.c **** /**
   2:./Library/stm32f4xx_rtc.c ****   ******************************************************************************
   3:./Library/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:./Library/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_rtc.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_rtc.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Library/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:./Library/stm32f4xx_rtc.c ****   *           + Initialization
  10:./Library/stm32f4xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:./Library/stm32f4xx_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:./Library/stm32f4xx_rtc.c ****   *           + WakeUp Timer configuration
  13:./Library/stm32f4xx_rtc.c ****   *           + Daylight Saving configuration
  14:./Library/stm32f4xx_rtc.c ****   *           + Output pin Configuration
  15:./Library/stm32f4xx_rtc.c ****   *           + Coarse digital Calibration configuration
  16:./Library/stm32f4xx_rtc.c ****   *           + Smooth digital Calibration configuration
  17:./Library/stm32f4xx_rtc.c ****   *           + TimeStamp configuration
  18:./Library/stm32f4xx_rtc.c ****   *           + Tampers configuration
  19:./Library/stm32f4xx_rtc.c ****   *           + Backup Data Registers configuration
  20:./Library/stm32f4xx_rtc.c ****   *           + Shift control synchronisation    
  21:./Library/stm32f4xx_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:./Library/stm32f4xx_rtc.c ****   *           + Interrupts and flags management
  23:./Library/stm32f4xx_rtc.c ****   *
  24:./Library/stm32f4xx_rtc.c **** @verbatim
  25:./Library/stm32f4xx_rtc.c **** 
  26:./Library/stm32f4xx_rtc.c ****  ===================================================================
  27:./Library/stm32f4xx_rtc.c ****               ##### Backup Domain Operating Condition #####
  28:./Library/stm32f4xx_rtc.c ****  ===================================================================
  29:./Library/stm32f4xx_rtc.c ****  [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  30:./Library/stm32f4xx_rtc.c ****       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
ARM GAS  /tmp/cccsESzb.s 			page 2


  31:./Library/stm32f4xx_rtc.c ****       VDD supply is powered off.
  32:./Library/stm32f4xx_rtc.c ****       To retain the content of the RTC backup registers, backup SRAM, and supply 
  33:./Library/stm32f4xx_rtc.c ****       the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  34:./Library/stm32f4xx_rtc.c ****       standby voltage supplied by a battery or by another source.
  35:./Library/stm32f4xx_rtc.c **** 
  36:./Library/stm32f4xx_rtc.c ****  [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  37:./Library/stm32f4xx_rtc.c ****       off, the VBAT pin powers the following blocks:
  38:./Library/stm32f4xx_rtc.c ****    (#) The RTC
  39:./Library/stm32f4xx_rtc.c ****    (#) The LSE oscillator
  40:./Library/stm32f4xx_rtc.c ****    (#) The backup SRAM when the low power backup regulator is enabled
  41:./Library/stm32f4xx_rtc.c ****    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:./Library/stm32f4xx_rtc.c ****   
  43:./Library/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:./Library/stm32f4xx_rtc.c ****       the following functions are available:
  45:./Library/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:./Library/stm32f4xx_rtc.c ****    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:./Library/stm32f4xx_rtc.c ****    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:./Library/stm32f4xx_rtc.c ****   
  49:./Library/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  50:./Library/stm32f4xx_rtc.c ****       because VDD is not present), the following functions are available:
  51:./Library/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as LSE pins only
  52:./Library/stm32f4xx_rtc.c ****    (#) PC13 can be used as the RTC_AF1 pin 
  53:./Library/stm32f4xx_rtc.c ****    (#) PI8 can be used as the RTC_AF2 pin
  54:./Library/stm32f4xx_rtc.c ****   
  55:./Library/stm32f4xx_rtc.c ****             
  56:./Library/stm32f4xx_rtc.c ****                    ##### Backup Domain Reset #####
  57:./Library/stm32f4xx_rtc.c ****  ===================================================================
  58:./Library/stm32f4xx_rtc.c ****  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  59:./Library/stm32f4xx_rtc.c ****       to their reset values. The BKPSRAM is not affected by this reset. The only
  60:./Library/stm32f4xx_rtc.c ****       way of resetting the BKPSRAM is through the Flash interface by requesting 
  61:./Library/stm32f4xx_rtc.c ****       a protection level change from 1 to 0.
  62:./Library/stm32f4xx_rtc.c ****  [..] A backup domain reset is generated when one of the following events occurs:
  63:./Library/stm32f4xx_rtc.c ****    (#) Software reset, triggered by setting the BDRST bit in the 
  64:./Library/stm32f4xx_rtc.c ****        RCC Backup domain control register (RCC_BDCR). You can use the
  65:./Library/stm32f4xx_rtc.c ****        RCC_BackupResetCmd().
  66:./Library/stm32f4xx_rtc.c ****    (#) VDD or VBAT power on, if both supplies have previously been powered off.
  67:./Library/stm32f4xx_rtc.c ****   
  68:./Library/stm32f4xx_rtc.c **** 
  69:./Library/stm32f4xx_rtc.c ****                    ##### Backup Domain Access #####
  70:./Library/stm32f4xx_rtc.c ****  ===================================================================
  71:./Library/stm32f4xx_rtc.c ****  [..] After reset, the backup domain (RTC registers, RTC backup data 
  72:./Library/stm32f4xx_rtc.c ****       registers and backup SRAM) is protected against possible unwanted write 
  73:./Library/stm32f4xx_rtc.c ****       accesses. 
  74:./Library/stm32f4xx_rtc.c ****  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  75:./Library/stm32f4xx_rtc.c ****    (+) Enable the Power Controller (PWR) APB1 interface clock using the
  76:./Library/stm32f4xx_rtc.c ****        RCC_APB1PeriphClockCmd() function.
  77:./Library/stm32f4xx_rtc.c ****    (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  78:./Library/stm32f4xx_rtc.c ****    (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  79:./Library/stm32f4xx_rtc.c ****    (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  80:./Library/stm32f4xx_rtc.c ****   
  81:./Library/stm32f4xx_rtc.c ****   
  82:./Library/stm32f4xx_rtc.c ****                   ##### How to use RTC Driver #####
  83:./Library/stm32f4xx_rtc.c ****  ===================================================================
  84:./Library/stm32f4xx_rtc.c ****  [..] 
  85:./Library/stm32f4xx_rtc.c ****    (+) Enable the RTC domain access (see description in the section above)
  86:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  87:./Library/stm32f4xx_rtc.c ****        format using the RTC_Init() function.
ARM GAS  /tmp/cccsESzb.s 			page 3


  88:./Library/stm32f4xx_rtc.c ****   
  89:./Library/stm32f4xx_rtc.c ****  *** Time and Date configuration ***
  90:./Library/stm32f4xx_rtc.c ****  ===================================
  91:./Library/stm32f4xx_rtc.c ****  [..] 
  92:./Library/stm32f4xx_rtc.c ****    (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  93:./Library/stm32f4xx_rtc.c ****        and RTC_SetDate() functions.
  94:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate() functions.
  95:./Library/stm32f4xx_rtc.c ****    (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  96:./Library/stm32f4xx_rtc.c ****        hour to the RTC Calendar.    
  97:./Library/stm32f4xx_rtc.c ****   
  98:./Library/stm32f4xx_rtc.c ****  *** Alarm configuration ***
  99:./Library/stm32f4xx_rtc.c ****  ===========================
 100:./Library/stm32f4xx_rtc.c ****  [..]
 101:./Library/stm32f4xx_rtc.c ****    (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
 102:./Library/stm32f4xx_rtc.c ****    (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 103:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
 104:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 105:./Library/stm32f4xx_rtc.c ****   
 106:./Library/stm32f4xx_rtc.c ****  *** RTC Wakeup configuration ***
 107:./Library/stm32f4xx_rtc.c ****  ================================
 108:./Library/stm32f4xx_rtc.c ****  [..] 
 109:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:./Library/stm32f4xx_rtc.c ****        function.
 111:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() function  
 112:./Library/stm32f4xx_rtc.c ****    (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 113:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 114:./Library/stm32f4xx_rtc.c ****        function.
 115:./Library/stm32f4xx_rtc.c ****   
 116:./Library/stm32f4xx_rtc.c ****  *** Outputs configuration ***
 117:./Library/stm32f4xx_rtc.c ****  =============================
 118:./Library/stm32f4xx_rtc.c ****  [..] The RTC has 2 different outputs:
 119:./Library/stm32f4xx_rtc.c ****    (+) AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 120:./Library/stm32f4xx_rtc.c ****        and WaKeUp signals. To output the selected RTC signal on RTC_AF1 pin, use the 
 121:./Library/stm32f4xx_rtc.c ****        RTC_OutputConfig() function.                
 122:./Library/stm32f4xx_rtc.c ****    (+) AFO_CALIB: this output is 512Hz signal or 1Hz. To output the RTC Clock on 
 123:./Library/stm32f4xx_rtc.c ****        RTC_AF1 pin, use the RTC_CalibOutputCmd() function.
 124:./Library/stm32f4xx_rtc.c ****   
 125:./Library/stm32f4xx_rtc.c ****  *** Smooth digital Calibration configuration ***
 126:./Library/stm32f4xx_rtc.c ****  ================================================    
 127:./Library/stm32f4xx_rtc.c ****  [..]
 128:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Original Digital Calibration Value and the corresponding
 129:./Library/stm32f4xx_rtc.c ****        calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 130:./Library/stm32f4xx_rtc.c ****        function.
 131:./Library/stm32f4xx_rtc.c ****   
 132:./Library/stm32f4xx_rtc.c ****  *** Coarse digital Calibration configuration ***
 133:./Library/stm32f4xx_rtc.c ****  ================================================
 134:./Library/stm32f4xx_rtc.c ****  [..]
 135:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Coarse Calibration Value and the corresponding
 136:./Library/stm32f4xx_rtc.c ****        sign using the RTC_CoarseCalibConfig() function.
 137:./Library/stm32f4xx_rtc.c ****    (+) Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() function  
 138:./Library/stm32f4xx_rtc.c ****   
 139:./Library/stm32f4xx_rtc.c ****  *** TimeStamp configuration ***
 140:./Library/stm32f4xx_rtc.c ****  ===============================
 141:./Library/stm32f4xx_rtc.c ****  [..]
 142:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp using the RTC
 143:./Library/stm32f4xx_rtc.c ****       _TimeStampCmd() function.
 144:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp Time and Date register, use the RTC_GetTimeStamp()
ARM GAS  /tmp/cccsESzb.s 			page 4


 145:./Library/stm32f4xx_rtc.c ****        function.
 146:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp SubSecond register, use the 
 147:./Library/stm32f4xx_rtc.c ****        RTC_GetTimeStampSubSecond() function.
 148:./Library/stm32f4xx_rtc.c ****    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 149:./Library/stm32f4xx_rtc.c ****        or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 150:./Library/stm32f4xx_rtc.c ****        RTC_TAFCR register. You can use the  RTC_TamperPinSelection() function to
 151:./Library/stm32f4xx_rtc.c ****        select the corresponding pin.     
 152:./Library/stm32f4xx_rtc.c ****   
 153:./Library/stm32f4xx_rtc.c ****  *** Tamper configuration ***
 154:./Library/stm32f4xx_rtc.c ****  ============================
 155:./Library/stm32f4xx_rtc.c ****  [..]
 156:./Library/stm32f4xx_rtc.c ****    (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:./Library/stm32f4xx_rtc.c ****    (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:./Library/stm32f4xx_rtc.c ****        function. 
 159:./Library/stm32f4xx_rtc.c ****    (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:./Library/stm32f4xx_rtc.c ****        filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() 
 161:./Library/stm32f4xx_rtc.c ****        function.
 162:./Library/stm32f4xx_rtc.c ****    (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 163:./Library/stm32f4xx_rtc.c ****        function.
 164:./Library/stm32f4xx_rtc.c ****    (+) Configure the Tamper precharge or discharge duration using 
 165:./Library/stm32f4xx_rtc.c ****        RTC_TamperPinsPrechargeDuration() function.
 166:./Library/stm32f4xx_rtc.c ****    (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 167:./Library/stm32f4xx_rtc.c ****    (+) Enable the Time stamp on Tamper detection event using  
 168:./Library/stm32f4xx_rtc.c ****        TC_TSOnTamperDetecCmd() function.
 169:./Library/stm32f4xx_rtc.c ****    (+) The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 170:./Library/stm32f4xx_rtc.c ****        or RTC_AF2 depending on the value of the TSINSEL bit in the RTC_TAFCR 
 171:./Library/stm32f4xx_rtc.c ****        register. You can use the  RTC_TimeStampPinSelection() function to select 
 172:./Library/stm32f4xx_rtc.c ****        the corresponding pin. 
 173:./Library/stm32f4xx_rtc.c ****   
 174:./Library/stm32f4xx_rtc.c ****  *** Backup Data Registers configuration ***
 175:./Library/stm32f4xx_rtc.c ****  ===========================================
 176:./Library/stm32f4xx_rtc.c ****  [..]
 177:./Library/stm32f4xx_rtc.c ****    (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 178:./Library/stm32f4xx_rtc.c ****        function.  
 179:./Library/stm32f4xx_rtc.c ****    (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 180:./Library/stm32f4xx_rtc.c ****        function.
 181:./Library/stm32f4xx_rtc.c ****    
 182:./Library/stm32f4xx_rtc.c **** 
 183:./Library/stm32f4xx_rtc.c ****                   ##### RTC and low power modes #####
 184:./Library/stm32f4xx_rtc.c ****  ===================================================================
 185:./Library/stm32f4xx_rtc.c ****  [..] The MCU can be woken up from a low power mode by an RTC alternate 
 186:./Library/stm32f4xx_rtc.c ****       function.
 187:./Library/stm32f4xx_rtc.c ****  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 188:./Library/stm32f4xx_rtc.c ****       RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 189:./Library/stm32f4xx_rtc.c ****       These RTC alternate functions can wake up the system from the Stop and 
 190:./Library/stm32f4xx_rtc.c ****       Standby lowpower modes.
 191:./Library/stm32f4xx_rtc.c ****  [..] The system can also wake up from low power modes without depending 
 192:./Library/stm32f4xx_rtc.c ****       on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 193:./Library/stm32f4xx_rtc.c ****       or the RTC wakeup events.
 194:./Library/stm32f4xx_rtc.c ****  [..] The RTC provides a programmable time base for waking up from the 
 195:./Library/stm32f4xx_rtc.c ****       Stop or Standby mode at regular intervals.
 196:./Library/stm32f4xx_rtc.c ****       Wakeup from STOP and Standby modes is possible only when the RTC clock source
 197:./Library/stm32f4xx_rtc.c ****       is LSE or LSI.
 198:./Library/stm32f4xx_rtc.c ****   
 199:./Library/stm32f4xx_rtc.c **** 
 200:./Library/stm32f4xx_rtc.c ****           ##### Selection of RTC_AF1 alternate functions #####
 201:./Library/stm32f4xx_rtc.c ****  ===================================================================
ARM GAS  /tmp/cccsESzb.s 			page 5


 202:./Library/stm32f4xx_rtc.c ****  [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 203:./Library/stm32f4xx_rtc.c ****    (+) AFO_ALARM output
 204:./Library/stm32f4xx_rtc.c ****    (+) AFO_CALIB output
 205:./Library/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 206:./Library/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 207:./Library/stm32f4xx_rtc.c ****  
 208:./Library/stm32f4xx_rtc.c ****  [..]   
 209:./Library/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 210:./Library/stm32f4xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |
 211:./Library/stm32f4xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |
 212:./Library/stm32f4xx_rtc.c ****    |  and function   |          |          |           |              | selection  |  selection   |
 213:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 214:./Library/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 215:./Library/stm32f4xx_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 216:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 217:./Library/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 218:./Library/stm32f4xx_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 219:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 220:./Library/stm32f4xx_rtc.c ****    | Calibration out |          |          |           |              |    Don't   |     Don't    |
 221:./Library/stm32f4xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     |
 222:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 223:./Library/stm32f4xx_rtc.c ****    |  TAMPER input   |          |          |           |              |            |     Don't    |
 224:./Library/stm32f4xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       |      0     |     care     |
 225:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 226:./Library/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              |            |              |
 227:./Library/stm32f4xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       |
 228:./Library/stm32f4xx_rtc.c ****    |   floating      |          |          |           |              |            |              |
 229:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 230:./Library/stm32f4xx_rtc.c ****    | TIMESTAMP input |          |          |           |              |    Don't   |              |
 231:./Library/stm32f4xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       |    care    |      0       |
 232:./Library/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 233:./Library/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  |
 234:./Library/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 235:./Library/stm32f4xx_rtc.c **** 
 236:./Library/stm32f4xx_rtc.c ****             
 237:./Library/stm32f4xx_rtc.c ****         #####  Selection of RTC_AF2 alternate functions #####
 238:./Library/stm32f4xx_rtc.c ****  ===================================================================
 239:./Library/stm32f4xx_rtc.c ****  [..] The RTC_AF2 pin (PI8) can be used for the following purposes:
 240:./Library/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 241:./Library/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 242:./Library/stm32f4xx_rtc.c ****  [..]
 243:./Library/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+
 244:./Library/stm32f4xx_rtc.c ****    |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 245:./Library/stm32f4xx_rtc.c ****    |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 246:./Library/stm32f4xx_rtc.c ****    |  and function   |           |              | selection  |  selection   |Configuration |
 247:./Library/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 248:./Library/stm32f4xx_rtc.c ****    |  TAMPER input   |           |              |            |     Don't    |              |
 249:./Library/stm32f4xx_rtc.c ****    |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 250:./Library/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 251:./Library/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |           |              |            |              |              |
 252:./Library/stm32f4xx_rtc.c ****    |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 253:./Library/stm32f4xx_rtc.c ****    |   floating      |           |              |            |              |              |
 254:./Library/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 255:./Library/stm32f4xx_rtc.c ****    | TIMESTAMP input |           |              |    Don't   |              |              |
 256:./Library/stm32f4xx_rtc.c ****    |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 257:./Library/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 258:./Library/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
ARM GAS  /tmp/cccsESzb.s 			page 6


 259:./Library/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+   
 260:./Library/stm32f4xx_rtc.c ****  
 261:./Library/stm32f4xx_rtc.c ****      
 262:./Library/stm32f4xx_rtc.c **** @endverbatim
 263:./Library/stm32f4xx_rtc.c ****   
 264:./Library/stm32f4xx_rtc.c ****   ******************************************************************************
 265:./Library/stm32f4xx_rtc.c ****   * @attention
 266:./Library/stm32f4xx_rtc.c ****   *
 267:./Library/stm32f4xx_rtc.c ****   * Copyright (c) 2016 STMicroelectronics.
 268:./Library/stm32f4xx_rtc.c ****   * All rights reserved.
 269:./Library/stm32f4xx_rtc.c ****   *
 270:./Library/stm32f4xx_rtc.c ****   * This software is licensed under terms that can be found in the LICENSE file
 271:./Library/stm32f4xx_rtc.c ****   * in the root directory of this software component.
 272:./Library/stm32f4xx_rtc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 273:./Library/stm32f4xx_rtc.c ****   *
 274:./Library/stm32f4xx_rtc.c ****   ******************************************************************************
 275:./Library/stm32f4xx_rtc.c ****   */
 276:./Library/stm32f4xx_rtc.c **** 
 277:./Library/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 278:./Library/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 279:./Library/stm32f4xx_rtc.c **** 
 280:./Library/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:./Library/stm32f4xx_rtc.c ****   * @{
 282:./Library/stm32f4xx_rtc.c ****   */
 283:./Library/stm32f4xx_rtc.c **** 
 284:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:./Library/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:./Library/stm32f4xx_rtc.c ****   * @{
 287:./Library/stm32f4xx_rtc.c ****   */
 288:./Library/stm32f4xx_rtc.c **** 
 289:./Library/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:./Library/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:./Library/stm32f4xx_rtc.c **** 
 292:./Library/stm32f4xx_rtc.c **** /* Masks Definition */
 293:./Library/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:./Library/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:./Library/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:./Library/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:./Library/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:./Library/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:./Library/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:./Library/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 301:./Library/stm32f4xx_rtc.c ****                                             RTC_FLAG_TAMP2F | RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 302:./Library/stm32f4xx_rtc.c **** 
 303:./Library/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 304:./Library/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 305:./Library/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 306:./Library/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 307:./Library/stm32f4xx_rtc.c **** 
 308:./Library/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 309:./Library/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 310:./Library/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 311:./Library/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 312:./Library/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 313:./Library/stm32f4xx_rtc.c **** 
 314:./Library/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 315:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 7


 316:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 317:./Library/stm32f4xx_rtc.c ****   * @{
 318:./Library/stm32f4xx_rtc.c ****   */ 
 319:./Library/stm32f4xx_rtc.c **** 
 320:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 321:./Library/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 322:./Library/stm32f4xx_rtc.c ****  *
 323:./Library/stm32f4xx_rtc.c **** @verbatim   
 324:./Library/stm32f4xx_rtc.c ****  ===============================================================================
 325:./Library/stm32f4xx_rtc.c ****              ##### Initialization and Configuration functions #####
 326:./Library/stm32f4xx_rtc.c ****  ===============================================================================
 327:./Library/stm32f4xx_rtc.c ****  
 328:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to initialize and configure the RTC
 329:./Library/stm32f4xx_rtc.c ****       Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 330:./Library/stm32f4xx_rtc.c ****       Write protection, enter and exit the RTC initialization mode, RTC registers
 331:./Library/stm32f4xx_rtc.c ****       synchronization check and reference clock detection enable.
 332:./Library/stm32f4xx_rtc.c ****   
 333:./Library/stm32f4xx_rtc.c ****    (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 334:./Library/stm32f4xx_rtc.c ****        split into 2 programmable prescalers to minimize power consumption.
 335:./Library/stm32f4xx_rtc.c ****        (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 336:./Library/stm32f4xx_rtc.c ****        (++) When both prescalers are used, it is recommended to configure the 
 337:./Library/stm32f4xx_rtc.c ****             asynchronous prescaler to a high value to minimize consumption.
 338:./Library/stm32f4xx_rtc.c **** 
 339:./Library/stm32f4xx_rtc.c ****    (#) All RTC registers are Write protected. Writing to the RTC registers
 340:./Library/stm32f4xx_rtc.c ****        is enabled by writing a key into the Write Protection register, RTC_WPR.
 341:./Library/stm32f4xx_rtc.c **** 
 342:./Library/stm32f4xx_rtc.c ****    (#) To Configure the RTC Calendar, user application should enter initialization
 343:./Library/stm32f4xx_rtc.c ****        mode. In this mode, the calendar counter is stopped and its value can be 
 344:./Library/stm32f4xx_rtc.c ****        updated. When the initialization sequence is complete, the calendar restarts 
 345:./Library/stm32f4xx_rtc.c ****        counting after 4 RTCCLK cycles.
 346:./Library/stm32f4xx_rtc.c **** 
 347:./Library/stm32f4xx_rtc.c ****    (#) To read the calendar through the shadow registers after Calendar initialization,
 348:./Library/stm32f4xx_rtc.c ****        calendar update or after wakeup from low power modes the software must first 
 349:./Library/stm32f4xx_rtc.c ****        clear the RSF flag. The software must then wait until it is set again before 
 350:./Library/stm32f4xx_rtc.c ****        reading the calendar, which means that the calendar registers have been 
 351:./Library/stm32f4xx_rtc.c ****        correctly copied into the RTC_TR and RTC_DR shadow registers.
 352:./Library/stm32f4xx_rtc.c ****        The RTC_WaitForSynchro() function implements the above software sequence 
 353:./Library/stm32f4xx_rtc.c ****        (RSF clear and RSF check).
 354:./Library/stm32f4xx_rtc.c **** 
 355:./Library/stm32f4xx_rtc.c **** @endverbatim
 356:./Library/stm32f4xx_rtc.c ****   * @{
 357:./Library/stm32f4xx_rtc.c ****   */
 358:./Library/stm32f4xx_rtc.c **** 
 359:./Library/stm32f4xx_rtc.c **** /**
 360:./Library/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 361:./Library/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 362:./Library/stm32f4xx_rtc.c ****   *         registers.       
 363:./Library/stm32f4xx_rtc.c ****   * @param  None
 364:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 365:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 366:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 367:./Library/stm32f4xx_rtc.c ****   */
 368:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 369:./Library/stm32f4xx_rtc.c **** {
 370:./Library/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 371:./Library/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 372:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
ARM GAS  /tmp/cccsESzb.s 			page 8


 373:./Library/stm32f4xx_rtc.c ****   
 374:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 375:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 376:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 377:./Library/stm32f4xx_rtc.c **** 
 378:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 379:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 380:./Library/stm32f4xx_rtc.c ****   {
 381:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 382:./Library/stm32f4xx_rtc.c ****   }  
 383:./Library/stm32f4xx_rtc.c ****   else
 384:./Library/stm32f4xx_rtc.c ****   {
 385:./Library/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 386:./Library/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 387:./Library/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 388:./Library/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 389:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 390:./Library/stm32f4xx_rtc.c ****   
 391:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 392:./Library/stm32f4xx_rtc.c ****     do
 393:./Library/stm32f4xx_rtc.c ****     {
 394:./Library/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 395:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
 396:./Library/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 397:./Library/stm32f4xx_rtc.c ****     
 398:./Library/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 399:./Library/stm32f4xx_rtc.c ****     {
 400:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 401:./Library/stm32f4xx_rtc.c ****     }
 402:./Library/stm32f4xx_rtc.c ****     else
 403:./Library/stm32f4xx_rtc.c ****     {
 404:./Library/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 405:./Library/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 406:./Library/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 407:./Library/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 408:./Library/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 409:./Library/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 410:./Library/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 411:./Library/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 412:./Library/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 413:./Library/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 414:./Library/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 415:./Library/stm32f4xx_rtc.c ****       
 416:./Library/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 417:./Library/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 418:./Library/stm32f4xx_rtc.c ****       
 419:./Library/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 420:./Library/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 421:./Library/stm32f4xx_rtc.c ****   
 422:./Library/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 423:./Library/stm32f4xx_rtc.c ****       {
 424:./Library/stm32f4xx_rtc.c ****         status = ERROR;
 425:./Library/stm32f4xx_rtc.c ****       }
 426:./Library/stm32f4xx_rtc.c ****       else
 427:./Library/stm32f4xx_rtc.c ****       {
 428:./Library/stm32f4xx_rtc.c ****         status = SUCCESS;      
 429:./Library/stm32f4xx_rtc.c ****       }
ARM GAS  /tmp/cccsESzb.s 			page 9


 430:./Library/stm32f4xx_rtc.c ****     }
 431:./Library/stm32f4xx_rtc.c ****   }
 432:./Library/stm32f4xx_rtc.c ****   
 433:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 434:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 435:./Library/stm32f4xx_rtc.c ****   
 436:./Library/stm32f4xx_rtc.c ****   return status;
 437:./Library/stm32f4xx_rtc.c **** }
 438:./Library/stm32f4xx_rtc.c **** 
 439:./Library/stm32f4xx_rtc.c **** /**
 440:./Library/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 441:./Library/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 442:./Library/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 443:./Library/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 444:./Library/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 445:./Library/stm32f4xx_rtc.c ****   *         initialization mode only.  
 446:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 447:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 448:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 449:./Library/stm32f4xx_rtc.c ****   */
 450:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 451:./Library/stm32f4xx_rtc.c **** {
 452:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 453:./Library/stm32f4xx_rtc.c ****   
 454:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 455:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 456:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 457:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 458:./Library/stm32f4xx_rtc.c **** 
 459:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 460:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 461:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 462:./Library/stm32f4xx_rtc.c **** 
 463:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 464:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 465:./Library/stm32f4xx_rtc.c ****   {
 466:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 467:./Library/stm32f4xx_rtc.c ****   } 
 468:./Library/stm32f4xx_rtc.c ****   else
 469:./Library/stm32f4xx_rtc.c ****   {
 470:./Library/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 471:./Library/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 472:./Library/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 473:./Library/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 474:./Library/stm32f4xx_rtc.c ****   
 475:./Library/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 476:./Library/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 477:./Library/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 478:./Library/stm32f4xx_rtc.c **** 
 479:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 480:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 481:./Library/stm32f4xx_rtc.c **** 
 482:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
 483:./Library/stm32f4xx_rtc.c ****   }
 484:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 485:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 486:./Library/stm32f4xx_rtc.c ****   
ARM GAS  /tmp/cccsESzb.s 			page 10


 487:./Library/stm32f4xx_rtc.c ****   return status;
 488:./Library/stm32f4xx_rtc.c **** }
 489:./Library/stm32f4xx_rtc.c **** 
 490:./Library/stm32f4xx_rtc.c **** /**
 491:./Library/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 492:./Library/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 493:./Library/stm32f4xx_rtc.c ****   *         initialized.
 494:./Library/stm32f4xx_rtc.c ****   * @retval None
 495:./Library/stm32f4xx_rtc.c ****   */
 496:./Library/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 497:./Library/stm32f4xx_rtc.c **** {
 498:./Library/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 499:./Library/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 500:./Library/stm32f4xx_rtc.c ****     
 501:./Library/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 502:./Library/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 503:./Library/stm32f4xx_rtc.c **** 
 504:./Library/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 505:./Library/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 506:./Library/stm32f4xx_rtc.c **** }
 507:./Library/stm32f4xx_rtc.c **** 
 508:./Library/stm32f4xx_rtc.c **** /**
 509:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 510:./Library/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 511:./Library/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 512:./Library/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 513:./Library/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 514:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 515:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 516:./Library/stm32f4xx_rtc.c ****   * @retval None
 517:./Library/stm32f4xx_rtc.c ****   */
 518:./Library/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 519:./Library/stm32f4xx_rtc.c **** {
 520:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 521:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 522:./Library/stm32f4xx_rtc.c ****     
 523:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 524:./Library/stm32f4xx_rtc.c ****   {
 525:./Library/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 526:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 527:./Library/stm32f4xx_rtc.c ****   }
 528:./Library/stm32f4xx_rtc.c ****   else
 529:./Library/stm32f4xx_rtc.c ****   {
 530:./Library/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 531:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 532:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 533:./Library/stm32f4xx_rtc.c ****   }
 534:./Library/stm32f4xx_rtc.c **** }
 535:./Library/stm32f4xx_rtc.c **** 
 536:./Library/stm32f4xx_rtc.c **** /**
 537:./Library/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 538:./Library/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 539:./Library/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 540:./Library/stm32f4xx_rtc.c ****   * @param  None
 541:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 542:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 543:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
ARM GAS  /tmp/cccsESzb.s 			page 11


 544:./Library/stm32f4xx_rtc.c ****   */
 545:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 546:./Library/stm32f4xx_rtc.c **** {
 547:./Library/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 548:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 549:./Library/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 550:./Library/stm32f4xx_rtc.c ****      
 551:./Library/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 552:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 553:./Library/stm32f4xx_rtc.c ****   {
 554:./Library/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 555:./Library/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 556:./Library/stm32f4xx_rtc.c ****     
 557:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 558:./Library/stm32f4xx_rtc.c ****     do
 559:./Library/stm32f4xx_rtc.c ****     {
 560:./Library/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 561:./Library/stm32f4xx_rtc.c ****       initcounter++;  
 562:./Library/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 563:./Library/stm32f4xx_rtc.c ****     
 564:./Library/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 565:./Library/stm32f4xx_rtc.c ****     {
 566:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 567:./Library/stm32f4xx_rtc.c ****     }
 568:./Library/stm32f4xx_rtc.c ****     else
 569:./Library/stm32f4xx_rtc.c ****     {
 570:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 571:./Library/stm32f4xx_rtc.c ****     }        
 572:./Library/stm32f4xx_rtc.c ****   }
 573:./Library/stm32f4xx_rtc.c ****   else
 574:./Library/stm32f4xx_rtc.c ****   {
 575:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;  
 576:./Library/stm32f4xx_rtc.c ****   } 
 577:./Library/stm32f4xx_rtc.c ****     
 578:./Library/stm32f4xx_rtc.c ****   return (status);  
 579:./Library/stm32f4xx_rtc.c **** }
 580:./Library/stm32f4xx_rtc.c **** 
 581:./Library/stm32f4xx_rtc.c **** /**
 582:./Library/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 583:./Library/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 584:./Library/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 585:./Library/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 586:./Library/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 587:./Library/stm32f4xx_rtc.c ****   * @param  None
 588:./Library/stm32f4xx_rtc.c ****   * @retval None
 589:./Library/stm32f4xx_rtc.c ****   */
 590:./Library/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 591:./Library/stm32f4xx_rtc.c **** { 
 592:./Library/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 593:./Library/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 594:./Library/stm32f4xx_rtc.c **** }
 595:./Library/stm32f4xx_rtc.c **** 
 596:./Library/stm32f4xx_rtc.c **** /**
 597:./Library/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 598:./Library/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 599:./Library/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 600:./Library/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
ARM GAS  /tmp/cccsESzb.s 			page 12


 601:./Library/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 602:./Library/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 603:./Library/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 604:./Library/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 605:./Library/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 606:./Library/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 607:./Library/stm32f4xx_rtc.c ****   * @param  None
 608:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 609:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 610:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 611:./Library/stm32f4xx_rtc.c ****   */
 612:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 613:./Library/stm32f4xx_rtc.c **** {
 614:./Library/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 615:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 616:./Library/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 617:./Library/stm32f4xx_rtc.c **** 
 618:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 619:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 620:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 621:./Library/stm32f4xx_rtc.c ****     
 622:./Library/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 623:./Library/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 624:./Library/stm32f4xx_rtc.c ****     
 625:./Library/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 626:./Library/stm32f4xx_rtc.c ****   do
 627:./Library/stm32f4xx_rtc.c ****   {
 628:./Library/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 629:./Library/stm32f4xx_rtc.c ****     synchrocounter++;  
 630:./Library/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 631:./Library/stm32f4xx_rtc.c ****     
 632:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 633:./Library/stm32f4xx_rtc.c ****   {
 634:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
 635:./Library/stm32f4xx_rtc.c ****   }
 636:./Library/stm32f4xx_rtc.c ****   else
 637:./Library/stm32f4xx_rtc.c ****   {
 638:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 639:./Library/stm32f4xx_rtc.c ****   }        
 640:./Library/stm32f4xx_rtc.c **** 
 641:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 642:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 643:./Library/stm32f4xx_rtc.c ****     
 644:./Library/stm32f4xx_rtc.c ****   return (status); 
 645:./Library/stm32f4xx_rtc.c **** }
 646:./Library/stm32f4xx_rtc.c **** 
 647:./Library/stm32f4xx_rtc.c **** /**
 648:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 649:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 650:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 651:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 652:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 653:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 654:./Library/stm32f4xx_rtc.c ****   */
 655:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 656:./Library/stm32f4xx_rtc.c **** { 
 657:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
ARM GAS  /tmp/cccsESzb.s 			page 13


 658:./Library/stm32f4xx_rtc.c ****   
 659:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 660:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 661:./Library/stm32f4xx_rtc.c ****   
 662:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 663:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 664:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 665:./Library/stm32f4xx_rtc.c ****     
 666:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 667:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 668:./Library/stm32f4xx_rtc.c ****   {
 669:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 670:./Library/stm32f4xx_rtc.c ****   } 
 671:./Library/stm32f4xx_rtc.c ****   else
 672:./Library/stm32f4xx_rtc.c ****   {  
 673:./Library/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 674:./Library/stm32f4xx_rtc.c ****     {
 675:./Library/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 676:./Library/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 677:./Library/stm32f4xx_rtc.c ****     }
 678:./Library/stm32f4xx_rtc.c ****     else
 679:./Library/stm32f4xx_rtc.c ****     {
 680:./Library/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 681:./Library/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 682:./Library/stm32f4xx_rtc.c ****     }
 683:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 684:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 685:./Library/stm32f4xx_rtc.c ****     
 686:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
 687:./Library/stm32f4xx_rtc.c ****   }
 688:./Library/stm32f4xx_rtc.c ****   
 689:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 690:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 691:./Library/stm32f4xx_rtc.c ****   
 692:./Library/stm32f4xx_rtc.c ****   return status; 
 693:./Library/stm32f4xx_rtc.c **** }
 694:./Library/stm32f4xx_rtc.c **** 
 695:./Library/stm32f4xx_rtc.c **** /**
 696:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 697:./Library/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 698:./Library/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 699:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 700:./Library/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 701:./Library/stm32f4xx_rtc.c ****   * @retval None
 702:./Library/stm32f4xx_rtc.c **** */
 703:./Library/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 704:./Library/stm32f4xx_rtc.c **** {
 705:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 706:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 707:./Library/stm32f4xx_rtc.c **** 
 708:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 709:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 710:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 711:./Library/stm32f4xx_rtc.c ****   
 712:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 713:./Library/stm32f4xx_rtc.c ****   {
 714:./Library/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
ARM GAS  /tmp/cccsESzb.s 			page 14


 715:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 716:./Library/stm32f4xx_rtc.c ****   }
 717:./Library/stm32f4xx_rtc.c ****   else
 718:./Library/stm32f4xx_rtc.c ****   {
 719:./Library/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 720:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 721:./Library/stm32f4xx_rtc.c ****   }
 722:./Library/stm32f4xx_rtc.c **** 
 723:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 724:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 725:./Library/stm32f4xx_rtc.c **** }
 726:./Library/stm32f4xx_rtc.c **** 
 727:./Library/stm32f4xx_rtc.c **** /**
 728:./Library/stm32f4xx_rtc.c ****   * @}
 729:./Library/stm32f4xx_rtc.c ****   */
 730:./Library/stm32f4xx_rtc.c **** 
 731:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 732:./Library/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 733:./Library/stm32f4xx_rtc.c ****  *
 734:./Library/stm32f4xx_rtc.c **** @verbatim   
 735:./Library/stm32f4xx_rtc.c ****  ===============================================================================
 736:./Library/stm32f4xx_rtc.c ****                  ##### Time and Date configuration functions #####
 737:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
 738:./Library/stm32f4xx_rtc.c ****  
 739:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Calendar
 740:./Library/stm32f4xx_rtc.c ****       (Time and Date).
 741:./Library/stm32f4xx_rtc.c **** 
 742:./Library/stm32f4xx_rtc.c **** @endverbatim
 743:./Library/stm32f4xx_rtc.c ****   * @{
 744:./Library/stm32f4xx_rtc.c ****   */
 745:./Library/stm32f4xx_rtc.c **** 
 746:./Library/stm32f4xx_rtc.c **** /**
 747:./Library/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 748:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 749:./Library/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 750:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 751:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 752:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 753:./Library/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 754:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 755:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 756:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 757:./Library/stm32f4xx_rtc.c ****   */
 758:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 759:./Library/stm32f4xx_rtc.c **** {
 760:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 761:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 762:./Library/stm32f4xx_rtc.c ****     
 763:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 764:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 765:./Library/stm32f4xx_rtc.c ****   
 766:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 767:./Library/stm32f4xx_rtc.c ****   {
 768:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 769:./Library/stm32f4xx_rtc.c ****     {
 770:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 771:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
ARM GAS  /tmp/cccsESzb.s 			page 15


 772:./Library/stm32f4xx_rtc.c ****     } 
 773:./Library/stm32f4xx_rtc.c ****     else
 774:./Library/stm32f4xx_rtc.c ****     {
 775:./Library/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 776:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 777:./Library/stm32f4xx_rtc.c ****     }
 778:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 779:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 780:./Library/stm32f4xx_rtc.c ****   }
 781:./Library/stm32f4xx_rtc.c ****   else
 782:./Library/stm32f4xx_rtc.c ****   {
 783:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 784:./Library/stm32f4xx_rtc.c ****     {
 785:./Library/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 786:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 787:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 788:./Library/stm32f4xx_rtc.c ****     } 
 789:./Library/stm32f4xx_rtc.c ****     else
 790:./Library/stm32f4xx_rtc.c ****     {
 791:./Library/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 792:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 793:./Library/stm32f4xx_rtc.c ****     }
 794:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 795:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 796:./Library/stm32f4xx_rtc.c ****   }
 797:./Library/stm32f4xx_rtc.c ****   
 798:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 799:./Library/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 800:./Library/stm32f4xx_rtc.c ****   {
 801:./Library/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 802:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 803:./Library/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 804:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 805:./Library/stm32f4xx_rtc.c ****   }  
 806:./Library/stm32f4xx_rtc.c ****   else
 807:./Library/stm32f4xx_rtc.c ****   {
 808:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 809:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 810:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 811:./Library/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 812:./Library/stm32f4xx_rtc.c ****   }  
 813:./Library/stm32f4xx_rtc.c **** 
 814:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 815:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 816:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 817:./Library/stm32f4xx_rtc.c **** 
 818:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 819:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 820:./Library/stm32f4xx_rtc.c ****   {
 821:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 822:./Library/stm32f4xx_rtc.c ****   } 
 823:./Library/stm32f4xx_rtc.c ****   else
 824:./Library/stm32f4xx_rtc.c ****   {
 825:./Library/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 826:./Library/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 827:./Library/stm32f4xx_rtc.c **** 
 828:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
ARM GAS  /tmp/cccsESzb.s 			page 16


 829:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 830:./Library/stm32f4xx_rtc.c **** 
 831:./Library/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 832:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 833:./Library/stm32f4xx_rtc.c ****     {
 834:./Library/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 835:./Library/stm32f4xx_rtc.c ****     {
 836:./Library/stm32f4xx_rtc.c ****       status = ERROR;
 837:./Library/stm32f4xx_rtc.c ****     }
 838:./Library/stm32f4xx_rtc.c ****     else
 839:./Library/stm32f4xx_rtc.c ****     {
 840:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 841:./Library/stm32f4xx_rtc.c ****     }
 842:./Library/stm32f4xx_rtc.c ****   }
 843:./Library/stm32f4xx_rtc.c ****     else
 844:./Library/stm32f4xx_rtc.c ****     {
 845:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
 846:./Library/stm32f4xx_rtc.c ****     }
 847:./Library/stm32f4xx_rtc.c ****   }
 848:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 849:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 850:./Library/stm32f4xx_rtc.c ****     
 851:./Library/stm32f4xx_rtc.c ****   return status;
 852:./Library/stm32f4xx_rtc.c **** }
 853:./Library/stm32f4xx_rtc.c **** 
 854:./Library/stm32f4xx_rtc.c **** /**
 855:./Library/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 856:./Library/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 857:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 858:./Library/stm32f4xx_rtc.c ****   *         initialized.
 859:./Library/stm32f4xx_rtc.c ****   * @retval None
 860:./Library/stm32f4xx_rtc.c ****   */
 861:./Library/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 862:./Library/stm32f4xx_rtc.c **** {
 863:./Library/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 864:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 865:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 866:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 867:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 868:./Library/stm32f4xx_rtc.c **** }
 869:./Library/stm32f4xx_rtc.c **** 
 870:./Library/stm32f4xx_rtc.c **** /**
 871:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 872:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 873:./Library/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 874:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 875:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 876:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 877:./Library/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 878:./Library/stm32f4xx_rtc.c ****   * @retval None
 879:./Library/stm32f4xx_rtc.c ****   */
 880:./Library/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 881:./Library/stm32f4xx_rtc.c **** {
 882:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 883:./Library/stm32f4xx_rtc.c **** 
 884:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 885:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
ARM GAS  /tmp/cccsESzb.s 			page 17


 886:./Library/stm32f4xx_rtc.c **** 
 887:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 888:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 889:./Library/stm32f4xx_rtc.c ****   
 890:./Library/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 891:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 892:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 893:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 894:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 895:./Library/stm32f4xx_rtc.c **** 
 896:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 897:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 898:./Library/stm32f4xx_rtc.c ****   {
 899:./Library/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 900:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 901:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 902:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 903:./Library/stm32f4xx_rtc.c ****   }
 904:./Library/stm32f4xx_rtc.c **** }
 905:./Library/stm32f4xx_rtc.c **** 
 906:./Library/stm32f4xx_rtc.c **** /**
 907:./Library/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Sub seconds value.
 908:./Library/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 909:./Library/stm32f4xx_rtc.c ****   *         SSR register.
 910:./Library/stm32f4xx_rtc.c ****   * @param  None
 911:./Library/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Sub seconds value.
 912:./Library/stm32f4xx_rtc.c ****   */
 913:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 914:./Library/stm32f4xx_rtc.c **** {
 915:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 916:./Library/stm32f4xx_rtc.c ****   
 917:./Library/stm32f4xx_rtc.c ****   /* Get sub seconds values from the correspondent registers*/
 918:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 919:./Library/stm32f4xx_rtc.c ****   
 920:./Library/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 921:./Library/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 922:./Library/stm32f4xx_rtc.c ****   
 923:./Library/stm32f4xx_rtc.c ****   return (tmpreg);
 924:./Library/stm32f4xx_rtc.c **** }
 925:./Library/stm32f4xx_rtc.c **** 
 926:./Library/stm32f4xx_rtc.c **** /**
 927:./Library/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 928:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 929:./Library/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 930:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 931:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 932:./Library/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 933:./Library/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 934:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 935:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 936:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 937:./Library/stm32f4xx_rtc.c ****   */
 938:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 939:./Library/stm32f4xx_rtc.c **** {
 940:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 941:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 942:./Library/stm32f4xx_rtc.c ****   
ARM GAS  /tmp/cccsESzb.s 			page 18


 943:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 944:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 945:./Library/stm32f4xx_rtc.c **** 
 946:./Library/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 947:./Library/stm32f4xx_rtc.c ****   {
 948:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 949:./Library/stm32f4xx_rtc.c ****   }  
 950:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 951:./Library/stm32f4xx_rtc.c ****   {
 952:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 953:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 954:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 955:./Library/stm32f4xx_rtc.c ****   }
 956:./Library/stm32f4xx_rtc.c ****   else
 957:./Library/stm32f4xx_rtc.c ****   {
 958:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 959:./Library/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 960:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 961:./Library/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 962:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 963:./Library/stm32f4xx_rtc.c ****   }
 964:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 965:./Library/stm32f4xx_rtc.c **** 
 966:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 967:./Library/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 968:./Library/stm32f4xx_rtc.c ****   {
 969:./Library/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 970:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 971:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 972:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 973:./Library/stm32f4xx_rtc.c ****   }  
 974:./Library/stm32f4xx_rtc.c ****   else
 975:./Library/stm32f4xx_rtc.c ****   {
 976:./Library/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 977:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 978:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 979:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 980:./Library/stm32f4xx_rtc.c ****   }
 981:./Library/stm32f4xx_rtc.c **** 
 982:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 983:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 984:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 985:./Library/stm32f4xx_rtc.c **** 
 986:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 987:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 988:./Library/stm32f4xx_rtc.c ****   {
 989:./Library/stm32f4xx_rtc.c ****     status = ERROR;
 990:./Library/stm32f4xx_rtc.c ****   } 
 991:./Library/stm32f4xx_rtc.c ****   else
 992:./Library/stm32f4xx_rtc.c ****   {
 993:./Library/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 994:./Library/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 995:./Library/stm32f4xx_rtc.c **** 
 996:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 997:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 998:./Library/stm32f4xx_rtc.c **** 
 999:./Library/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
ARM GAS  /tmp/cccsESzb.s 			page 19


1000:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
1001:./Library/stm32f4xx_rtc.c ****     {
1002:./Library/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
1003:./Library/stm32f4xx_rtc.c ****     {
1004:./Library/stm32f4xx_rtc.c ****       status = ERROR;
1005:./Library/stm32f4xx_rtc.c ****     }
1006:./Library/stm32f4xx_rtc.c ****     else
1007:./Library/stm32f4xx_rtc.c ****     {
1008:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
1009:./Library/stm32f4xx_rtc.c ****     }
1010:./Library/stm32f4xx_rtc.c ****   }
1011:./Library/stm32f4xx_rtc.c ****     else
1012:./Library/stm32f4xx_rtc.c ****     {
1013:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
1014:./Library/stm32f4xx_rtc.c ****     }
1015:./Library/stm32f4xx_rtc.c ****   }
1016:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1017:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1018:./Library/stm32f4xx_rtc.c ****   
1019:./Library/stm32f4xx_rtc.c ****   return status;
1020:./Library/stm32f4xx_rtc.c **** }
1021:./Library/stm32f4xx_rtc.c **** 
1022:./Library/stm32f4xx_rtc.c **** /**
1023:./Library/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1024:./Library/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1025:./Library/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1026:./Library/stm32f4xx_rtc.c ****   *         initialized.
1027:./Library/stm32f4xx_rtc.c ****   * @retval None
1028:./Library/stm32f4xx_rtc.c ****   */
1029:./Library/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1030:./Library/stm32f4xx_rtc.c **** {
1031:./Library/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1032:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1033:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1034:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1035:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1036:./Library/stm32f4xx_rtc.c **** }
1037:./Library/stm32f4xx_rtc.c **** 
1038:./Library/stm32f4xx_rtc.c **** /**
1039:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1040:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1041:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1042:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1043:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1044:./Library/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1045:./Library/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1046:./Library/stm32f4xx_rtc.c ****   * @retval None
1047:./Library/stm32f4xx_rtc.c ****   */
1048:./Library/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1049:./Library/stm32f4xx_rtc.c **** {
1050:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1051:./Library/stm32f4xx_rtc.c **** 
1052:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1053:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1054:./Library/stm32f4xx_rtc.c ****   
1055:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1056:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
ARM GAS  /tmp/cccsESzb.s 			page 20


1057:./Library/stm32f4xx_rtc.c **** 
1058:./Library/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1059:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1060:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1061:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1062:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
1063:./Library/stm32f4xx_rtc.c **** 
1064:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1065:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1066:./Library/stm32f4xx_rtc.c ****   {
1067:./Library/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1068:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1069:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1070:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1071:./Library/stm32f4xx_rtc.c ****   }
1072:./Library/stm32f4xx_rtc.c **** }
1073:./Library/stm32f4xx_rtc.c **** 
1074:./Library/stm32f4xx_rtc.c **** /**
1075:./Library/stm32f4xx_rtc.c ****   * @}
1076:./Library/stm32f4xx_rtc.c ****   */
1077:./Library/stm32f4xx_rtc.c **** 
1078:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1079:./Library/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1080:./Library/stm32f4xx_rtc.c ****  *
1081:./Library/stm32f4xx_rtc.c **** @verbatim   
1082:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1083:./Library/stm32f4xx_rtc.c ****          ##### Alarms A and B configuration functions #####
1084:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1085:./Library/stm32f4xx_rtc.c ****  
1086:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Alarms.
1087:./Library/stm32f4xx_rtc.c **** 
1088:./Library/stm32f4xx_rtc.c **** @endverbatim
1089:./Library/stm32f4xx_rtc.c ****   * @{
1090:./Library/stm32f4xx_rtc.c ****   */
1091:./Library/stm32f4xx_rtc.c **** 
1092:./Library/stm32f4xx_rtc.c **** /**
1093:./Library/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1094:./Library/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1095:./Library/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1096:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1097:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1098:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1099:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1100:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1101:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1102:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1103:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1104:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1105:./Library/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1106:./Library/stm32f4xx_rtc.c ****   * @retval None
1107:./Library/stm32f4xx_rtc.c ****   */
1108:./Library/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1109:./Library/stm32f4xx_rtc.c **** {
1110:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1111:./Library/stm32f4xx_rtc.c ****   
1112:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1113:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
ARM GAS  /tmp/cccsESzb.s 			page 21


1114:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1115:./Library/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1116:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1117:./Library/stm32f4xx_rtc.c **** 
1118:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1119:./Library/stm32f4xx_rtc.c ****   {
1120:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1121:./Library/stm32f4xx_rtc.c ****     {
1122:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1123:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1124:./Library/stm32f4xx_rtc.c ****     } 
1125:./Library/stm32f4xx_rtc.c ****     else
1126:./Library/stm32f4xx_rtc.c ****     {
1127:./Library/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1128:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1129:./Library/stm32f4xx_rtc.c ****     }
1130:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1131:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1132:./Library/stm32f4xx_rtc.c ****     
1133:./Library/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1134:./Library/stm32f4xx_rtc.c ****     {
1135:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1136:./Library/stm32f4xx_rtc.c ****     }
1137:./Library/stm32f4xx_rtc.c ****     else
1138:./Library/stm32f4xx_rtc.c ****     {
1139:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1140:./Library/stm32f4xx_rtc.c ****     }
1141:./Library/stm32f4xx_rtc.c ****   }
1142:./Library/stm32f4xx_rtc.c ****   else
1143:./Library/stm32f4xx_rtc.c ****   {
1144:./Library/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1145:./Library/stm32f4xx_rtc.c ****     {
1146:./Library/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1147:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1148:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1149:./Library/stm32f4xx_rtc.c ****     } 
1150:./Library/stm32f4xx_rtc.c ****     else
1151:./Library/stm32f4xx_rtc.c ****     {
1152:./Library/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1153:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1154:./Library/stm32f4xx_rtc.c ****     }
1155:./Library/stm32f4xx_rtc.c ****     
1156:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1157:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1158:./Library/stm32f4xx_rtc.c ****     
1159:./Library/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1160:./Library/stm32f4xx_rtc.c ****     {
1161:./Library/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1162:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1163:./Library/stm32f4xx_rtc.c ****     }
1164:./Library/stm32f4xx_rtc.c ****     else
1165:./Library/stm32f4xx_rtc.c ****     {
1166:./Library/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1167:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1168:./Library/stm32f4xx_rtc.c ****     }    
1169:./Library/stm32f4xx_rtc.c ****   }
1170:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 22


1171:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1172:./Library/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1173:./Library/stm32f4xx_rtc.c ****   {
1174:./Library/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1175:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1176:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1177:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1178:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1179:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1180:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1181:./Library/stm32f4xx_rtc.c ****   }  
1182:./Library/stm32f4xx_rtc.c ****   else
1183:./Library/stm32f4xx_rtc.c ****   {
1184:./Library/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1185:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1186:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1187:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1188:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1189:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1190:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1191:./Library/stm32f4xx_rtc.c ****   } 
1192:./Library/stm32f4xx_rtc.c **** 
1193:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1194:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1195:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1196:./Library/stm32f4xx_rtc.c **** 
1197:./Library/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1198:./Library/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1199:./Library/stm32f4xx_rtc.c ****   {
1200:./Library/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1201:./Library/stm32f4xx_rtc.c ****   }
1202:./Library/stm32f4xx_rtc.c ****   else
1203:./Library/stm32f4xx_rtc.c ****   {
1204:./Library/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1205:./Library/stm32f4xx_rtc.c ****   }
1206:./Library/stm32f4xx_rtc.c **** 
1207:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1208:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1209:./Library/stm32f4xx_rtc.c **** }
1210:./Library/stm32f4xx_rtc.c **** 
1211:./Library/stm32f4xx_rtc.c **** /**
1212:./Library/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1213:./Library/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1214:./Library/stm32f4xx_rtc.c ****   *         all fields are masked).
1215:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1216:./Library/stm32f4xx_rtc.c ****   *         will be initialized.
1217:./Library/stm32f4xx_rtc.c ****   * @retval None
1218:./Library/stm32f4xx_rtc.c ****   */
1219:./Library/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1220:./Library/stm32f4xx_rtc.c **** {
1221:./Library/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1222:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1223:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1224:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1225:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1226:./Library/stm32f4xx_rtc.c **** 
1227:./Library/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
ARM GAS  /tmp/cccsESzb.s 			page 23


1228:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1229:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1230:./Library/stm32f4xx_rtc.c **** 
1231:./Library/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1232:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1233:./Library/stm32f4xx_rtc.c **** }
1234:./Library/stm32f4xx_rtc.c **** 
1235:./Library/stm32f4xx_rtc.c **** /**
1236:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1237:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1238:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1239:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1240:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1241:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1242:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1243:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1244:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1245:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1246:./Library/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1247:./Library/stm32f4xx_rtc.c ****   * @retval None
1248:./Library/stm32f4xx_rtc.c ****   */
1249:./Library/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1250:./Library/stm32f4xx_rtc.c **** {
1251:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1252:./Library/stm32f4xx_rtc.c **** 
1253:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1254:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1255:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1256:./Library/stm32f4xx_rtc.c **** 
1257:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1258:./Library/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1259:./Library/stm32f4xx_rtc.c ****   {
1260:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1261:./Library/stm32f4xx_rtc.c ****   }
1262:./Library/stm32f4xx_rtc.c ****   else
1263:./Library/stm32f4xx_rtc.c ****   {
1264:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1265:./Library/stm32f4xx_rtc.c ****   }
1266:./Library/stm32f4xx_rtc.c **** 
1267:./Library/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1268:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1269:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1270:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1271:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1272:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1273:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1274:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1275:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1276:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1277:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1278:./Library/stm32f4xx_rtc.c **** 
1279:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1280:./Library/stm32f4xx_rtc.c ****   {
1281:./Library/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1282:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1283:./Library/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1284:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
ARM GAS  /tmp/cccsESzb.s 			page 24


1285:./Library/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1286:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1287:./Library/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1288:./Library/stm32f4xx_rtc.c ****   }  
1289:./Library/stm32f4xx_rtc.c **** }
1290:./Library/stm32f4xx_rtc.c **** 
1291:./Library/stm32f4xx_rtc.c **** /**
1292:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1293:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1294:./Library/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1295:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1296:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1297:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1298:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1299:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1300:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1301:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1302:./Library/stm32f4xx_rtc.c ****   */
1303:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1304:./Library/stm32f4xx_rtc.c **** {
1305:./Library/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1306:./Library/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1307:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1308:./Library/stm32f4xx_rtc.c ****     
1309:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1310:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1311:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1312:./Library/stm32f4xx_rtc.c **** 
1313:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1314:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1315:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1316:./Library/stm32f4xx_rtc.c **** 
1317:./Library/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1318:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1319:./Library/stm32f4xx_rtc.c ****   {
1320:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1321:./Library/stm32f4xx_rtc.c **** 
1322:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
1323:./Library/stm32f4xx_rtc.c ****   }
1324:./Library/stm32f4xx_rtc.c ****   else
1325:./Library/stm32f4xx_rtc.c ****   { 
1326:./Library/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1327:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1328:./Library/stm32f4xx_rtc.c ****    
1329:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1330:./Library/stm32f4xx_rtc.c ****     do
1331:./Library/stm32f4xx_rtc.c ****     {
1332:./Library/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1333:./Library/stm32f4xx_rtc.c ****       alarmcounter++;  
1334:./Library/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1335:./Library/stm32f4xx_rtc.c ****     
1336:./Library/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1337:./Library/stm32f4xx_rtc.c ****     {
1338:./Library/stm32f4xx_rtc.c ****       status = ERROR;
1339:./Library/stm32f4xx_rtc.c ****     } 
1340:./Library/stm32f4xx_rtc.c ****     else
1341:./Library/stm32f4xx_rtc.c ****     {
ARM GAS  /tmp/cccsESzb.s 			page 25


1342:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
1343:./Library/stm32f4xx_rtc.c ****     }        
1344:./Library/stm32f4xx_rtc.c ****   } 
1345:./Library/stm32f4xx_rtc.c **** 
1346:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1347:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1348:./Library/stm32f4xx_rtc.c ****   
1349:./Library/stm32f4xx_rtc.c ****   return status;
1350:./Library/stm32f4xx_rtc.c **** }
1351:./Library/stm32f4xx_rtc.c **** 
1352:./Library/stm32f4xx_rtc.c **** /**
1353:./Library/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Sub seconds value and mask.*
1354:./Library/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1355:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1356:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1357:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1358:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1359:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Sub seconds value.
1360:./Library/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1361:./Library/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Sub seconds Mask.
1362:./Library/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1363:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1364:./Library/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1365:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1366:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1367:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1368:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1369:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1370:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1371:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1372:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1373:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1374:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1375:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1376:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1377:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1378:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1379:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1380:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1381:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1382:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1383:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1384:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1385:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1386:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1387:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1388:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1389:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1390:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1391:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1392:./Library/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1393:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1394:./Library/stm32f4xx_rtc.c ****   *                                          to activate alarm
1395:./Library/stm32f4xx_rtc.c ****   * @retval None
1396:./Library/stm32f4xx_rtc.c ****   */
1397:./Library/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1398:./Library/stm32f4xx_rtc.c **** {
ARM GAS  /tmp/cccsESzb.s 			page 26


1399:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1400:./Library/stm32f4xx_rtc.c **** 
1401:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1402:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1403:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1404:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1405:./Library/stm32f4xx_rtc.c ****   
1406:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1407:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1408:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1409:./Library/stm32f4xx_rtc.c ****   
1410:./Library/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1411:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1412:./Library/stm32f4xx_rtc.c ****   
1413:./Library/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1414:./Library/stm32f4xx_rtc.c ****   {
1415:./Library/stm32f4xx_rtc.c ****     /* Configure the Alarm A Sub Second register */
1416:./Library/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1417:./Library/stm32f4xx_rtc.c ****   }
1418:./Library/stm32f4xx_rtc.c ****   else
1419:./Library/stm32f4xx_rtc.c ****   {
1420:./Library/stm32f4xx_rtc.c ****     /* Configure the Alarm B Sub Second register */
1421:./Library/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1422:./Library/stm32f4xx_rtc.c ****   }
1423:./Library/stm32f4xx_rtc.c **** 
1424:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1425:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1426:./Library/stm32f4xx_rtc.c **** 
1427:./Library/stm32f4xx_rtc.c **** }
1428:./Library/stm32f4xx_rtc.c **** 
1429:./Library/stm32f4xx_rtc.c **** /**
1430:./Library/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Sub seconds value.
1431:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1432:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1433:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1434:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1435:./Library/stm32f4xx_rtc.c ****   * @param  None
1436:./Library/stm32f4xx_rtc.c ****   * @retval RTC Alarm Sub seconds value.
1437:./Library/stm32f4xx_rtc.c ****   */
1438:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1439:./Library/stm32f4xx_rtc.c **** {
1440:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1441:./Library/stm32f4xx_rtc.c ****   
1442:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1443:./Library/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1444:./Library/stm32f4xx_rtc.c ****   {
1445:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1446:./Library/stm32f4xx_rtc.c ****   }
1447:./Library/stm32f4xx_rtc.c ****   else
1448:./Library/stm32f4xx_rtc.c ****   {
1449:./Library/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1450:./Library/stm32f4xx_rtc.c ****   } 
1451:./Library/stm32f4xx_rtc.c ****   
1452:./Library/stm32f4xx_rtc.c ****   return (tmpreg);
1453:./Library/stm32f4xx_rtc.c **** }
1454:./Library/stm32f4xx_rtc.c **** 
1455:./Library/stm32f4xx_rtc.c **** /**
ARM GAS  /tmp/cccsESzb.s 			page 27


1456:./Library/stm32f4xx_rtc.c ****   * @}
1457:./Library/stm32f4xx_rtc.c ****   */
1458:./Library/stm32f4xx_rtc.c **** 
1459:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1460:./Library/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1461:./Library/stm32f4xx_rtc.c ****  *
1462:./Library/stm32f4xx_rtc.c **** @verbatim   
1463:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1464:./Library/stm32f4xx_rtc.c ****                  ##### WakeUp Timer configuration functions #####
1465:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1466:./Library/stm32f4xx_rtc.c **** 
1467:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC WakeUp.
1468:./Library/stm32f4xx_rtc.c **** 
1469:./Library/stm32f4xx_rtc.c **** @endverbatim
1470:./Library/stm32f4xx_rtc.c ****   * @{
1471:./Library/stm32f4xx_rtc.c ****   */
1472:./Library/stm32f4xx_rtc.c **** 
1473:./Library/stm32f4xx_rtc.c **** /**
1474:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1475:./Library/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1476:./Library/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1477:./Library/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1478:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1479:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1480:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1481:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1482:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1483:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1484:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1485:./Library/stm32f4xx_rtc.c ****   * @retval None
1486:./Library/stm32f4xx_rtc.c ****   */
1487:./Library/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1488:./Library/stm32f4xx_rtc.c **** {
1489:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1490:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1491:./Library/stm32f4xx_rtc.c **** 
1492:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1493:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1494:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1495:./Library/stm32f4xx_rtc.c **** 
1496:./Library/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1497:./Library/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1498:./Library/stm32f4xx_rtc.c **** 
1499:./Library/stm32f4xx_rtc.c ****   /* Configure the clock source */
1500:./Library/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1501:./Library/stm32f4xx_rtc.c ****   
1502:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1503:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1504:./Library/stm32f4xx_rtc.c **** }
1505:./Library/stm32f4xx_rtc.c **** 
1506:./Library/stm32f4xx_rtc.c **** /**
1507:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1508:./Library/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1509:./Library/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1510:./Library/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1511:./Library/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1512:./Library/stm32f4xx_rtc.c ****   * @retval None
ARM GAS  /tmp/cccsESzb.s 			page 28


1513:./Library/stm32f4xx_rtc.c ****   */
1514:./Library/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1515:./Library/stm32f4xx_rtc.c **** {
1516:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1517:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1518:./Library/stm32f4xx_rtc.c ****   
1519:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1520:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1521:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1522:./Library/stm32f4xx_rtc.c ****   
1523:./Library/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1524:./Library/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1525:./Library/stm32f4xx_rtc.c ****   
1526:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1527:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1528:./Library/stm32f4xx_rtc.c **** }
1529:./Library/stm32f4xx_rtc.c **** 
1530:./Library/stm32f4xx_rtc.c **** /**
1531:./Library/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1532:./Library/stm32f4xx_rtc.c ****   * @param  None
1533:./Library/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1534:./Library/stm32f4xx_rtc.c ****   */
1535:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1536:./Library/stm32f4xx_rtc.c **** {
1537:./Library/stm32f4xx_rtc.c ****   /* Get the counter value */
1538:./Library/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1539:./Library/stm32f4xx_rtc.c **** }
1540:./Library/stm32f4xx_rtc.c **** 
1541:./Library/stm32f4xx_rtc.c **** /**
1542:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1543:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1544:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1545:./Library/stm32f4xx_rtc.c ****   * @retval None
1546:./Library/stm32f4xx_rtc.c ****   */
1547:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1548:./Library/stm32f4xx_rtc.c **** {
1549:./Library/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1550:./Library/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1551:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1552:./Library/stm32f4xx_rtc.c ****   
1553:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1554:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1555:./Library/stm32f4xx_rtc.c **** 
1556:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1557:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1558:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1559:./Library/stm32f4xx_rtc.c **** 
1560:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1561:./Library/stm32f4xx_rtc.c ****   {
1562:./Library/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1563:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1564:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
1565:./Library/stm32f4xx_rtc.c ****   }
1566:./Library/stm32f4xx_rtc.c ****   else
1567:./Library/stm32f4xx_rtc.c ****   {
1568:./Library/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1569:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
ARM GAS  /tmp/cccsESzb.s 			page 29


1570:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1571:./Library/stm32f4xx_rtc.c ****     do
1572:./Library/stm32f4xx_rtc.c ****     {
1573:./Library/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1574:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
1575:./Library/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1576:./Library/stm32f4xx_rtc.c ****     
1577:./Library/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1578:./Library/stm32f4xx_rtc.c ****     {
1579:./Library/stm32f4xx_rtc.c ****       status = ERROR;
1580:./Library/stm32f4xx_rtc.c ****     }
1581:./Library/stm32f4xx_rtc.c ****     else
1582:./Library/stm32f4xx_rtc.c ****     {
1583:./Library/stm32f4xx_rtc.c ****       status = SUCCESS;
1584:./Library/stm32f4xx_rtc.c ****     }    
1585:./Library/stm32f4xx_rtc.c ****   }
1586:./Library/stm32f4xx_rtc.c **** 
1587:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1588:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1589:./Library/stm32f4xx_rtc.c ****   
1590:./Library/stm32f4xx_rtc.c ****   return status;
1591:./Library/stm32f4xx_rtc.c **** }
1592:./Library/stm32f4xx_rtc.c **** 
1593:./Library/stm32f4xx_rtc.c **** /**
1594:./Library/stm32f4xx_rtc.c ****   * @}
1595:./Library/stm32f4xx_rtc.c ****   */
1596:./Library/stm32f4xx_rtc.c **** 
1597:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1598:./Library/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1599:./Library/stm32f4xx_rtc.c ****  *
1600:./Library/stm32f4xx_rtc.c **** @verbatim   
1601:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1602:./Library/stm32f4xx_rtc.c ****               ##### Daylight Saving configuration functions #####
1603:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1604:./Library/stm32f4xx_rtc.c **** 
1605:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC DayLight Saving.
1606:./Library/stm32f4xx_rtc.c **** 
1607:./Library/stm32f4xx_rtc.c **** @endverbatim
1608:./Library/stm32f4xx_rtc.c ****   * @{
1609:./Library/stm32f4xx_rtc.c ****   */
1610:./Library/stm32f4xx_rtc.c **** 
1611:./Library/stm32f4xx_rtc.c **** /**
1612:./Library/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1613:./Library/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1614:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1615:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1616:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1617:./Library/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1618:./Library/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1619:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1620:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1621:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1622:./Library/stm32f4xx_rtc.c ****   * @retval None
1623:./Library/stm32f4xx_rtc.c ****   */
1624:./Library/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1625:./Library/stm32f4xx_rtc.c **** {
1626:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/cccsESzb.s 			page 30


1627:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1628:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1629:./Library/stm32f4xx_rtc.c **** 
1630:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1631:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1632:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1633:./Library/stm32f4xx_rtc.c **** 
1634:./Library/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1635:./Library/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1636:./Library/stm32f4xx_rtc.c **** 
1637:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1638:./Library/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1639:./Library/stm32f4xx_rtc.c **** 
1640:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1641:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1642:./Library/stm32f4xx_rtc.c **** }
1643:./Library/stm32f4xx_rtc.c **** 
1644:./Library/stm32f4xx_rtc.c **** /**
1645:./Library/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1646:./Library/stm32f4xx_rtc.c ****   * @param  None
1647:./Library/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1648:./Library/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1649:./Library/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1650:./Library/stm32f4xx_rtc.c ****   */
1651:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1652:./Library/stm32f4xx_rtc.c **** {
1653:./Library/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1654:./Library/stm32f4xx_rtc.c **** }
1655:./Library/stm32f4xx_rtc.c **** 
1656:./Library/stm32f4xx_rtc.c **** /**
1657:./Library/stm32f4xx_rtc.c ****   * @}
1658:./Library/stm32f4xx_rtc.c ****   */
1659:./Library/stm32f4xx_rtc.c **** 
1660:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1661:./Library/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1662:./Library/stm32f4xx_rtc.c ****  *
1663:./Library/stm32f4xx_rtc.c **** @verbatim   
1664:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1665:./Library/stm32f4xx_rtc.c ****                  ##### Output pin Configuration function #####
1666:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1667:./Library/stm32f4xx_rtc.c **** 
1668:./Library/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC Output source.
1669:./Library/stm32f4xx_rtc.c **** 
1670:./Library/stm32f4xx_rtc.c **** @endverbatim
1671:./Library/stm32f4xx_rtc.c ****   * @{
1672:./Library/stm32f4xx_rtc.c ****   */
1673:./Library/stm32f4xx_rtc.c **** 
1674:./Library/stm32f4xx_rtc.c **** /**
1675:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1676:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1677:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1678:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1679:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1680:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1681:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1682:./Library/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1683:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
ARM GAS  /tmp/cccsESzb.s 			page 31


1684:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1685:./Library/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1686:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1687:./Library/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1688:./Library/stm32f4xx_rtc.c ****   * @retval None
1689:./Library/stm32f4xx_rtc.c ****   */
1690:./Library/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1691:./Library/stm32f4xx_rtc.c **** {
1692:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1693:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1694:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1695:./Library/stm32f4xx_rtc.c **** 
1696:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1697:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1698:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1699:./Library/stm32f4xx_rtc.c **** 
1700:./Library/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1701:./Library/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1702:./Library/stm32f4xx_rtc.c **** 
1703:./Library/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1704:./Library/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1705:./Library/stm32f4xx_rtc.c **** 
1706:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1707:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1708:./Library/stm32f4xx_rtc.c **** }
1709:./Library/stm32f4xx_rtc.c **** 
1710:./Library/stm32f4xx_rtc.c **** /**
1711:./Library/stm32f4xx_rtc.c ****   * @}
1712:./Library/stm32f4xx_rtc.c ****   */
1713:./Library/stm32f4xx_rtc.c **** 
1714:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1715:./Library/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1716:./Library/stm32f4xx_rtc.c ****  *
1717:./Library/stm32f4xx_rtc.c **** @verbatim   
1718:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1719:./Library/stm32f4xx_rtc.c ****               ##### Digital Calibration configuration functions #####
1720:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1721:./Library/stm32f4xx_rtc.c **** 
1722:./Library/stm32f4xx_rtc.c **** @endverbatim
1723:./Library/stm32f4xx_rtc.c ****   * @{
1724:./Library/stm32f4xx_rtc.c ****   */
1725:./Library/stm32f4xx_rtc.c **** 
1726:./Library/stm32f4xx_rtc.c **** /**
1727:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1728:./Library/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1729:./Library/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1730:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1731:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1732:./Library/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1733:./Library/stm32f4xx_rtc.c ****   *    
1734:./Library/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1735:./Library/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1736:./Library/stm32f4xx_rtc.c ****   *           
1737:./Library/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1738:./Library/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1739:./Library/stm32f4xx_rtc.c ****   *           
1740:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
ARM GAS  /tmp/cccsESzb.s 			page 32


1741:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1742:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1743:./Library/stm32f4xx_rtc.c ****   */
1744:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1745:./Library/stm32f4xx_rtc.c **** {
1746:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1747:./Library/stm32f4xx_rtc.c ****    
1748:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1749:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1750:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1751:./Library/stm32f4xx_rtc.c **** 
1752:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1753:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1754:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1755:./Library/stm32f4xx_rtc.c **** 
1756:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1757:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1758:./Library/stm32f4xx_rtc.c ****   {
1759:./Library/stm32f4xx_rtc.c ****     status = ERROR;
1760:./Library/stm32f4xx_rtc.c ****   } 
1761:./Library/stm32f4xx_rtc.c ****   else
1762:./Library/stm32f4xx_rtc.c ****   {
1763:./Library/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1764:./Library/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1765:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1766:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1767:./Library/stm32f4xx_rtc.c ****     
1768:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
1769:./Library/stm32f4xx_rtc.c ****   } 
1770:./Library/stm32f4xx_rtc.c **** 
1771:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1772:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1773:./Library/stm32f4xx_rtc.c ****   
1774:./Library/stm32f4xx_rtc.c ****   return status;
1775:./Library/stm32f4xx_rtc.c **** }
1776:./Library/stm32f4xx_rtc.c **** 
1777:./Library/stm32f4xx_rtc.c **** /**
1778:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1779:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1780:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1781:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1782:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1783:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1784:./Library/stm32f4xx_rtc.c ****   */
1785:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1786:./Library/stm32f4xx_rtc.c **** {
1787:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1788:./Library/stm32f4xx_rtc.c ****   
1789:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1790:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1791:./Library/stm32f4xx_rtc.c **** 
1792:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1793:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1794:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1795:./Library/stm32f4xx_rtc.c ****   
1796:./Library/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1797:./Library/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
ARM GAS  /tmp/cccsESzb.s 			page 33


1798:./Library/stm32f4xx_rtc.c ****   {
1799:./Library/stm32f4xx_rtc.c ****     status =  ERROR;
1800:./Library/stm32f4xx_rtc.c ****   }
1801:./Library/stm32f4xx_rtc.c ****   else
1802:./Library/stm32f4xx_rtc.c ****   {
1803:./Library/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1804:./Library/stm32f4xx_rtc.c ****     {
1805:./Library/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1806:./Library/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1807:./Library/stm32f4xx_rtc.c ****     }
1808:./Library/stm32f4xx_rtc.c ****     else
1809:./Library/stm32f4xx_rtc.c ****     { 
1810:./Library/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1811:./Library/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1812:./Library/stm32f4xx_rtc.c ****     }
1813:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1814:./Library/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1815:./Library/stm32f4xx_rtc.c ****     
1816:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
1817:./Library/stm32f4xx_rtc.c ****   } 
1818:./Library/stm32f4xx_rtc.c ****   
1819:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1820:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1821:./Library/stm32f4xx_rtc.c ****   
1822:./Library/stm32f4xx_rtc.c ****   return status;
1823:./Library/stm32f4xx_rtc.c **** }
1824:./Library/stm32f4xx_rtc.c **** 
1825:./Library/stm32f4xx_rtc.c **** /**
1826:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1827:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1828:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1829:./Library/stm32f4xx_rtc.c ****   * @retval None
1830:./Library/stm32f4xx_rtc.c ****   */
1831:./Library/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1832:./Library/stm32f4xx_rtc.c **** {
1833:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1834:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1835:./Library/stm32f4xx_rtc.c ****   
1836:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1837:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1838:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1839:./Library/stm32f4xx_rtc.c ****   
1840:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1841:./Library/stm32f4xx_rtc.c ****   {
1842:./Library/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1843:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1844:./Library/stm32f4xx_rtc.c ****   }
1845:./Library/stm32f4xx_rtc.c ****   else
1846:./Library/stm32f4xx_rtc.c ****   { 
1847:./Library/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1848:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1849:./Library/stm32f4xx_rtc.c ****   }
1850:./Library/stm32f4xx_rtc.c ****   
1851:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1852:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1853:./Library/stm32f4xx_rtc.c **** }
1854:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 34


1855:./Library/stm32f4xx_rtc.c **** /**
1856:./Library/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1857:./Library/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1858:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1859:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1860:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1861:./Library/stm32f4xx_rtc.c ****   * @retval None
1862:./Library/stm32f4xx_rtc.c **** */
1863:./Library/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1864:./Library/stm32f4xx_rtc.c **** {
1865:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1866:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1867:./Library/stm32f4xx_rtc.c **** 
1868:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1869:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1870:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1871:./Library/stm32f4xx_rtc.c ****   
1872:./Library/stm32f4xx_rtc.c ****   /*clear flags before configuration */
1873:./Library/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1874:./Library/stm32f4xx_rtc.c **** 
1875:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1876:./Library/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1877:./Library/stm32f4xx_rtc.c **** 
1878:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1879:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1880:./Library/stm32f4xx_rtc.c **** }
1881:./Library/stm32f4xx_rtc.c **** 
1882:./Library/stm32f4xx_rtc.c **** /**
1883:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1884:./Library/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1885:./Library/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1886:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration period is 32s.
1887:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration period is 16s.
1888:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibration period is 8s.
1889:./Library/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1890:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1891:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK pulse every 2**11 pulses.
1892:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1893:./Library/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1894:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1895:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1896:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1897:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1898:./Library/stm32f4xx_rtc.c **** */
1899:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1900:./Library/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1901:./Library/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1902:./Library/stm32f4xx_rtc.c **** {
1903:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1904:./Library/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1905:./Library/stm32f4xx_rtc.c **** 
1906:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1907:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1908:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1909:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1910:./Library/stm32f4xx_rtc.c **** 
1911:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/cccsESzb.s 			page 35


1912:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1913:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1914:./Library/stm32f4xx_rtc.c ****   
1915:./Library/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1916:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1917:./Library/stm32f4xx_rtc.c ****   {
1918:./Library/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1919:./Library/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1920:./Library/stm32f4xx_rtc.c ****     {
1921:./Library/stm32f4xx_rtc.c ****       recalpfcount++;
1922:./Library/stm32f4xx_rtc.c ****     }
1923:./Library/stm32f4xx_rtc.c ****   }
1924:./Library/stm32f4xx_rtc.c **** 
1925:./Library/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1926:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1927:./Library/stm32f4xx_rtc.c ****   {
1928:./Library/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1929:./Library/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1930:./Library/stm32f4xx_rtc.c **** 
1931:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;
1932:./Library/stm32f4xx_rtc.c ****   }
1933:./Library/stm32f4xx_rtc.c ****   else
1934:./Library/stm32f4xx_rtc.c ****   {
1935:./Library/stm32f4xx_rtc.c ****     status = ERROR;
1936:./Library/stm32f4xx_rtc.c ****   }
1937:./Library/stm32f4xx_rtc.c **** 
1938:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1939:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1940:./Library/stm32f4xx_rtc.c ****   
1941:./Library/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1942:./Library/stm32f4xx_rtc.c **** }
1943:./Library/stm32f4xx_rtc.c **** 
1944:./Library/stm32f4xx_rtc.c **** /**
1945:./Library/stm32f4xx_rtc.c ****   * @}
1946:./Library/stm32f4xx_rtc.c ****   */
1947:./Library/stm32f4xx_rtc.c **** 
1948:./Library/stm32f4xx_rtc.c **** 
1949:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1950:./Library/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1951:./Library/stm32f4xx_rtc.c ****  *
1952:./Library/stm32f4xx_rtc.c **** @verbatim   
1953:./Library/stm32f4xx_rtc.c ****  ===============================================================================
1954:./Library/stm32f4xx_rtc.c ****                  ##### TimeStamp configuration functions #####
1955:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
1956:./Library/stm32f4xx_rtc.c **** 
1957:./Library/stm32f4xx_rtc.c **** @endverbatim
1958:./Library/stm32f4xx_rtc.c ****   * @{
1959:./Library/stm32f4xx_rtc.c ****   */
1960:./Library/stm32f4xx_rtc.c **** 
1961:./Library/stm32f4xx_rtc.c **** /**
1962:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1963:./Library/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1964:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1965:./Library/stm32f4xx_rtc.c ****   *         activated.
1966:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1967:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1968:./Library/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
ARM GAS  /tmp/cccsESzb.s 			page 36


1969:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1970:./Library/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1971:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1972:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1973:./Library/stm32f4xx_rtc.c ****   * @retval None
1974:./Library/stm32f4xx_rtc.c ****   */
1975:./Library/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1976:./Library/stm32f4xx_rtc.c **** {
1977:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1978:./Library/stm32f4xx_rtc.c **** 
1979:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
1980:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1981:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1982:./Library/stm32f4xx_rtc.c **** 
1983:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1984:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1985:./Library/stm32f4xx_rtc.c **** 
1986:./Library/stm32f4xx_rtc.c ****   /* Get the new configuration */
1987:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1988:./Library/stm32f4xx_rtc.c ****   {
1989:./Library/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1990:./Library/stm32f4xx_rtc.c ****   }
1991:./Library/stm32f4xx_rtc.c ****   else
1992:./Library/stm32f4xx_rtc.c ****   {
1993:./Library/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1994:./Library/stm32f4xx_rtc.c ****   }
1995:./Library/stm32f4xx_rtc.c **** 
1996:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1997:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1998:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1999:./Library/stm32f4xx_rtc.c **** 
2000:./Library/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2001:./Library/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
2002:./Library/stm32f4xx_rtc.c **** 
2003:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2004:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2005:./Library/stm32f4xx_rtc.c **** }
2006:./Library/stm32f4xx_rtc.c **** 
2007:./Library/stm32f4xx_rtc.c **** /**
2008:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
2009:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2010:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2011:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2012:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2013:./Library/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2014:./Library/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2015:./Library/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2016:./Library/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2017:./Library/stm32f4xx_rtc.c ****   * @retval None
2018:./Library/stm32f4xx_rtc.c ****   */
2019:./Library/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2020:./Library/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2021:./Library/stm32f4xx_rtc.c **** {
2022:./Library/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2023:./Library/stm32f4xx_rtc.c **** 
2024:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2025:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
ARM GAS  /tmp/cccsESzb.s 			page 37


2026:./Library/stm32f4xx_rtc.c **** 
2027:./Library/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2028:./Library/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2029:./Library/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2030:./Library/stm32f4xx_rtc.c **** 
2031:./Library/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2032:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2033:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2034:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2035:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2036:./Library/stm32f4xx_rtc.c **** 
2037:./Library/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2038:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2039:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2040:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2041:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2042:./Library/stm32f4xx_rtc.c **** 
2043:./Library/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2044:./Library/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2045:./Library/stm32f4xx_rtc.c ****   {
2046:./Library/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2047:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2048:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2049:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2050:./Library/stm32f4xx_rtc.c **** 
2051:./Library/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2052:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2053:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2054:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2055:./Library/stm32f4xx_rtc.c ****   }
2056:./Library/stm32f4xx_rtc.c **** }
2057:./Library/stm32f4xx_rtc.c **** 
2058:./Library/stm32f4xx_rtc.c **** /**
2059:./Library/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Sub seconds value.
2060:./Library/stm32f4xx_rtc.c ****   * @param  None
2061:./Library/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Sub seconds value.
2062:./Library/stm32f4xx_rtc.c ****   */
2063:./Library/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2064:./Library/stm32f4xx_rtc.c **** {
2065:./Library/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
2066:./Library/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2067:./Library/stm32f4xx_rtc.c **** }
2068:./Library/stm32f4xx_rtc.c **** 
2069:./Library/stm32f4xx_rtc.c **** /**
2070:./Library/stm32f4xx_rtc.c ****   * @}
2071:./Library/stm32f4xx_rtc.c ****   */
2072:./Library/stm32f4xx_rtc.c **** 
2073:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2074:./Library/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2075:./Library/stm32f4xx_rtc.c ****  *
2076:./Library/stm32f4xx_rtc.c **** @verbatim   
2077:./Library/stm32f4xx_rtc.c ****  ===============================================================================
2078:./Library/stm32f4xx_rtc.c ****                  ##### Tampers configuration functions #####
2079:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
2080:./Library/stm32f4xx_rtc.c **** 
2081:./Library/stm32f4xx_rtc.c **** @endverbatim
2082:./Library/stm32f4xx_rtc.c ****   * @{
ARM GAS  /tmp/cccsESzb.s 			page 38


2083:./Library/stm32f4xx_rtc.c ****   */
2084:./Library/stm32f4xx_rtc.c **** 
2085:./Library/stm32f4xx_rtc.c **** /**
2086:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2087:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2088:./Library/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper 2
2089:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2090:./Library/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2091:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2092:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2093:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2094:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2095:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2096:./Library/stm32f4xx_rtc.c ****   * @retval None
2097:./Library/stm32f4xx_rtc.c ****   */
2098:./Library/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2099:./Library/stm32f4xx_rtc.c **** {
2100:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2101:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2102:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2103:./Library/stm32f4xx_rtc.c ****  
2104:./Library/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2105:./Library/stm32f4xx_rtc.c ****   {  
2106:./Library/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2107:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2108:./Library/stm32f4xx_rtc.c ****   }
2109:./Library/stm32f4xx_rtc.c ****   else
2110:./Library/stm32f4xx_rtc.c ****   { 
2111:./Library/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2112:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2113:./Library/stm32f4xx_rtc.c ****   }  
2114:./Library/stm32f4xx_rtc.c **** }
2115:./Library/stm32f4xx_rtc.c **** 
2116:./Library/stm32f4xx_rtc.c **** /**
2117:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2118:./Library/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2119:./Library/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper_2
2120:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2121:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2122:./Library/stm32f4xx_rtc.c ****   * @retval None
2123:./Library/stm32f4xx_rtc.c ****   */
2124:./Library/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2125:./Library/stm32f4xx_rtc.c **** {
2126:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2127:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2128:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2129:./Library/stm32f4xx_rtc.c ****   
2130:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2131:./Library/stm32f4xx_rtc.c ****   {
2132:./Library/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2133:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2134:./Library/stm32f4xx_rtc.c ****   }
2135:./Library/stm32f4xx_rtc.c ****   else
2136:./Library/stm32f4xx_rtc.c ****   {
2137:./Library/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2138:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2139:./Library/stm32f4xx_rtc.c ****   }  
ARM GAS  /tmp/cccsESzb.s 			page 39


2140:./Library/stm32f4xx_rtc.c **** }
2141:./Library/stm32f4xx_rtc.c **** 
2142:./Library/stm32f4xx_rtc.c **** /**
2143:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2144:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2145:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2146:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2147:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2148:./Library/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2149:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2150:./Library/stm32f4xx_rtc.c ****   *                                    samples at the active level
2151:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2152:./Library/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2153:./Library/stm32f4xx_rtc.c ****   * @retval None
2154:./Library/stm32f4xx_rtc.c ****   */
2155:./Library/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2156:./Library/stm32f4xx_rtc.c **** {
2157:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2158:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2159:./Library/stm32f4xx_rtc.c ****    
2160:./Library/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2161:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2162:./Library/stm32f4xx_rtc.c **** 
2163:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2164:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2165:./Library/stm32f4xx_rtc.c **** }
2166:./Library/stm32f4xx_rtc.c **** 
2167:./Library/stm32f4xx_rtc.c **** /**
2168:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2169:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2170:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2171:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2172:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2173:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2174:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2175:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2176:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2177:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2178:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2179:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2180:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2181:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2182:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2183:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2184:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2185:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2186:./Library/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2187:./Library/stm32f4xx_rtc.c ****   * @retval None
2188:./Library/stm32f4xx_rtc.c ****   */
2189:./Library/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2190:./Library/stm32f4xx_rtc.c **** {
2191:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2192:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2193:./Library/stm32f4xx_rtc.c ****  
2194:./Library/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2195:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2196:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 40


2197:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2198:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2199:./Library/stm32f4xx_rtc.c **** }
2200:./Library/stm32f4xx_rtc.c **** 
2201:./Library/stm32f4xx_rtc.c **** /**
2202:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2203:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2204:./Library/stm32f4xx_rtc.c ****   *         Precharge Duration.
2205:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2206:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are precharged before sampling during
2207:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are precharged before sampling during
2208:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during
2209:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during
2210:./Library/stm32f4xx_rtc.c ****   * @retval None
2211:./Library/stm32f4xx_rtc.c ****   */
2212:./Library/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2213:./Library/stm32f4xx_rtc.c **** {
2214:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2216:./Library/stm32f4xx_rtc.c ****    
2217:./Library/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2218:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2219:./Library/stm32f4xx_rtc.c **** 
2220:./Library/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2221:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2222:./Library/stm32f4xx_rtc.c **** }
2223:./Library/stm32f4xx_rtc.c **** 
2224:./Library/stm32f4xx_rtc.c **** /**
2225:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2226:./Library/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2227:./Library/stm32f4xx_rtc.c ****   *         is reset.   
2228:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2229:./Library/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2230:./Library/stm32f4xx_rtc.c ****   * @retval None
2231:./Library/stm32f4xx_rtc.c ****   */
2232:./Library/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2233:./Library/stm32f4xx_rtc.c **** {
2234:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2235:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2236:./Library/stm32f4xx_rtc.c ****    
2237:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2238:./Library/stm32f4xx_rtc.c ****   {
2239:./Library/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2240:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2241:./Library/stm32f4xx_rtc.c ****   }
2242:./Library/stm32f4xx_rtc.c ****   else
2243:./Library/stm32f4xx_rtc.c ****   {
2244:./Library/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2245:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2246:./Library/stm32f4xx_rtc.c ****   }
2247:./Library/stm32f4xx_rtc.c **** }
2248:./Library/stm32f4xx_rtc.c **** 
2249:./Library/stm32f4xx_rtc.c **** /**
2250:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2251:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2252:./Library/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2253:./Library/stm32f4xx_rtc.c ****   * @retval None
ARM GAS  /tmp/cccsESzb.s 			page 41


2254:./Library/stm32f4xx_rtc.c ****   */
2255:./Library/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2256:./Library/stm32f4xx_rtc.c **** {
2257:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2258:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2259:./Library/stm32f4xx_rtc.c ****   
2260:./Library/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2261:./Library/stm32f4xx_rtc.c ****   {
2262:./Library/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2263:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2264:./Library/stm32f4xx_rtc.c ****   }
2265:./Library/stm32f4xx_rtc.c ****   else
2266:./Library/stm32f4xx_rtc.c ****   {
2267:./Library/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2268:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2269:./Library/stm32f4xx_rtc.c ****   } 
2270:./Library/stm32f4xx_rtc.c **** }
2271:./Library/stm32f4xx_rtc.c **** 
2272:./Library/stm32f4xx_rtc.c **** /**
2273:./Library/stm32f4xx_rtc.c ****   * @}
2274:./Library/stm32f4xx_rtc.c ****   */
2275:./Library/stm32f4xx_rtc.c **** 
2276:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2277:./Library/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2278:./Library/stm32f4xx_rtc.c ****  *
2279:./Library/stm32f4xx_rtc.c **** @verbatim   
2280:./Library/stm32f4xx_rtc.c ****  ===============================================================================
2281:./Library/stm32f4xx_rtc.c ****              ##### Backup Data Registers configuration functions ##### 
2282:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
2283:./Library/stm32f4xx_rtc.c **** 
2284:./Library/stm32f4xx_rtc.c **** @endverbatim
2285:./Library/stm32f4xx_rtc.c ****   * @{
2286:./Library/stm32f4xx_rtc.c ****   */
2287:./Library/stm32f4xx_rtc.c **** 
2288:./Library/stm32f4xx_rtc.c **** /**
2289:./Library/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2290:./Library/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2291:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2292:./Library/stm32f4xx_rtc.c ****   *                          specify the register.
2293:./Library/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2294:./Library/stm32f4xx_rtc.c ****   * @retval None
2295:./Library/stm32f4xx_rtc.c ****   */
2296:./Library/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2297:./Library/stm32f4xx_rtc.c **** {
2298:./Library/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2299:./Library/stm32f4xx_rtc.c ****   
2300:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2301:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2302:./Library/stm32f4xx_rtc.c **** 
2303:./Library/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2304:./Library/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2305:./Library/stm32f4xx_rtc.c **** 
2306:./Library/stm32f4xx_rtc.c ****   /* Write the specified register */
2307:./Library/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2308:./Library/stm32f4xx_rtc.c **** }
2309:./Library/stm32f4xx_rtc.c **** 
2310:./Library/stm32f4xx_rtc.c **** /**
ARM GAS  /tmp/cccsESzb.s 			page 42


2311:./Library/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2312:./Library/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2313:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2314:./Library/stm32f4xx_rtc.c ****   *                          specify the register.                   
2315:./Library/stm32f4xx_rtc.c ****   * @retval None
2316:./Library/stm32f4xx_rtc.c ****   */
2317:./Library/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2318:./Library/stm32f4xx_rtc.c **** {
2319:./Library/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2320:./Library/stm32f4xx_rtc.c ****   
2321:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2322:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2323:./Library/stm32f4xx_rtc.c **** 
2324:./Library/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2325:./Library/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2326:./Library/stm32f4xx_rtc.c ****   
2327:./Library/stm32f4xx_rtc.c ****   /* Read the specified register */
2328:./Library/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2329:./Library/stm32f4xx_rtc.c **** }
2330:./Library/stm32f4xx_rtc.c **** 
2331:./Library/stm32f4xx_rtc.c **** /**
2332:./Library/stm32f4xx_rtc.c ****   * @}
2333:./Library/stm32f4xx_rtc.c ****   */
2334:./Library/stm32f4xx_rtc.c **** 
2335:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2336:./Library/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2337:./Library/stm32f4xx_rtc.c ****  *           configuration functions  
2338:./Library/stm32f4xx_rtc.c ****  *
2339:./Library/stm32f4xx_rtc.c **** @verbatim   
2340:./Library/stm32f4xx_rtc.c ****  ==================================================================================================
2341:./Library/stm32f4xx_rtc.c ****  ##### RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration functions #####
2342:./Library/stm32f4xx_rtc.c ****  ==================================================================================================
2343:./Library/stm32f4xx_rtc.c **** 
2344:./Library/stm32f4xx_rtc.c **** @endverbatim
2345:./Library/stm32f4xx_rtc.c ****   * @{
2346:./Library/stm32f4xx_rtc.c ****   */
2347:./Library/stm32f4xx_rtc.c **** 
2348:./Library/stm32f4xx_rtc.c **** /**
2349:./Library/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2350:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2351:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2352:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Default: RTC_AF1 is used as RTC Tamper Pin.
2353:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Pos1: RTC_AF2 is selected as RTC Tamper Pin.    
2354:./Library/stm32f4xx_rtc.c ****   * @retval None
2355:./Library/stm32f4xx_rtc.c ****   */
2356:./Library/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2357:./Library/stm32f4xx_rtc.c **** {
2358:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2359:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2360:./Library/stm32f4xx_rtc.c ****   
2361:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2362:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2363:./Library/stm32f4xx_rtc.c **** }
2364:./Library/stm32f4xx_rtc.c **** 
2365:./Library/stm32f4xx_rtc.c **** /**
2366:./Library/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2367:./Library/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
ARM GAS  /tmp/cccsESzb.s 			page 43


2368:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2369:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2370:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2371:./Library/stm32f4xx_rtc.c ****   * @retval None
2372:./Library/stm32f4xx_rtc.c ****   */
2373:./Library/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2374:./Library/stm32f4xx_rtc.c **** {
2375:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2377:./Library/stm32f4xx_rtc.c ****   
2378:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2379:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2380:./Library/stm32f4xx_rtc.c **** }
2381:./Library/stm32f4xx_rtc.c **** 
2382:./Library/stm32f4xx_rtc.c **** /**
2383:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2384:./Library/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2385:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2386:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2387:./Library/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2388:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2389:./Library/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2390:./Library/stm32f4xx_rtc.c ****   * @retval None
2391:./Library/stm32f4xx_rtc.c ****   */
2392:./Library/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2393:./Library/stm32f4xx_rtc.c **** {
2394:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2395:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2396:./Library/stm32f4xx_rtc.c ****   
2397:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2398:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2399:./Library/stm32f4xx_rtc.c **** }
2400:./Library/stm32f4xx_rtc.c **** 
2401:./Library/stm32f4xx_rtc.c **** /**
2402:./Library/stm32f4xx_rtc.c ****   * @}
2403:./Library/stm32f4xx_rtc.c ****   */
2404:./Library/stm32f4xx_rtc.c **** 
2405:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2406:./Library/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2407:./Library/stm32f4xx_rtc.c ****  *
2408:./Library/stm32f4xx_rtc.c **** @verbatim   
2409:./Library/stm32f4xx_rtc.c ****  ===============================================================================
2410:./Library/stm32f4xx_rtc.c ****               ##### Shift control synchronisation functions #####
2411:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
2412:./Library/stm32f4xx_rtc.c **** 
2413:./Library/stm32f4xx_rtc.c **** @endverbatim
2414:./Library/stm32f4xx_rtc.c ****   * @{
2415:./Library/stm32f4xx_rtc.c ****   */
2416:./Library/stm32f4xx_rtc.c **** 
2417:./Library/stm32f4xx_rtc.c **** /**
2418:./Library/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2419:./Library/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2420:./Library/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2421:./Library/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2422:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2423:./Library/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2424:./Library/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
ARM GAS  /tmp/cccsESzb.s 			page 44


2425:./Library/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2426:./Library/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2427:./Library/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2428:./Library/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2429:./Library/stm32f4xx_rtc.c **** */
2430:./Library/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2431:./Library/stm32f4xx_rtc.c **** {
2432:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2433:./Library/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2434:./Library/stm32f4xx_rtc.c **** 
2435:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2436:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2437:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2438:./Library/stm32f4xx_rtc.c **** 
2439:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2440:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2441:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2442:./Library/stm32f4xx_rtc.c ****   
2443:./Library/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2444:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2445:./Library/stm32f4xx_rtc.c ****   {
2446:./Library/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2447:./Library/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2448:./Library/stm32f4xx_rtc.c ****     {
2449:./Library/stm32f4xx_rtc.c ****       shpfcount++;
2450:./Library/stm32f4xx_rtc.c ****     }
2451:./Library/stm32f4xx_rtc.c ****   }
2452:./Library/stm32f4xx_rtc.c **** 
2453:./Library/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2454:./Library/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2455:./Library/stm32f4xx_rtc.c ****   {
2456:./Library/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2457:./Library/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2458:./Library/stm32f4xx_rtc.c ****     {
2459:./Library/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2460:./Library/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2461:./Library/stm32f4xx_rtc.c ****     
2462:./Library/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2463:./Library/stm32f4xx_rtc.c ****       {
2464:./Library/stm32f4xx_rtc.c ****         status = ERROR;
2465:./Library/stm32f4xx_rtc.c ****       }
2466:./Library/stm32f4xx_rtc.c ****       else
2467:./Library/stm32f4xx_rtc.c ****       {
2468:./Library/stm32f4xx_rtc.c ****         status = SUCCESS;
2469:./Library/stm32f4xx_rtc.c ****       }
2470:./Library/stm32f4xx_rtc.c ****     }
2471:./Library/stm32f4xx_rtc.c ****     else
2472:./Library/stm32f4xx_rtc.c ****     {
2473:./Library/stm32f4xx_rtc.c ****       status = ERROR;
2474:./Library/stm32f4xx_rtc.c ****     }
2475:./Library/stm32f4xx_rtc.c ****   }
2476:./Library/stm32f4xx_rtc.c ****   else
2477:./Library/stm32f4xx_rtc.c ****   {
2478:./Library/stm32f4xx_rtc.c ****     status = ERROR;
2479:./Library/stm32f4xx_rtc.c ****   }
2480:./Library/stm32f4xx_rtc.c **** 
2481:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
ARM GAS  /tmp/cccsESzb.s 			page 45


2482:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2483:./Library/stm32f4xx_rtc.c ****   
2484:./Library/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2485:./Library/stm32f4xx_rtc.c **** }
2486:./Library/stm32f4xx_rtc.c **** 
2487:./Library/stm32f4xx_rtc.c **** /**
2488:./Library/stm32f4xx_rtc.c ****   * @}
2489:./Library/stm32f4xx_rtc.c ****   */
2490:./Library/stm32f4xx_rtc.c **** 
2491:./Library/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2492:./Library/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2493:./Library/stm32f4xx_rtc.c ****  *
2494:./Library/stm32f4xx_rtc.c **** @verbatim   
2495:./Library/stm32f4xx_rtc.c ****  ===============================================================================
2496:./Library/stm32f4xx_rtc.c ****               ##### Interrupts and flags management functions #####
2497:./Library/stm32f4xx_rtc.c ****  ===============================================================================  
2498:./Library/stm32f4xx_rtc.c ****  [..] All RTC interrupts are connected to the EXTI controller.
2499:./Library/stm32f4xx_rtc.c ****  
2500:./Library/stm32f4xx_rtc.c ****    (+) To enable the RTC Alarm interrupt, the following sequence is required:
2501:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2502:./Library/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2503:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the 
2504:./Library/stm32f4xx_rtc.c ****             NVIC_Init() function.
2505:./Library/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2506:./Library/stm32f4xx_rtc.c ****             the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2507:./Library/stm32f4xx_rtc.c **** 
2508:./Library/stm32f4xx_rtc.c ****    (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2509:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 22 in interrupt mode and select the
2510:./Library/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2511:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using the 
2512:./Library/stm32f4xx_rtc.c ****             NVIC_Init() function.
2513:./Library/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate the RTC wakeup timer event using the 
2514:./Library/stm32f4xx_rtc.c ****             RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2515:./Library/stm32f4xx_rtc.c ****             functions.
2516:./Library/stm32f4xx_rtc.c **** 
2517:./Library/stm32f4xx_rtc.c ****    (+) To enable the RTC Tamper interrupt, the following sequence is required:
2518:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select 
2519:./Library/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2520:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the
2521:./Library/stm32f4xx_rtc.c ****             NVIC_Init() function.
2522:./Library/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC tamper event using the 
2523:./Library/stm32f4xx_rtc.c ****             RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2524:./Library/stm32f4xx_rtc.c **** 
2525:./Library/stm32f4xx_rtc.c ****    (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2526:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select the
2527:./Library/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2528:./Library/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the 
2529:./Library/stm32f4xx_rtc.c ****             NVIC_Init() function.
2530:./Library/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC time stamp event using the 
2531:./Library/stm32f4xx_rtc.c ****             RTC_TimeStampCmd() functions.
2532:./Library/stm32f4xx_rtc.c **** 
2533:./Library/stm32f4xx_rtc.c **** @endverbatim
2534:./Library/stm32f4xx_rtc.c ****   * @{
2535:./Library/stm32f4xx_rtc.c ****   */
2536:./Library/stm32f4xx_rtc.c **** 
2537:./Library/stm32f4xx_rtc.c **** /**
2538:./Library/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
ARM GAS  /tmp/cccsESzb.s 			page 46


2539:./Library/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2540:./Library/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2541:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2542:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2543:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2544:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2545:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2546:./Library/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2547:./Library/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2548:./Library/stm32f4xx_rtc.c ****   * @retval None
2549:./Library/stm32f4xx_rtc.c ****   */
2550:./Library/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2551:./Library/stm32f4xx_rtc.c **** {
2552:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2553:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2554:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2555:./Library/stm32f4xx_rtc.c **** 
2556:./Library/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2557:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2558:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2559:./Library/stm32f4xx_rtc.c **** 
2560:./Library/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2561:./Library/stm32f4xx_rtc.c ****   {
2562:./Library/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2563:./Library/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2564:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2565:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2566:./Library/stm32f4xx_rtc.c ****   }
2567:./Library/stm32f4xx_rtc.c ****   else
2568:./Library/stm32f4xx_rtc.c ****   {
2569:./Library/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2570:./Library/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2571:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2572:./Library/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2573:./Library/stm32f4xx_rtc.c ****   }
2574:./Library/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2575:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2576:./Library/stm32f4xx_rtc.c **** }
2577:./Library/stm32f4xx_rtc.c **** 
2578:./Library/stm32f4xx_rtc.c **** /**
2579:./Library/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2580:./Library/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2581:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2582:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2583:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2584:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2585:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2586:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2587:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2588:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2589:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2590:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2591:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2592:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2593:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2594:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2595:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
ARM GAS  /tmp/cccsESzb.s 			page 47


2596:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2597:./Library/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2598:./Library/stm32f4xx_rtc.c ****   */
2599:./Library/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2600:./Library/stm32f4xx_rtc.c **** {
2601:./Library/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2602:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2603:./Library/stm32f4xx_rtc.c ****   
2604:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2605:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2606:./Library/stm32f4xx_rtc.c ****   
2607:./Library/stm32f4xx_rtc.c ****   /* Get all the flags */
2608:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2609:./Library/stm32f4xx_rtc.c ****   
2610:./Library/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2611:./Library/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2612:./Library/stm32f4xx_rtc.c ****   {
2613:./Library/stm32f4xx_rtc.c ****     bitstatus = SET;
2614:./Library/stm32f4xx_rtc.c ****   }
2615:./Library/stm32f4xx_rtc.c ****   else
2616:./Library/stm32f4xx_rtc.c ****   {
2617:./Library/stm32f4xx_rtc.c ****     bitstatus = RESET;
2618:./Library/stm32f4xx_rtc.c ****   }
2619:./Library/stm32f4xx_rtc.c ****   return bitstatus;
2620:./Library/stm32f4xx_rtc.c **** }
2621:./Library/stm32f4xx_rtc.c **** 
2622:./Library/stm32f4xx_rtc.c **** /**
2623:./Library/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2624:./Library/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2625:./Library/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2626:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2627:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2628:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2629:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2630:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2631:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2632:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2633:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2634:./Library/stm32f4xx_rtc.c ****   * @retval None
2635:./Library/stm32f4xx_rtc.c ****   */
2636:./Library/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2637:./Library/stm32f4xx_rtc.c **** {
2638:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2640:./Library/stm32f4xx_rtc.c **** 
2641:./Library/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2642:./Library/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2643:./Library/stm32f4xx_rtc.c **** }
2644:./Library/stm32f4xx_rtc.c **** 
2645:./Library/stm32f4xx_rtc.c **** /**
2646:./Library/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2647:./Library/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2648:./Library/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2649:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2650:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2651:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2652:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
ARM GAS  /tmp/cccsESzb.s 			page 48


2653:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2654:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt
2655:./Library/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2656:./Library/stm32f4xx_rtc.c ****   */
2657:./Library/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2658:./Library/stm32f4xx_rtc.c **** {
2659:./Library/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2660:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2661:./Library/stm32f4xx_rtc.c ****  
2662:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2663:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2664:./Library/stm32f4xx_rtc.c ****   
2665:./Library/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2666:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2667:./Library/stm32f4xx_rtc.c ****  
2668:./Library/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2669:./Library/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 1
2670:./Library/stm32f4xx_rtc.c ****   
2671:./Library/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2672:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2673:./Library/stm32f4xx_rtc.c ****   
2674:./Library/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2675:./Library/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2676:./Library/stm32f4xx_rtc.c ****   {
2677:./Library/stm32f4xx_rtc.c ****     bitstatus = SET;
2678:./Library/stm32f4xx_rtc.c ****   }
2679:./Library/stm32f4xx_rtc.c ****   else
2680:./Library/stm32f4xx_rtc.c ****   {
2681:./Library/stm32f4xx_rtc.c ****     bitstatus = RESET;
2682:./Library/stm32f4xx_rtc.c ****   }
2683:./Library/stm32f4xx_rtc.c ****   return bitstatus;
2684:./Library/stm32f4xx_rtc.c **** }
2685:./Library/stm32f4xx_rtc.c **** 
2686:./Library/stm32f4xx_rtc.c **** /**
2687:./Library/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2688:./Library/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2689:./Library/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2690:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2691:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2692:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2693:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2694:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2695:./Library/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt 
2696:./Library/stm32f4xx_rtc.c ****   * @retval None
2697:./Library/stm32f4xx_rtc.c ****   */
2698:./Library/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2699:./Library/stm32f4xx_rtc.c **** {
2700:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2701:./Library/stm32f4xx_rtc.c **** 
2702:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
2703:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2704:./Library/stm32f4xx_rtc.c **** 
2705:./Library/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2706:./Library/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2707:./Library/stm32f4xx_rtc.c **** 
2708:./Library/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2709:./Library/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
ARM GAS  /tmp/cccsESzb.s 			page 49


2710:./Library/stm32f4xx_rtc.c **** }
2711:./Library/stm32f4xx_rtc.c **** 
2712:./Library/stm32f4xx_rtc.c **** /**
2713:./Library/stm32f4xx_rtc.c ****   * @}
2714:./Library/stm32f4xx_rtc.c ****   */
2715:./Library/stm32f4xx_rtc.c **** 
2716:./Library/stm32f4xx_rtc.c **** /**
2717:./Library/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2718:./Library/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2719:./Library/stm32f4xx_rtc.c ****   * @retval Converted byte
2720:./Library/stm32f4xx_rtc.c ****   */
2721:./Library/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2722:./Library/stm32f4xx_rtc.c **** {
  29              		.loc 1 2722 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
2723:./Library/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  34              		.loc 1 2723 3 view .LVU1
2724:./Library/stm32f4xx_rtc.c ****   
2725:./Library/stm32f4xx_rtc.c ****   while (Value >= 10)
  35              		.loc 1 2725 3 view .LVU2
2723:./Library/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  36              		.loc 1 2723 11 is_stmt 0 view .LVU3
  37 0000 0023     		movs	r3, #0
  38              		.loc 1 2725 9 view .LVU4
  39 0002 03E0     		b	.L2
  40              	.LVL1:
  41              	.L3:
2726:./Library/stm32f4xx_rtc.c ****   {
2727:./Library/stm32f4xx_rtc.c ****     bcdhigh++;
  42              		.loc 1 2727 5 is_stmt 1 view .LVU5
  43              		.loc 1 2727 12 is_stmt 0 view .LVU6
  44 0004 0133     		adds	r3, r3, #1
  45              	.LVL2:
  46              		.loc 1 2727 12 view .LVU7
  47 0006 DBB2     		uxtb	r3, r3
  48              	.LVL3:
2728:./Library/stm32f4xx_rtc.c ****     Value -= 10;
  49              		.loc 1 2728 5 is_stmt 1 view .LVU8
  50              		.loc 1 2728 11 is_stmt 0 view .LVU9
  51 0008 0A38     		subs	r0, r0, #10
  52              	.LVL4:
  53              		.loc 1 2728 11 view .LVU10
  54 000a C0B2     		uxtb	r0, r0
  55              	.LVL5:
  56              	.L2:
2725:./Library/stm32f4xx_rtc.c ****   {
  57              		.loc 1 2725 16 is_stmt 1 view .LVU11
  58 000c 0928     		cmp	r0, #9
  59 000e F9D8     		bhi	.L3
2729:./Library/stm32f4xx_rtc.c ****   }
2730:./Library/stm32f4xx_rtc.c ****   
2731:./Library/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  60              		.loc 1 2731 3 view .LVU12
  61              		.loc 1 2731 12 is_stmt 0 view .LVU13
ARM GAS  /tmp/cccsESzb.s 			page 50


  62 0010 1B01     		lsls	r3, r3, #4
  63              	.LVL6:
  64              		.loc 1 2731 12 view .LVU14
  65 0012 DBB2     		uxtb	r3, r3
2732:./Library/stm32f4xx_rtc.c **** }
  66              		.loc 1 2732 1 view .LVU15
  67 0014 1843     		orrs	r0, r0, r3
  68              	.LVL7:
  69              		.loc 1 2732 1 view .LVU16
  70 0016 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE178:
  74              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  75              		.align	1
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  80              	RTC_Bcd2ToByte:
  81              	.LVL8:
  82              	.LFB179:
2733:./Library/stm32f4xx_rtc.c **** 
2734:./Library/stm32f4xx_rtc.c **** /**
2735:./Library/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2736:./Library/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2737:./Library/stm32f4xx_rtc.c ****   * @retval Converted word
2738:./Library/stm32f4xx_rtc.c ****   */
2739:./Library/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2740:./Library/stm32f4xx_rtc.c **** {
  83              		.loc 1 2740 1 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		@ link register save eliminated.
2741:./Library/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
  88              		.loc 1 2741 3 view .LVU18
2742:./Library/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  89              		.loc 1 2742 3 view .LVU19
  90              		.loc 1 2742 43 is_stmt 0 view .LVU20
  91 0000 0309     		lsrs	r3, r0, #4
  92              		.loc 1 2742 7 view .LVU21
  93 0002 03EB8303 		add	r3, r3, r3, lsl #2
  94              	.LVL9:
2743:./Library/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  95              		.loc 1 2743 3 is_stmt 1 view .LVU22
  96              		.loc 1 2743 24 is_stmt 0 view .LVU23
  97 0006 00F00F00 		and	r0, r0, #15
  98              	.LVL10:
  99              		.loc 1 2743 15 view .LVU24
 100 000a 00EB4300 		add	r0, r0, r3, lsl #1
2744:./Library/stm32f4xx_rtc.c **** }
 101              		.loc 1 2744 1 view .LVU25
 102 000e C0B2     		uxtb	r0, r0
 103 0010 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE179:
 107              		.section	.text.RTC_StructInit,"ax",%progbits
 108              		.align	1
ARM GAS  /tmp/cccsESzb.s 			page 51


 109              		.global	RTC_StructInit
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 114              	RTC_StructInit:
 115              	.LVL11:
 116              	.LFB125:
 497:./Library/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 117              		.loc 1 497 1 is_stmt 1 view -0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 499:./Library/stm32f4xx_rtc.c ****     
 122              		.loc 1 499 3 view .LVU27
 499:./Library/stm32f4xx_rtc.c ****     
 123              		.loc 1 499 34 is_stmt 0 view .LVU28
 124 0000 0023     		movs	r3, #0
 125 0002 0360     		str	r3, [r0]
 502:./Library/stm32f4xx_rtc.c **** 
 126              		.loc 1 502 3 is_stmt 1 view .LVU29
 502:./Library/stm32f4xx_rtc.c **** 
 127              		.loc 1 502 36 is_stmt 0 view .LVU30
 128 0004 7F23     		movs	r3, #127
 129 0006 4360     		str	r3, [r0, #4]
 505:./Library/stm32f4xx_rtc.c **** }
 130              		.loc 1 505 3 is_stmt 1 view .LVU31
 505:./Library/stm32f4xx_rtc.c **** }
 131              		.loc 1 505 35 is_stmt 0 view .LVU32
 132 0008 FF23     		movs	r3, #255
 133 000a 8360     		str	r3, [r0, #8]
 506:./Library/stm32f4xx_rtc.c **** 
 134              		.loc 1 506 1 view .LVU33
 135 000c 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE125:
 139              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 140              		.align	1
 141              		.global	RTC_WriteProtectionCmd
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 146              	RTC_WriteProtectionCmd:
 147              	.LVL12:
 148              	.LFB126:
 519:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 149              		.loc 1 519 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 521:./Library/stm32f4xx_rtc.c ****     
 154              		.loc 1 521 3 view .LVU35
 523:./Library/stm32f4xx_rtc.c ****   {
 155              		.loc 1 523 3 view .LVU36
 523:./Library/stm32f4xx_rtc.c ****   {
 156              		.loc 1 523 6 is_stmt 0 view .LVU37
ARM GAS  /tmp/cccsESzb.s 			page 52


 157 0000 18B1     		cbz	r0, .L7
 526:./Library/stm32f4xx_rtc.c ****   }
 158              		.loc 1 526 5 is_stmt 1 view .LVU38
 526:./Library/stm32f4xx_rtc.c ****   }
 159              		.loc 1 526 14 is_stmt 0 view .LVU39
 160 0002 054B     		ldr	r3, .L9
 161 0004 FF22     		movs	r2, #255
 162 0006 5A62     		str	r2, [r3, #36]
 163 0008 7047     		bx	lr
 164              	.L7:
 531:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 165              		.loc 1 531 5 is_stmt 1 view .LVU40
 531:./Library/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 166              		.loc 1 531 14 is_stmt 0 view .LVU41
 167 000a 034B     		ldr	r3, .L9
 168 000c CA22     		movs	r2, #202
 169 000e 5A62     		str	r2, [r3, #36]
 532:./Library/stm32f4xx_rtc.c ****   }
 170              		.loc 1 532 5 is_stmt 1 view .LVU42
 532:./Library/stm32f4xx_rtc.c ****   }
 171              		.loc 1 532 14 is_stmt 0 view .LVU43
 172 0010 5322     		movs	r2, #83
 173 0012 5A62     		str	r2, [r3, #36]
 534:./Library/stm32f4xx_rtc.c **** 
 174              		.loc 1 534 1 view .LVU44
 175 0014 7047     		bx	lr
 176              	.L10:
 177 0016 00BF     		.align	2
 178              	.L9:
 179 0018 00280040 		.word	1073752064
 180              		.cfi_endproc
 181              	.LFE126:
 183              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 184              		.align	1
 185              		.global	RTC_EnterInitMode
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 190              	RTC_EnterInitMode:
 191              	.LFB127:
 546:./Library/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 192              		.loc 1 546 1 is_stmt 1 view -0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 8
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197 0000 82B0     		sub	sp, sp, #8
 198              	.LCFI0:
 199              		.cfi_def_cfa_offset 8
 547:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 200              		.loc 1 547 3 view .LVU46
 547:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 201              		.loc 1 547 17 is_stmt 0 view .LVU47
 202 0002 0023     		movs	r3, #0
 203 0004 0193     		str	r3, [sp, #4]
 548:./Library/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 204              		.loc 1 548 3 is_stmt 1 view .LVU48
ARM GAS  /tmp/cccsESzb.s 			page 53


 205              	.LVL13:
 549:./Library/stm32f4xx_rtc.c ****      
 206              		.loc 1 549 3 view .LVU49
 552:./Library/stm32f4xx_rtc.c ****   {
 207              		.loc 1 552 3 view .LVU50
 552:./Library/stm32f4xx_rtc.c ****   {
 208              		.loc 1 552 11 is_stmt 0 view .LVU51
 209 0006 114B     		ldr	r3, .L18
 210 0008 DB68     		ldr	r3, [r3, #12]
 552:./Library/stm32f4xx_rtc.c ****   {
 211              		.loc 1 552 6 view .LVU52
 212 000a 13F0400F 		tst	r3, #64
 213 000e 17D1     		bne	.L15
 555:./Library/stm32f4xx_rtc.c ****     
 214              		.loc 1 555 5 is_stmt 1 view .LVU53
 555:./Library/stm32f4xx_rtc.c ****     
 215              		.loc 1 555 14 is_stmt 0 view .LVU54
 216 0010 0E4B     		ldr	r3, .L18
 217 0012 4FF0FF32 		mov	r2, #-1
 218 0016 DA60     		str	r2, [r3, #12]
 219              	.LVL14:
 220              	.L14:
 558:./Library/stm32f4xx_rtc.c ****     {
 221              		.loc 1 558 5 is_stmt 1 discriminator 2 view .LVU55
 560:./Library/stm32f4xx_rtc.c ****       initcounter++;  
 222              		.loc 1 560 7 discriminator 2 view .LVU56
 560:./Library/stm32f4xx_rtc.c ****       initcounter++;  
 223              		.loc 1 560 23 is_stmt 0 discriminator 2 view .LVU57
 224 0018 0C4B     		ldr	r3, .L18
 225 001a DA68     		ldr	r2, [r3, #12]
 560:./Library/stm32f4xx_rtc.c ****       initcounter++;  
 226              		.loc 1 560 18 discriminator 2 view .LVU58
 227 001c 02F04002 		and	r2, r2, #64
 228              	.LVL15:
 561:./Library/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 229              		.loc 1 561 7 is_stmt 1 discriminator 2 view .LVU59
 561:./Library/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 230              		.loc 1 561 18 is_stmt 0 discriminator 2 view .LVU60
 231 0020 019B     		ldr	r3, [sp, #4]
 232 0022 0133     		adds	r3, r3, #1
 233 0024 0193     		str	r3, [sp, #4]
 562:./Library/stm32f4xx_rtc.c ****     
 234              		.loc 1 562 47 is_stmt 1 discriminator 2 view .LVU61
 562:./Library/stm32f4xx_rtc.c ****     
 235              		.loc 1 562 26 is_stmt 0 discriminator 2 view .LVU62
 236 0026 019B     		ldr	r3, [sp, #4]
 562:./Library/stm32f4xx_rtc.c ****     
 237              		.loc 1 562 47 discriminator 2 view .LVU63
 238 0028 B3F5803F 		cmp	r3, #65536
 239 002c 01D0     		beq	.L13
 562:./Library/stm32f4xx_rtc.c ****     
 240              		.loc 1 562 47 discriminator 1 view .LVU64
 241 002e 002A     		cmp	r2, #0
 242 0030 F2D0     		beq	.L14
 243              	.L13:
 564:./Library/stm32f4xx_rtc.c ****     {
 244              		.loc 1 564 5 is_stmt 1 view .LVU65
ARM GAS  /tmp/cccsESzb.s 			page 54


 564:./Library/stm32f4xx_rtc.c ****     {
 245              		.loc 1 564 13 is_stmt 0 view .LVU66
 246 0032 064B     		ldr	r3, .L18
 247 0034 DB68     		ldr	r3, [r3, #12]
 564:./Library/stm32f4xx_rtc.c ****     {
 248              		.loc 1 564 8 view .LVU67
 249 0036 13F0400F 		tst	r3, #64
 250 003a 04D0     		beq	.L16
 566:./Library/stm32f4xx_rtc.c ****     }
 251              		.loc 1 566 14 view .LVU68
 252 003c 0120     		movs	r0, #1
 253 003e 00E0     		b	.L12
 254              	.LVL16:
 255              	.L15:
 575:./Library/stm32f4xx_rtc.c ****   } 
 256              		.loc 1 575 12 view .LVU69
 257 0040 0120     		movs	r0, #1
 258              	.LVL17:
 259              	.L12:
 578:./Library/stm32f4xx_rtc.c **** }
 260              		.loc 1 578 3 is_stmt 1 view .LVU70
 579:./Library/stm32f4xx_rtc.c **** 
 261              		.loc 1 579 1 is_stmt 0 view .LVU71
 262 0042 02B0     		add	sp, sp, #8
 263              	.LCFI1:
 264              		.cfi_remember_state
 265              		.cfi_def_cfa_offset 0
 266              		@ sp needed
 267 0044 7047     		bx	lr
 268              	.LVL18:
 269              	.L16:
 270              	.LCFI2:
 271              		.cfi_restore_state
 570:./Library/stm32f4xx_rtc.c ****     }        
 272              		.loc 1 570 14 view .LVU72
 273 0046 0020     		movs	r0, #0
 274 0048 FBE7     		b	.L12
 275              	.L19:
 276 004a 00BF     		.align	2
 277              	.L18:
 278 004c 00280040 		.word	1073752064
 279              		.cfi_endproc
 280              	.LFE127:
 282              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 283              		.align	1
 284              		.global	RTC_ExitInitMode
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	RTC_ExitInitMode:
 290              	.LFB128:
 591:./Library/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 291              		.loc 1 591 1 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
ARM GAS  /tmp/cccsESzb.s 			page 55


 593:./Library/stm32f4xx_rtc.c **** }
 296              		.loc 1 593 3 view .LVU74
 593:./Library/stm32f4xx_rtc.c **** }
 297              		.loc 1 593 6 is_stmt 0 view .LVU75
 298 0000 024A     		ldr	r2, .L21
 299 0002 D368     		ldr	r3, [r2, #12]
 593:./Library/stm32f4xx_rtc.c **** }
 300              		.loc 1 593 12 view .LVU76
 301 0004 23F08003 		bic	r3, r3, #128
 302 0008 D360     		str	r3, [r2, #12]
 594:./Library/stm32f4xx_rtc.c **** 
 303              		.loc 1 594 1 view .LVU77
 304 000a 7047     		bx	lr
 305              	.L22:
 306              		.align	2
 307              	.L21:
 308 000c 00280040 		.word	1073752064
 309              		.cfi_endproc
 310              	.LFE128:
 312              		.section	.text.RTC_Init,"ax",%progbits
 313              		.align	1
 314              		.global	RTC_Init
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 319              	RTC_Init:
 320              	.LVL19:
 321              	.LFB124:
 451:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 322              		.loc 1 451 1 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 451:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 326              		.loc 1 451 1 is_stmt 0 view .LVU79
 327 0000 10B5     		push	{r4, lr}
 328              	.LCFI3:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 4, -8
 331              		.cfi_offset 14, -4
 332 0002 0446     		mov	r4, r0
 452:./Library/stm32f4xx_rtc.c ****   
 333              		.loc 1 452 3 is_stmt 1 view .LVU80
 334              	.LVL20:
 455:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 335              		.loc 1 455 3 view .LVU81
 456:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 336              		.loc 1 456 3 view .LVU82
 457:./Library/stm32f4xx_rtc.c **** 
 337              		.loc 1 457 3 view .LVU83
 460:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 338              		.loc 1 460 3 view .LVU84
 460:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 339              		.loc 1 460 12 is_stmt 0 view .LVU85
 340 0004 0F4B     		ldr	r3, .L27
 341 0006 CA22     		movs	r2, #202
 342 0008 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/cccsESzb.s 			page 56


 461:./Library/stm32f4xx_rtc.c **** 
 343              		.loc 1 461 3 is_stmt 1 view .LVU86
 461:./Library/stm32f4xx_rtc.c **** 
 344              		.loc 1 461 12 is_stmt 0 view .LVU87
 345 000a 5322     		movs	r2, #83
 346 000c 5A62     		str	r2, [r3, #36]
 464:./Library/stm32f4xx_rtc.c ****   {
 347              		.loc 1 464 3 is_stmt 1 view .LVU88
 464:./Library/stm32f4xx_rtc.c ****   {
 348              		.loc 1 464 7 is_stmt 0 view .LVU89
 349 000e FFF7FEFF 		bl	RTC_EnterInitMode
 350              	.LVL21:
 464:./Library/stm32f4xx_rtc.c ****   {
 351              		.loc 1 464 6 view .LVU90
 352 0012 18B9     		cbnz	r0, .L26
 353              	.LVL22:
 354              	.L24:
 485:./Library/stm32f4xx_rtc.c ****   
 355              		.loc 1 485 3 is_stmt 1 view .LVU91
 485:./Library/stm32f4xx_rtc.c ****   
 356              		.loc 1 485 12 is_stmt 0 view .LVU92
 357 0014 0B4B     		ldr	r3, .L27
 358 0016 FF22     		movs	r2, #255
 359 0018 5A62     		str	r2, [r3, #36]
 487:./Library/stm32f4xx_rtc.c **** }
 360              		.loc 1 487 3 is_stmt 1 view .LVU93
 488:./Library/stm32f4xx_rtc.c **** 
 361              		.loc 1 488 1 is_stmt 0 view .LVU94
 362 001a 10BD     		pop	{r4, pc}
 363              	.LVL23:
 364              	.L26:
 471:./Library/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 365              		.loc 1 471 5 is_stmt 1 view .LVU95
 471:./Library/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 366              		.loc 1 471 8 is_stmt 0 view .LVU96
 367 001c 094B     		ldr	r3, .L27
 368 001e 9A68     		ldr	r2, [r3, #8]
 471:./Library/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 369              		.loc 1 471 13 view .LVU97
 370 0020 22F04002 		bic	r2, r2, #64
 371 0024 9A60     		str	r2, [r3, #8]
 473:./Library/stm32f4xx_rtc.c ****   
 372              		.loc 1 473 5 is_stmt 1 view .LVU98
 473:./Library/stm32f4xx_rtc.c ****   
 373              		.loc 1 473 8 is_stmt 0 view .LVU99
 374 0026 9A68     		ldr	r2, [r3, #8]
 473:./Library/stm32f4xx_rtc.c ****   
 375              		.loc 1 473 43 view .LVU100
 376 0028 2168     		ldr	r1, [r4]
 473:./Library/stm32f4xx_rtc.c ****   
 377              		.loc 1 473 13 view .LVU101
 378 002a 0A43     		orrs	r2, r2, r1
 379 002c 9A60     		str	r2, [r3, #8]
 476:./Library/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 380              		.loc 1 476 5 is_stmt 1 view .LVU102
 476:./Library/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 381              		.loc 1 476 42 is_stmt 0 view .LVU103
ARM GAS  /tmp/cccsESzb.s 			page 57


 382 002e A268     		ldr	r2, [r4, #8]
 476:./Library/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 383              		.loc 1 476 15 view .LVU104
 384 0030 1A61     		str	r2, [r3, #16]
 477:./Library/stm32f4xx_rtc.c **** 
 385              		.loc 1 477 5 is_stmt 1 view .LVU105
 477:./Library/stm32f4xx_rtc.c **** 
 386              		.loc 1 477 8 is_stmt 0 view .LVU106
 387 0032 1A69     		ldr	r2, [r3, #16]
 477:./Library/stm32f4xx_rtc.c **** 
 388              		.loc 1 477 43 view .LVU107
 389 0034 6168     		ldr	r1, [r4, #4]
 477:./Library/stm32f4xx_rtc.c **** 
 390              		.loc 1 477 15 view .LVU108
 391 0036 42EA0142 		orr	r2, r2, r1, lsl #16
 392 003a 1A61     		str	r2, [r3, #16]
 480:./Library/stm32f4xx_rtc.c **** 
 393              		.loc 1 480 5 is_stmt 1 view .LVU109
 394 003c FFF7FEFF 		bl	RTC_ExitInitMode
 395              	.LVL24:
 482:./Library/stm32f4xx_rtc.c ****   }
 396              		.loc 1 482 5 view .LVU110
 482:./Library/stm32f4xx_rtc.c ****   }
 397              		.loc 1 482 12 is_stmt 0 view .LVU111
 398 0040 0120     		movs	r0, #1
 399 0042 E7E7     		b	.L24
 400              	.L28:
 401              		.align	2
 402              	.L27:
 403 0044 00280040 		.word	1073752064
 404              		.cfi_endproc
 405              	.LFE124:
 407              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 408              		.align	1
 409              		.global	RTC_WaitForSynchro
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 414              	RTC_WaitForSynchro:
 415              	.LFB129:
 613:./Library/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 416              		.loc 1 613 1 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 8
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 421 0000 82B0     		sub	sp, sp, #8
 422              	.LCFI4:
 423              		.cfi_def_cfa_offset 8
 614:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 424              		.loc 1 614 3 view .LVU113
 614:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 425              		.loc 1 614 17 is_stmt 0 view .LVU114
 426 0002 0023     		movs	r3, #0
 427 0004 0193     		str	r3, [sp, #4]
 615:./Library/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 428              		.loc 1 615 3 is_stmt 1 view .LVU115
ARM GAS  /tmp/cccsESzb.s 			page 58


 429              	.LVL25:
 616:./Library/stm32f4xx_rtc.c **** 
 430              		.loc 1 616 3 view .LVU116
 619:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 431              		.loc 1 619 3 view .LVU117
 619:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 432              		.loc 1 619 12 is_stmt 0 view .LVU118
 433 0006 114B     		ldr	r3, .L35
 434 0008 CA22     		movs	r2, #202
 435 000a 5A62     		str	r2, [r3, #36]
 620:./Library/stm32f4xx_rtc.c ****     
 436              		.loc 1 620 3 is_stmt 1 view .LVU119
 620:./Library/stm32f4xx_rtc.c ****     
 437              		.loc 1 620 12 is_stmt 0 view .LVU120
 438 000c 5322     		movs	r2, #83
 439 000e 5A62     		str	r2, [r3, #36]
 623:./Library/stm32f4xx_rtc.c ****     
 440              		.loc 1 623 3 is_stmt 1 view .LVU121
 623:./Library/stm32f4xx_rtc.c ****     
 441              		.loc 1 623 6 is_stmt 0 view .LVU122
 442 0010 DA68     		ldr	r2, [r3, #12]
 623:./Library/stm32f4xx_rtc.c ****     
 443              		.loc 1 623 12 view .LVU123
 444 0012 22F0A002 		bic	r2, r2, #160
 445 0016 DA60     		str	r2, [r3, #12]
 446              	.LVL26:
 447              	.L31:
 626:./Library/stm32f4xx_rtc.c ****   {
 448              		.loc 1 626 3 is_stmt 1 discriminator 2 view .LVU124
 628:./Library/stm32f4xx_rtc.c ****     synchrocounter++;  
 449              		.loc 1 628 5 discriminator 2 view .LVU125
 628:./Library/stm32f4xx_rtc.c ****     synchrocounter++;  
 450              		.loc 1 628 24 is_stmt 0 discriminator 2 view .LVU126
 451 0018 0C4B     		ldr	r3, .L35
 452 001a DA68     		ldr	r2, [r3, #12]
 628:./Library/stm32f4xx_rtc.c ****     synchrocounter++;  
 453              		.loc 1 628 19 discriminator 2 view .LVU127
 454 001c 02F02002 		and	r2, r2, #32
 455              	.LVL27:
 629:./Library/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 456              		.loc 1 629 5 is_stmt 1 discriminator 2 view .LVU128
 629:./Library/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 457              		.loc 1 629 19 is_stmt 0 discriminator 2 view .LVU129
 458 0020 019B     		ldr	r3, [sp, #4]
 459 0022 0133     		adds	r3, r3, #1
 460 0024 0193     		str	r3, [sp, #4]
 630:./Library/stm32f4xx_rtc.c ****     
 461              		.loc 1 630 47 is_stmt 1 discriminator 2 view .LVU130
 630:./Library/stm32f4xx_rtc.c ****     
 462              		.loc 1 630 27 is_stmt 0 discriminator 2 view .LVU131
 463 0026 019B     		ldr	r3, [sp, #4]
 630:./Library/stm32f4xx_rtc.c ****     
 464              		.loc 1 630 47 discriminator 2 view .LVU132
 465 0028 B3F5003F 		cmp	r3, #131072
 466 002c 01D0     		beq	.L30
 630:./Library/stm32f4xx_rtc.c ****     
 467              		.loc 1 630 47 discriminator 1 view .LVU133
ARM GAS  /tmp/cccsESzb.s 			page 59


 468 002e 002A     		cmp	r2, #0
 469 0030 F2D0     		beq	.L31
 470              	.L30:
 632:./Library/stm32f4xx_rtc.c ****   {
 471              		.loc 1 632 3 is_stmt 1 view .LVU134
 632:./Library/stm32f4xx_rtc.c ****   {
 472              		.loc 1 632 11 is_stmt 0 view .LVU135
 473 0032 064B     		ldr	r3, .L35
 474 0034 DB68     		ldr	r3, [r3, #12]
 632:./Library/stm32f4xx_rtc.c ****   {
 475              		.loc 1 632 6 view .LVU136
 476 0036 13F0200F 		tst	r3, #32
 477 003a 05D0     		beq	.L33
 634:./Library/stm32f4xx_rtc.c ****   }
 478              		.loc 1 634 12 view .LVU137
 479 003c 0120     		movs	r0, #1
 480              	.L32:
 481              	.LVL28:
 642:./Library/stm32f4xx_rtc.c ****     
 482              		.loc 1 642 3 is_stmt 1 view .LVU138
 642:./Library/stm32f4xx_rtc.c ****     
 483              		.loc 1 642 12 is_stmt 0 view .LVU139
 484 003e 034B     		ldr	r3, .L35
 485 0040 FF22     		movs	r2, #255
 486              	.LVL29:
 642:./Library/stm32f4xx_rtc.c ****     
 487              		.loc 1 642 12 view .LVU140
 488 0042 5A62     		str	r2, [r3, #36]
 644:./Library/stm32f4xx_rtc.c **** }
 489              		.loc 1 644 3 is_stmt 1 view .LVU141
 645:./Library/stm32f4xx_rtc.c **** 
 490              		.loc 1 645 1 is_stmt 0 view .LVU142
 491 0044 02B0     		add	sp, sp, #8
 492              	.LCFI5:
 493              		.cfi_remember_state
 494              		.cfi_def_cfa_offset 0
 495              		@ sp needed
 496 0046 7047     		bx	lr
 497              	.LVL30:
 498              	.L33:
 499              	.LCFI6:
 500              		.cfi_restore_state
 638:./Library/stm32f4xx_rtc.c ****   }        
 501              		.loc 1 638 12 view .LVU143
 502 0048 0020     		movs	r0, #0
 503 004a F8E7     		b	.L32
 504              	.L36:
 505              		.align	2
 506              	.L35:
 507 004c 00280040 		.word	1073752064
 508              		.cfi_endproc
 509              	.LFE129:
 511              		.section	.text.RTC_DeInit,"ax",%progbits
 512              		.align	1
 513              		.global	RTC_DeInit
 514              		.syntax unified
 515              		.thumb
ARM GAS  /tmp/cccsESzb.s 			page 60


 516              		.thumb_func
 518              	RTC_DeInit:
 519              	.LFB123:
 369:./Library/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 520              		.loc 1 369 1 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524 0000 00B5     		push	{lr}
 525              	.LCFI7:
 526              		.cfi_def_cfa_offset 4
 527              		.cfi_offset 14, -4
 528 0002 83B0     		sub	sp, sp, #12
 529              	.LCFI8:
 530              		.cfi_def_cfa_offset 16
 370:./Library/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 531              		.loc 1 370 3 view .LVU145
 370:./Library/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 532              		.loc 1 370 17 is_stmt 0 view .LVU146
 533 0004 0023     		movs	r3, #0
 534 0006 0193     		str	r3, [sp, #4]
 371:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 535              		.loc 1 371 3 is_stmt 1 view .LVU147
 536              	.LVL31:
 372:./Library/stm32f4xx_rtc.c ****   
 537              		.loc 1 372 3 view .LVU148
 375:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 538              		.loc 1 375 3 view .LVU149
 375:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 539              		.loc 1 375 12 is_stmt 0 view .LVU150
 540 0008 214B     		ldr	r3, .L45
 541 000a CA22     		movs	r2, #202
 542 000c 5A62     		str	r2, [r3, #36]
 376:./Library/stm32f4xx_rtc.c **** 
 543              		.loc 1 376 3 is_stmt 1 view .LVU151
 376:./Library/stm32f4xx_rtc.c **** 
 544              		.loc 1 376 12 is_stmt 0 view .LVU152
 545 000e 5322     		movs	r2, #83
 546 0010 5A62     		str	r2, [r3, #36]
 379:./Library/stm32f4xx_rtc.c ****   {
 547              		.loc 1 379 3 is_stmt 1 view .LVU153
 379:./Library/stm32f4xx_rtc.c ****   {
 548              		.loc 1 379 7 is_stmt 0 view .LVU154
 549 0012 FFF7FEFF 		bl	RTC_EnterInitMode
 550              	.LVL32:
 379:./Library/stm32f4xx_rtc.c ****   {
 551              		.loc 1 379 6 view .LVU155
 552 0016 E0B1     		cbz	r0, .L38
 386:./Library/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 553              		.loc 1 386 5 is_stmt 1 view .LVU156
 386:./Library/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 554              		.loc 1 386 13 is_stmt 0 view .LVU157
 555 0018 1D4B     		ldr	r3, .L45
 556 001a 0022     		movs	r2, #0
 557 001c 1A60     		str	r2, [r3]
 387:./Library/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 558              		.loc 1 387 5 is_stmt 1 view .LVU158
ARM GAS  /tmp/cccsESzb.s 			page 61


 387:./Library/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 559              		.loc 1 387 13 is_stmt 0 view .LVU159
 560 001e 42F20112 		movw	r2, #8449
 561 0022 5A60     		str	r2, [r3, #4]
 389:./Library/stm32f4xx_rtc.c ****   
 562              		.loc 1 389 5 is_stmt 1 view .LVU160
 389:./Library/stm32f4xx_rtc.c ****   
 563              		.loc 1 389 8 is_stmt 0 view .LVU161
 564 0024 9A68     		ldr	r2, [r3, #8]
 389:./Library/stm32f4xx_rtc.c ****   
 565              		.loc 1 389 13 view .LVU162
 566 0026 02F00702 		and	r2, r2, #7
 567 002a 9A60     		str	r2, [r3, #8]
 568              	.LVL33:
 569              	.L40:
 392:./Library/stm32f4xx_rtc.c ****     {
 570              		.loc 1 392 5 is_stmt 1 discriminator 2 view .LVU163
 394:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
 571              		.loc 1 394 7 discriminator 2 view .LVU164
 394:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
 572              		.loc 1 394 24 is_stmt 0 discriminator 2 view .LVU165
 573 002c 184B     		ldr	r3, .L45
 574 002e DA68     		ldr	r2, [r3, #12]
 394:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
 575              		.loc 1 394 19 discriminator 2 view .LVU166
 576 0030 02F00402 		and	r2, r2, #4
 577              	.LVL34:
 395:./Library/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 578              		.loc 1 395 7 is_stmt 1 discriminator 2 view .LVU167
 395:./Library/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 579              		.loc 1 395 17 is_stmt 0 discriminator 2 view .LVU168
 580 0034 019B     		ldr	r3, [sp, #4]
 581 0036 0133     		adds	r3, r3, #1
 582 0038 0193     		str	r3, [sp, #4]
 396:./Library/stm32f4xx_rtc.c ****     
 583              		.loc 1 396 46 is_stmt 1 discriminator 2 view .LVU169
 396:./Library/stm32f4xx_rtc.c ****     
 584              		.loc 1 396 25 is_stmt 0 discriminator 2 view .LVU170
 585 003a 019B     		ldr	r3, [sp, #4]
 396:./Library/stm32f4xx_rtc.c ****     
 586              		.loc 1 396 46 discriminator 2 view .LVU171
 587 003c B3F5803F 		cmp	r3, #65536
 588 0040 01D0     		beq	.L39
 396:./Library/stm32f4xx_rtc.c ****     
 589              		.loc 1 396 46 discriminator 1 view .LVU172
 590 0042 002A     		cmp	r2, #0
 591 0044 F2D0     		beq	.L40
 592              	.L39:
 398:./Library/stm32f4xx_rtc.c ****     {
 593              		.loc 1 398 5 is_stmt 1 view .LVU173
 398:./Library/stm32f4xx_rtc.c ****     {
 594              		.loc 1 398 13 is_stmt 0 view .LVU174
 595 0046 124B     		ldr	r3, .L45
 596 0048 DB68     		ldr	r3, [r3, #12]
 398:./Library/stm32f4xx_rtc.c ****     {
 597              		.loc 1 398 8 view .LVU175
 598 004a 13F0040F 		tst	r3, #4
ARM GAS  /tmp/cccsESzb.s 			page 62


 599 004e 06D1     		bne	.L44
 400:./Library/stm32f4xx_rtc.c ****     }
 600              		.loc 1 400 14 view .LVU176
 601 0050 0020     		movs	r0, #0
 602              	.LVL35:
 603              	.L38:
 434:./Library/stm32f4xx_rtc.c ****   
 604              		.loc 1 434 3 is_stmt 1 view .LVU177
 434:./Library/stm32f4xx_rtc.c ****   
 605              		.loc 1 434 12 is_stmt 0 view .LVU178
 606 0052 0F4B     		ldr	r3, .L45
 607 0054 FF22     		movs	r2, #255
 608 0056 5A62     		str	r2, [r3, #36]
 436:./Library/stm32f4xx_rtc.c **** }
 609              		.loc 1 436 3 is_stmt 1 view .LVU179
 437:./Library/stm32f4xx_rtc.c **** 
 610              		.loc 1 437 1 is_stmt 0 view .LVU180
 611 0058 03B0     		add	sp, sp, #12
 612              	.LCFI9:
 613              		.cfi_remember_state
 614              		.cfi_def_cfa_offset 4
 615              		@ sp needed
 616 005a 5DF804FB 		ldr	pc, [sp], #4
 617              	.LVL36:
 618              	.L44:
 619              	.LCFI10:
 620              		.cfi_restore_state
 405:./Library/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 621              		.loc 1 405 7 is_stmt 1 view .LVU181
 405:./Library/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 622              		.loc 1 405 10 is_stmt 0 view .LVU182
 623 005e 0C4B     		ldr	r3, .L45
 624 0060 9A68     		ldr	r2, [r3, #8]
 625              	.LVL37:
 405:./Library/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 626              		.loc 1 405 15 view .LVU183
 627 0062 0022     		movs	r2, #0
 628 0064 9A60     		str	r2, [r3, #8]
 406:./Library/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 629              		.loc 1 406 7 is_stmt 1 view .LVU184
 406:./Library/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 630              		.loc 1 406 17 is_stmt 0 view .LVU185
 631 0066 4FF6FF71 		movw	r1, #65535
 632 006a 5961     		str	r1, [r3, #20]
 407:./Library/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 633              		.loc 1 407 7 is_stmt 1 view .LVU186
 407:./Library/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 634              		.loc 1 407 17 is_stmt 0 view .LVU187
 635 006c 0949     		ldr	r1, .L45+4
 636 006e 1961     		str	r1, [r3, #16]
 408:./Library/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 637              		.loc 1 408 7 is_stmt 1 view .LVU188
 408:./Library/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 638              		.loc 1 408 19 is_stmt 0 view .LVU189
 639 0070 9A61     		str	r2, [r3, #24]
 409:./Library/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 640              		.loc 1 409 7 is_stmt 1 view .LVU190
ARM GAS  /tmp/cccsESzb.s 			page 63


 409:./Library/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 641              		.loc 1 409 19 is_stmt 0 view .LVU191
 642 0072 DA61     		str	r2, [r3, #28]
 410:./Library/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 643              		.loc 1 410 7 is_stmt 1 view .LVU192
 410:./Library/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 644              		.loc 1 410 19 is_stmt 0 view .LVU193
 645 0074 1A62     		str	r2, [r3, #32]
 411:./Library/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 646              		.loc 1 411 7 is_stmt 1 view .LVU194
 411:./Library/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 647              		.loc 1 411 19 is_stmt 0 view .LVU195
 648 0076 DA62     		str	r2, [r3, #44]
 412:./Library/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 649              		.loc 1 412 7 is_stmt 1 view .LVU196
 412:./Library/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 650              		.loc 1 412 17 is_stmt 0 view .LVU197
 651 0078 DA63     		str	r2, [r3, #60]
 413:./Library/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 652              		.loc 1 413 7 is_stmt 1 view .LVU198
 413:./Library/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 653              		.loc 1 413 21 is_stmt 0 view .LVU199
 654 007a 5A64     		str	r2, [r3, #68]
 414:./Library/stm32f4xx_rtc.c ****       
 655              		.loc 1 414 7 is_stmt 1 view .LVU200
 414:./Library/stm32f4xx_rtc.c ****       
 656              		.loc 1 414 21 is_stmt 0 view .LVU201
 657 007c 9A64     		str	r2, [r3, #72]
 417:./Library/stm32f4xx_rtc.c ****       
 658              		.loc 1 417 7 is_stmt 1 view .LVU202
 417:./Library/stm32f4xx_rtc.c ****       
 659              		.loc 1 417 16 is_stmt 0 view .LVU203
 660 007e DA60     		str	r2, [r3, #12]
 420:./Library/stm32f4xx_rtc.c ****   
 661              		.loc 1 420 7 is_stmt 1 view .LVU204
 420:./Library/stm32f4xx_rtc.c ****   
 662              		.loc 1 420 18 is_stmt 0 view .LVU205
 663 0080 1A64     		str	r2, [r3, #64]
 422:./Library/stm32f4xx_rtc.c ****       {
 664              		.loc 1 422 7 is_stmt 1 view .LVU206
 422:./Library/stm32f4xx_rtc.c ****       {
 665              		.loc 1 422 10 is_stmt 0 view .LVU207
 666 0082 FFF7FEFF 		bl	RTC_WaitForSynchro
 667              	.LVL38:
 422:./Library/stm32f4xx_rtc.c ****       {
 668              		.loc 1 422 9 view .LVU208
 669 0086 0028     		cmp	r0, #0
 670 0088 E3D0     		beq	.L38
 428:./Library/stm32f4xx_rtc.c ****       }
 671              		.loc 1 428 16 view .LVU209
 672 008a 0120     		movs	r0, #1
 673 008c E1E7     		b	.L38
 674              	.L46:
 675 008e 00BF     		.align	2
 676              	.L45:
 677 0090 00280040 		.word	1073752064
 678 0094 FF007F00 		.word	8323327
ARM GAS  /tmp/cccsESzb.s 			page 64


 679              		.cfi_endproc
 680              	.LFE123:
 682              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 683              		.align	1
 684              		.global	RTC_RefClockCmd
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 689              	RTC_RefClockCmd:
 690              	.LVL39:
 691              	.LFB130:
 656:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 692              		.loc 1 656 1 is_stmt 1 view -0
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 0
 695              		@ frame_needed = 0, uses_anonymous_args = 0
 656:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 696              		.loc 1 656 1 is_stmt 0 view .LVU211
 697 0000 10B5     		push	{r4, lr}
 698              	.LCFI11:
 699              		.cfi_def_cfa_offset 8
 700              		.cfi_offset 4, -8
 701              		.cfi_offset 14, -4
 702 0002 0446     		mov	r4, r0
 657:./Library/stm32f4xx_rtc.c ****   
 703              		.loc 1 657 3 is_stmt 1 view .LVU212
 704              	.LVL40:
 660:./Library/stm32f4xx_rtc.c ****   
 705              		.loc 1 660 3 view .LVU213
 663:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 706              		.loc 1 663 3 view .LVU214
 663:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 707              		.loc 1 663 12 is_stmt 0 view .LVU215
 708 0004 0D4B     		ldr	r3, .L52
 709 0006 CA22     		movs	r2, #202
 710 0008 5A62     		str	r2, [r3, #36]
 664:./Library/stm32f4xx_rtc.c ****     
 711              		.loc 1 664 3 is_stmt 1 view .LVU216
 664:./Library/stm32f4xx_rtc.c ****     
 712              		.loc 1 664 12 is_stmt 0 view .LVU217
 713 000a 5322     		movs	r2, #83
 714 000c 5A62     		str	r2, [r3, #36]
 667:./Library/stm32f4xx_rtc.c ****   {
 715              		.loc 1 667 3 is_stmt 1 view .LVU218
 667:./Library/stm32f4xx_rtc.c ****   {
 716              		.loc 1 667 7 is_stmt 0 view .LVU219
 717 000e FFF7FEFF 		bl	RTC_EnterInitMode
 718              	.LVL41:
 667:./Library/stm32f4xx_rtc.c ****   {
 719              		.loc 1 667 6 view .LVU220
 720 0012 40B1     		cbz	r0, .L48
 673:./Library/stm32f4xx_rtc.c ****     {
 721              		.loc 1 673 5 is_stmt 1 view .LVU221
 673:./Library/stm32f4xx_rtc.c ****     {
 722              		.loc 1 673 8 is_stmt 0 view .LVU222
 723 0014 5CB1     		cbz	r4, .L49
 676:./Library/stm32f4xx_rtc.c ****     }
ARM GAS  /tmp/cccsESzb.s 			page 65


 724              		.loc 1 676 7 is_stmt 1 view .LVU223
 676:./Library/stm32f4xx_rtc.c ****     }
 725              		.loc 1 676 10 is_stmt 0 view .LVU224
 726 0016 094A     		ldr	r2, .L52
 727 0018 9368     		ldr	r3, [r2, #8]
 676:./Library/stm32f4xx_rtc.c ****     }
 728              		.loc 1 676 15 view .LVU225
 729 001a 43F01003 		orr	r3, r3, #16
 730 001e 9360     		str	r3, [r2, #8]
 731              	.L50:
 684:./Library/stm32f4xx_rtc.c ****     
 732              		.loc 1 684 5 is_stmt 1 view .LVU226
 733 0020 FFF7FEFF 		bl	RTC_ExitInitMode
 734              	.LVL42:
 686:./Library/stm32f4xx_rtc.c ****   }
 735              		.loc 1 686 5 view .LVU227
 686:./Library/stm32f4xx_rtc.c ****   }
 736              		.loc 1 686 12 is_stmt 0 view .LVU228
 737 0024 0120     		movs	r0, #1
 738              	.LVL43:
 739              	.L48:
 690:./Library/stm32f4xx_rtc.c ****   
 740              		.loc 1 690 3 is_stmt 1 view .LVU229
 690:./Library/stm32f4xx_rtc.c ****   
 741              		.loc 1 690 12 is_stmt 0 view .LVU230
 742 0026 054B     		ldr	r3, .L52
 743 0028 FF22     		movs	r2, #255
 744 002a 5A62     		str	r2, [r3, #36]
 692:./Library/stm32f4xx_rtc.c **** }
 745              		.loc 1 692 3 is_stmt 1 view .LVU231
 693:./Library/stm32f4xx_rtc.c **** 
 746              		.loc 1 693 1 is_stmt 0 view .LVU232
 747 002c 10BD     		pop	{r4, pc}
 748              	.LVL44:
 749              	.L49:
 681:./Library/stm32f4xx_rtc.c ****     }
 750              		.loc 1 681 7 is_stmt 1 view .LVU233
 681:./Library/stm32f4xx_rtc.c ****     }
 751              		.loc 1 681 10 is_stmt 0 view .LVU234
 752 002e 034A     		ldr	r2, .L52
 753 0030 9368     		ldr	r3, [r2, #8]
 681:./Library/stm32f4xx_rtc.c ****     }
 754              		.loc 1 681 15 view .LVU235
 755 0032 23F01003 		bic	r3, r3, #16
 756 0036 9360     		str	r3, [r2, #8]
 757 0038 F2E7     		b	.L50
 758              	.L53:
 759 003a 00BF     		.align	2
 760              	.L52:
 761 003c 00280040 		.word	1073752064
 762              		.cfi_endproc
 763              	.LFE130:
 765              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 766              		.align	1
 767              		.global	RTC_BypassShadowCmd
 768              		.syntax unified
 769              		.thumb
ARM GAS  /tmp/cccsESzb.s 			page 66


 770              		.thumb_func
 772              	RTC_BypassShadowCmd:
 773              	.LVL45:
 774              	.LFB131:
 704:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 775              		.loc 1 704 1 is_stmt 1 view -0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 706:./Library/stm32f4xx_rtc.c **** 
 780              		.loc 1 706 3 view .LVU237
 709:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 781              		.loc 1 709 3 view .LVU238
 709:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 782              		.loc 1 709 12 is_stmt 0 view .LVU239
 783 0000 0A4B     		ldr	r3, .L57
 784 0002 CA22     		movs	r2, #202
 785 0004 5A62     		str	r2, [r3, #36]
 710:./Library/stm32f4xx_rtc.c ****   
 786              		.loc 1 710 3 is_stmt 1 view .LVU240
 710:./Library/stm32f4xx_rtc.c ****   
 787              		.loc 1 710 12 is_stmt 0 view .LVU241
 788 0006 5322     		movs	r2, #83
 789 0008 5A62     		str	r2, [r3, #36]
 712:./Library/stm32f4xx_rtc.c ****   {
 790              		.loc 1 712 3 is_stmt 1 view .LVU242
 712:./Library/stm32f4xx_rtc.c ****   {
 791              		.loc 1 712 6 is_stmt 0 view .LVU243
 792 000a 40B1     		cbz	r0, .L55
 715:./Library/stm32f4xx_rtc.c ****   }
 793              		.loc 1 715 5 is_stmt 1 view .LVU244
 715:./Library/stm32f4xx_rtc.c ****   }
 794              		.loc 1 715 8 is_stmt 0 view .LVU245
 795 000c 1A46     		mov	r2, r3
 796 000e 9B68     		ldr	r3, [r3, #8]
 715:./Library/stm32f4xx_rtc.c ****   }
 797              		.loc 1 715 13 view .LVU246
 798 0010 43F02003 		orr	r3, r3, #32
 799 0014 9360     		str	r3, [r2, #8]
 800              	.L56:
 724:./Library/stm32f4xx_rtc.c **** }
 801              		.loc 1 724 3 is_stmt 1 view .LVU247
 724:./Library/stm32f4xx_rtc.c **** }
 802              		.loc 1 724 12 is_stmt 0 view .LVU248
 803 0016 054B     		ldr	r3, .L57
 804 0018 FF22     		movs	r2, #255
 805 001a 5A62     		str	r2, [r3, #36]
 725:./Library/stm32f4xx_rtc.c **** 
 806              		.loc 1 725 1 view .LVU249
 807 001c 7047     		bx	lr
 808              	.L55:
 720:./Library/stm32f4xx_rtc.c ****   }
 809              		.loc 1 720 5 is_stmt 1 view .LVU250
 720:./Library/stm32f4xx_rtc.c ****   }
 810              		.loc 1 720 8 is_stmt 0 view .LVU251
 811 001e 034A     		ldr	r2, .L57
ARM GAS  /tmp/cccsESzb.s 			page 67


 812 0020 9368     		ldr	r3, [r2, #8]
 720:./Library/stm32f4xx_rtc.c ****   }
 813              		.loc 1 720 13 view .LVU252
 814 0022 03F0DF03 		and	r3, r3, #223
 815 0026 9360     		str	r3, [r2, #8]
 816 0028 F5E7     		b	.L56
 817              	.L58:
 818 002a 00BF     		.align	2
 819              	.L57:
 820 002c 00280040 		.word	1073752064
 821              		.cfi_endproc
 822              	.LFE131:
 824              		.section	.text.RTC_SetTime,"ax",%progbits
 825              		.align	1
 826              		.global	RTC_SetTime
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 831              	RTC_SetTime:
 832              	.LVL46:
 833              	.LFB132:
 759:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 834              		.loc 1 759 1 is_stmt 1 view -0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 759:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 838              		.loc 1 759 1 is_stmt 0 view .LVU254
 839 0000 38B5     		push	{r3, r4, r5, lr}
 840              	.LCFI12:
 841              		.cfi_def_cfa_offset 16
 842              		.cfi_offset 3, -16
 843              		.cfi_offset 4, -12
 844              		.cfi_offset 5, -8
 845              		.cfi_offset 14, -4
 846 0002 0D46     		mov	r5, r1
 760:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 847              		.loc 1 760 3 is_stmt 1 view .LVU255
 848              	.LVL47:
 761:./Library/stm32f4xx_rtc.c ****     
 849              		.loc 1 761 3 view .LVU256
 764:./Library/stm32f4xx_rtc.c ****   
 850              		.loc 1 764 3 view .LVU257
 766:./Library/stm32f4xx_rtc.c ****   {
 851              		.loc 1 766 3 view .LVU258
 766:./Library/stm32f4xx_rtc.c ****   {
 852              		.loc 1 766 6 is_stmt 0 view .LVU259
 853 0004 0346     		mov	r3, r0
 854 0006 E8B9     		cbnz	r0, .L60
 768:./Library/stm32f4xx_rtc.c ****     {
 855              		.loc 1 768 5 is_stmt 1 view .LVU260
 768:./Library/stm32f4xx_rtc.c ****     {
 856              		.loc 1 768 13 is_stmt 0 view .LVU261
 857 0008 254A     		ldr	r2, .L70
 858 000a 9268     		ldr	r2, [r2, #8]
 768:./Library/stm32f4xx_rtc.c ****     {
 859              		.loc 1 768 8 view .LVU262
ARM GAS  /tmp/cccsESzb.s 			page 68


 860 000c 12F0400F 		tst	r2, #64
 861 0010 01D1     		bne	.L61
 775:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 862              		.loc 1 775 7 is_stmt 1 view .LVU263
 775:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 863              		.loc 1 775 31 is_stmt 0 view .LVU264
 864 0012 0022     		movs	r2, #0
 865 0014 CA70     		strb	r2, [r1, #3]
 866              	.L61:
 867              	.LVL48:
 792:./Library/stm32f4xx_rtc.c ****     }
 868              		.loc 1 792 7 is_stmt 1 view .LVU265
 794:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 869              		.loc 1 794 5 view .LVU266
 795:./Library/stm32f4xx_rtc.c ****   }
 870              		.loc 1 795 5 view .LVU267
 799:./Library/stm32f4xx_rtc.c ****   {
 871              		.loc 1 799 3 view .LVU268
 799:./Library/stm32f4xx_rtc.c ****   {
 872              		.loc 1 799 6 is_stmt 0 view .LVU269
 873 0016 EBB1     		cbz	r3, .L62
 801:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 874              		.loc 1 801 5 is_stmt 1 view .LVU270
 801:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 875              		.loc 1 801 41 is_stmt 0 view .LVU271
 876 0018 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 802:./Library/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 877              		.loc 1 802 40 view .LVU272
 878 001a 6C78     		ldrb	r4, [r5, #1]	@ zero_extendqisi2
 802:./Library/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 879              		.loc 1 802 55 view .LVU273
 880 001c 2402     		lsls	r4, r4, #8
 801:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 881              		.loc 1 801 61 view .LVU274
 882 001e 44EA0344 		orr	r4, r4, r3, lsl #16
 803:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 883              		.loc 1 803 39 view .LVU275
 884 0022 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 802:./Library/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 885              		.loc 1 802 61 view .LVU276
 886 0024 1C43     		orrs	r4, r4, r3
 804:./Library/stm32f4xx_rtc.c ****   }  
 887              		.loc 1 804 40 view .LVU277
 888 0026 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 801:./Library/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 889              		.loc 1 801 12 view .LVU278
 890 0028 44EA0344 		orr	r4, r4, r3, lsl #16
 891              	.LVL49:
 892              	.L63:
 815:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 893              		.loc 1 815 3 is_stmt 1 view .LVU279
 815:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 894              		.loc 1 815 12 is_stmt 0 view .LVU280
 895 002c 1C4B     		ldr	r3, .L70
 896 002e CA22     		movs	r2, #202
 897 0030 5A62     		str	r2, [r3, #36]
 816:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 69


 898              		.loc 1 816 3 is_stmt 1 view .LVU281
 816:./Library/stm32f4xx_rtc.c **** 
 899              		.loc 1 816 12 is_stmt 0 view .LVU282
 900 0032 5322     		movs	r2, #83
 901 0034 5A62     		str	r2, [r3, #36]
 819:./Library/stm32f4xx_rtc.c ****   {
 902              		.loc 1 819 3 is_stmt 1 view .LVU283
 819:./Library/stm32f4xx_rtc.c ****   {
 903              		.loc 1 819 7 is_stmt 0 view .LVU284
 904 0036 FFF7FEFF 		bl	RTC_EnterInitMode
 905              	.LVL50:
 819:./Library/stm32f4xx_rtc.c ****   {
 906              		.loc 1 819 6 view .LVU285
 907 003a E0B9     		cbnz	r0, .L68
 908              	.LVL51:
 909              	.L64:
 849:./Library/stm32f4xx_rtc.c ****     
 910              		.loc 1 849 3 is_stmt 1 view .LVU286
 849:./Library/stm32f4xx_rtc.c ****     
 911              		.loc 1 849 12 is_stmt 0 view .LVU287
 912 003c 184B     		ldr	r3, .L70
 913 003e FF22     		movs	r2, #255
 914 0040 5A62     		str	r2, [r3, #36]
 851:./Library/stm32f4xx_rtc.c **** }
 915              		.loc 1 851 3 is_stmt 1 view .LVU288
 852:./Library/stm32f4xx_rtc.c **** 
 916              		.loc 1 852 1 is_stmt 0 view .LVU289
 917 0042 38BD     		pop	{r3, r4, r5, pc}
 918              	.LVL52:
 919              	.L60:
 783:./Library/stm32f4xx_rtc.c ****     {
 920              		.loc 1 783 5 is_stmt 1 view .LVU290
 783:./Library/stm32f4xx_rtc.c ****     {
 921              		.loc 1 783 13 is_stmt 0 view .LVU291
 922 0044 164A     		ldr	r2, .L70
 923 0046 9268     		ldr	r2, [r2, #8]
 783:./Library/stm32f4xx_rtc.c ****     {
 924              		.loc 1 783 8 view .LVU292
 925 0048 12F0400F 		tst	r2, #64
 926 004c E3D1     		bne	.L61
 791:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 927              		.loc 1 791 7 is_stmt 1 view .LVU293
 791:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 928              		.loc 1 791 31 is_stmt 0 view .LVU294
 929 004e 0022     		movs	r2, #0
 930 0050 CA70     		strb	r2, [r1, #3]
 931 0052 E0E7     		b	.L61
 932              	.LVL53:
 933              	.L62:
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 934              		.loc 1 808 5 is_stmt 1 view .LVU295
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 935              		.loc 1 808 36 is_stmt 0 view .LVU296
 936 0054 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 937              	.LVL54:
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 938              		.loc 1 808 36 view .LVU297
ARM GAS  /tmp/cccsESzb.s 			page 70


 939 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 940              	.LVL55:
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 941              		.loc 1 808 78 view .LVU298
 942 005a 0404     		lsls	r4, r0, #16
 809:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 943              		.loc 1 809 31 view .LVU299
 944 005c 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 945 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 946              	.LVL56:
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 947              		.loc 1 808 85 view .LVU300
 948 0062 44EA0024 		orr	r4, r4, r0, lsl #8
 810:./Library/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 949              		.loc 1 810 31 view .LVU301
 950 0066 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 951 0068 FFF7FEFF 		bl	RTC_ByteToBcd2
 952              	.LVL57:
 809:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 953              		.loc 1 809 81 view .LVU302
 954 006c 0443     		orrs	r4, r4, r0
 811:./Library/stm32f4xx_rtc.c ****   }  
 955              		.loc 1 811 46 view .LVU303
 956 006e EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 957              		.loc 1 808 12 view .LVU304
 958 0070 44EA0344 		orr	r4, r4, r3, lsl #16
 959              	.LVL58:
 808:./Library/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 960              		.loc 1 808 12 view .LVU305
 961 0074 DAE7     		b	.L63
 962              	.L68:
 826:./Library/stm32f4xx_rtc.c **** 
 963              		.loc 1 826 5 is_stmt 1 view .LVU306
 826:./Library/stm32f4xx_rtc.c **** 
 964              		.loc 1 826 15 is_stmt 0 view .LVU307
 965 0076 04F07F34 		and	r4, r4, #2139062143
 966              	.LVL59:
 826:./Library/stm32f4xx_rtc.c **** 
 967              		.loc 1 826 15 view .LVU308
 968 007a 24F0FE44 		bic	r4, r4, #2130706432
 826:./Library/stm32f4xx_rtc.c **** 
 969              		.loc 1 826 13 view .LVU309
 970 007e 084D     		ldr	r5, .L70
 971              	.LVL60:
 826:./Library/stm32f4xx_rtc.c **** 
 972              		.loc 1 826 13 view .LVU310
 973 0080 2C60     		str	r4, [r5]
 829:./Library/stm32f4xx_rtc.c **** 
 974              		.loc 1 829 5 is_stmt 1 view .LVU311
 975 0082 FFF7FEFF 		bl	RTC_ExitInitMode
 976              	.LVL61:
 832:./Library/stm32f4xx_rtc.c ****     {
 977              		.loc 1 832 5 view .LVU312
 832:./Library/stm32f4xx_rtc.c ****     {
 978              		.loc 1 832 13 is_stmt 0 view .LVU313
 979 0086 AB68     		ldr	r3, [r5, #8]
ARM GAS  /tmp/cccsESzb.s 			page 71


 832:./Library/stm32f4xx_rtc.c ****     {
 980              		.loc 1 832 8 view .LVU314
 981 0088 13F0200F 		tst	r3, #32
 982 008c 01D0     		beq	.L69
 845:./Library/stm32f4xx_rtc.c ****     }
 983              		.loc 1 845 14 view .LVU315
 984 008e 0120     		movs	r0, #1
 985 0090 D4E7     		b	.L64
 986              	.L69:
 834:./Library/stm32f4xx_rtc.c ****     {
 987              		.loc 1 834 5 is_stmt 1 view .LVU316
 834:./Library/stm32f4xx_rtc.c ****     {
 988              		.loc 1 834 8 is_stmt 0 view .LVU317
 989 0092 FFF7FEFF 		bl	RTC_WaitForSynchro
 990              	.LVL62:
 834:./Library/stm32f4xx_rtc.c ****     {
 991              		.loc 1 834 7 view .LVU318
 992 0096 0028     		cmp	r0, #0
 993 0098 D0D0     		beq	.L64
 840:./Library/stm32f4xx_rtc.c ****     }
 994              		.loc 1 840 14 view .LVU319
 995 009a 0120     		movs	r0, #1
 996 009c CEE7     		b	.L64
 997              	.L71:
 998 009e 00BF     		.align	2
 999              	.L70:
 1000 00a0 00280040 		.word	1073752064
 1001              		.cfi_endproc
 1002              	.LFE132:
 1004              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 1005              		.align	1
 1006              		.global	RTC_TimeStructInit
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1011              	RTC_TimeStructInit:
 1012              	.LVL63:
 1013              	.LFB133:
 862:./Library/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 1014              		.loc 1 862 1 is_stmt 1 view -0
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 0
 1017              		@ frame_needed = 0, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
 864:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1019              		.loc 1 864 3 view .LVU321
 864:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1020              		.loc 1 864 27 is_stmt 0 view .LVU322
 1021 0000 0023     		movs	r3, #0
 1022 0002 C370     		strb	r3, [r0, #3]
 865:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1023              		.loc 1 865 3 is_stmt 1 view .LVU323
 865:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1024              		.loc 1 865 29 is_stmt 0 view .LVU324
 1025 0004 0370     		strb	r3, [r0]
 866:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1026              		.loc 1 866 3 is_stmt 1 view .LVU325
ARM GAS  /tmp/cccsESzb.s 			page 72


 866:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1027              		.loc 1 866 31 is_stmt 0 view .LVU326
 1028 0006 4370     		strb	r3, [r0, #1]
 867:./Library/stm32f4xx_rtc.c **** }
 1029              		.loc 1 867 3 is_stmt 1 view .LVU327
 867:./Library/stm32f4xx_rtc.c **** }
 1030              		.loc 1 867 31 is_stmt 0 view .LVU328
 1031 0008 8370     		strb	r3, [r0, #2]
 868:./Library/stm32f4xx_rtc.c **** 
 1032              		.loc 1 868 1 view .LVU329
 1033 000a 7047     		bx	lr
 1034              		.cfi_endproc
 1035              	.LFE133:
 1037              		.section	.text.RTC_GetTime,"ax",%progbits
 1038              		.align	1
 1039              		.global	RTC_GetTime
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1044              	RTC_GetTime:
 1045              	.LVL64:
 1046              	.LFB134:
 881:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1047              		.loc 1 881 1 is_stmt 1 view -0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 881:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1051              		.loc 1 881 1 is_stmt 0 view .LVU331
 1052 0000 70B5     		push	{r4, r5, r6, lr}
 1053              	.LCFI13:
 1054              		.cfi_def_cfa_offset 16
 1055              		.cfi_offset 4, -16
 1056              		.cfi_offset 5, -12
 1057              		.cfi_offset 6, -8
 1058              		.cfi_offset 14, -4
 1059 0002 0C46     		mov	r4, r1
 882:./Library/stm32f4xx_rtc.c **** 
 1060              		.loc 1 882 3 is_stmt 1 view .LVU332
 1061              	.LVL65:
 885:./Library/stm32f4xx_rtc.c **** 
 1062              		.loc 1 885 3 view .LVU333
 888:./Library/stm32f4xx_rtc.c ****   
 1063              		.loc 1 888 3 view .LVU334
 888:./Library/stm32f4xx_rtc.c ****   
 1064              		.loc 1 888 26 is_stmt 0 view .LVU335
 1065 0004 0E4B     		ldr	r3, .L76
 1066 0006 1D68     		ldr	r5, [r3]
 1067              	.LVL66:
 891:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1068              		.loc 1 891 3 is_stmt 1 view .LVU336
 891:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1069              		.loc 1 891 31 is_stmt 0 view .LVU337
 1070 0008 C5F30642 		ubfx	r2, r5, #16, #7
 1071 000c C5F30541 		ubfx	r1, r5, #16, #6
 1072              	.LVL67:
 891:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
ARM GAS  /tmp/cccsESzb.s 			page 73


 1073              		.loc 1 891 29 view .LVU338
 1074 0010 2170     		strb	r1, [r4]
 892:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1075              		.loc 1 892 3 is_stmt 1 view .LVU339
 892:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1076              		.loc 1 892 33 is_stmt 0 view .LVU340
 1077 0012 C5F30626 		ubfx	r6, r5, #8, #7
 892:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1078              		.loc 1 892 31 view .LVU341
 1079 0016 6670     		strb	r6, [r4, #1]
 893:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1080              		.loc 1 893 3 is_stmt 1 view .LVU342
 893:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1081              		.loc 1 893 33 is_stmt 0 view .LVU343
 1082 0018 05F07F05 		and	r5, r5, #127
 1083              	.LVL68:
 893:./Library/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1084              		.loc 1 893 31 view .LVU344
 1085 001c A570     		strb	r5, [r4, #2]
 894:./Library/stm32f4xx_rtc.c **** 
 1086              		.loc 1 894 3 is_stmt 1 view .LVU345
 894:./Library/stm32f4xx_rtc.c **** 
 1087              		.loc 1 894 29 is_stmt 0 view .LVU346
 1088 001e 02F04003 		and	r3, r2, #64
 894:./Library/stm32f4xx_rtc.c **** 
 1089              		.loc 1 894 27 view .LVU347
 1090 0022 E370     		strb	r3, [r4, #3]
 897:./Library/stm32f4xx_rtc.c ****   {
 1091              		.loc 1 897 3 is_stmt 1 view .LVU348
 897:./Library/stm32f4xx_rtc.c ****   {
 1092              		.loc 1 897 6 is_stmt 0 view .LVU349
 1093 0024 58B9     		cbnz	r0, .L73
 900:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1094              		.loc 1 900 5 is_stmt 1 view .LVU350
 900:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1095              		.loc 1 900 42 is_stmt 0 view .LVU351
 1096 0026 0846     		mov	r0, r1
 1097              	.LVL69:
 900:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1098              		.loc 1 900 42 view .LVU352
 1099 0028 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1100              	.LVL70:
 900:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1101              		.loc 1 900 31 view .LVU353
 1102 002c 2070     		strb	r0, [r4]
 901:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1103              		.loc 1 901 5 is_stmt 1 view .LVU354
 901:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1104              		.loc 1 901 44 is_stmt 0 view .LVU355
 1105 002e 3046     		mov	r0, r6
 1106 0030 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1107              	.LVL71:
 901:./Library/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1108              		.loc 1 901 33 view .LVU356
 1109 0034 6070     		strb	r0, [r4, #1]
 902:./Library/stm32f4xx_rtc.c ****   }
 1110              		.loc 1 902 5 is_stmt 1 view .LVU357
ARM GAS  /tmp/cccsESzb.s 			page 74


 902:./Library/stm32f4xx_rtc.c ****   }
 1111              		.loc 1 902 44 is_stmt 0 view .LVU358
 1112 0036 2846     		mov	r0, r5
 1113 0038 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1114              	.LVL72:
 902:./Library/stm32f4xx_rtc.c ****   }
 1115              		.loc 1 902 33 view .LVU359
 1116 003c A070     		strb	r0, [r4, #2]
 1117              	.L73:
 904:./Library/stm32f4xx_rtc.c **** 
 1118              		.loc 1 904 1 view .LVU360
 1119 003e 70BD     		pop	{r4, r5, r6, pc}
 1120              	.LVL73:
 1121              	.L77:
 904:./Library/stm32f4xx_rtc.c **** 
 1122              		.loc 1 904 1 view .LVU361
 1123              		.align	2
 1124              	.L76:
 1125 0040 00280040 		.word	1073752064
 1126              		.cfi_endproc
 1127              	.LFE134:
 1129              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1130              		.align	1
 1131              		.global	RTC_GetSubSecond
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1136              	RTC_GetSubSecond:
 1137              	.LFB135:
 914:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1138              		.loc 1 914 1 is_stmt 1 view -0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142              		@ link register save eliminated.
 915:./Library/stm32f4xx_rtc.c ****   
 1143              		.loc 1 915 3 view .LVU363
 1144              	.LVL74:
 918:./Library/stm32f4xx_rtc.c ****   
 1145              		.loc 1 918 3 view .LVU364
 918:./Library/stm32f4xx_rtc.c ****   
 1146              		.loc 1 918 10 is_stmt 0 view .LVU365
 1147 0000 014B     		ldr	r3, .L79
 1148 0002 986A     		ldr	r0, [r3, #40]
 1149              	.LVL75:
 921:./Library/stm32f4xx_rtc.c ****   
 1150              		.loc 1 921 3 is_stmt 1 view .LVU366
 1151 0004 5B68     		ldr	r3, [r3, #4]
 923:./Library/stm32f4xx_rtc.c **** }
 1152              		.loc 1 923 3 view .LVU367
 924:./Library/stm32f4xx_rtc.c **** 
 1153              		.loc 1 924 1 is_stmt 0 view .LVU368
 1154 0006 7047     		bx	lr
 1155              	.L80:
 1156              		.align	2
 1157              	.L79:
 1158 0008 00280040 		.word	1073752064
ARM GAS  /tmp/cccsESzb.s 			page 75


 1159              		.cfi_endproc
 1160              	.LFE135:
 1162              		.section	.text.RTC_SetDate,"ax",%progbits
 1163              		.align	1
 1164              		.global	RTC_SetDate
 1165              		.syntax unified
 1166              		.thumb
 1167              		.thumb_func
 1169              	RTC_SetDate:
 1170              	.LVL76:
 1171              	.LFB136:
 939:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1172              		.loc 1 939 1 is_stmt 1 view -0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 0
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 939:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1176              		.loc 1 939 1 is_stmt 0 view .LVU370
 1177 0000 38B5     		push	{r3, r4, r5, lr}
 1178              	.LCFI14:
 1179              		.cfi_def_cfa_offset 16
 1180              		.cfi_offset 3, -16
 1181              		.cfi_offset 4, -12
 1182              		.cfi_offset 5, -8
 1183              		.cfi_offset 14, -4
 1184 0002 0D46     		mov	r5, r1
 940:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1185              		.loc 1 940 3 is_stmt 1 view .LVU371
 1186              	.LVL77:
 941:./Library/stm32f4xx_rtc.c ****   
 1187              		.loc 1 941 3 view .LVU372
 944:./Library/stm32f4xx_rtc.c **** 
 1188              		.loc 1 944 3 view .LVU373
 946:./Library/stm32f4xx_rtc.c ****   {
 1189              		.loc 1 946 3 view .LVU374
 946:./Library/stm32f4xx_rtc.c ****   {
 1190              		.loc 1 946 6 is_stmt 0 view .LVU375
 1191 0004 A8B1     		cbz	r0, .L82
 950:./Library/stm32f4xx_rtc.c ****   {
 1192              		.loc 1 950 3 is_stmt 1 view .LVU376
 958:./Library/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1193              		.loc 1 958 5 view .LVU377
 959:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 1194              		.loc 1 959 5 view .LVU378
 959:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 1195              		.loc 1 959 14 is_stmt 0 view .LVU379
 1196 0006 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
 1197              	.LVL78:
 960:./Library/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1198              		.loc 1 960 5 is_stmt 1 view .LVU380
 961:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 1199              		.loc 1 961 5 view .LVU381
 961:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 1200              		.loc 1 961 14 is_stmt 0 view .LVU382
 1201 0008 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 962:./Library/stm32f4xx_rtc.c ****   }
 1202              		.loc 1 962 5 is_stmt 1 view .LVU383
ARM GAS  /tmp/cccsESzb.s 			page 76


 964:./Library/stm32f4xx_rtc.c **** 
 1203              		.loc 1 964 3 view .LVU384
 967:./Library/stm32f4xx_rtc.c ****   {
 1204              		.loc 1 967 3 view .LVU385
 969:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1205              		.loc 1 969 5 view .LVU386
 969:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1206              		.loc 1 969 41 is_stmt 0 view .LVU387
 1207 000a CA78     		ldrb	r2, [r1, #3]	@ zero_extendqisi2
 970:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1208              		.loc 1 970 54 view .LVU388
 1209 000c 2402     		lsls	r4, r4, #8
 969:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1210              		.loc 1 969 60 view .LVU389
 1211 000e 44EA0244 		orr	r4, r4, r2, lsl #16
 970:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1212              		.loc 1 970 60 view .LVU390
 1213 0012 1C43     		orrs	r4, r4, r3
 972:./Library/stm32f4xx_rtc.c ****   }  
 1214              		.loc 1 972 41 view .LVU391
 1215 0014 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 969:./Library/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1216              		.loc 1 969 12 view .LVU392
 1217 0016 44EA4334 		orr	r4, r4, r3, lsl #13
 1218              	.LVL79:
 1219              	.L83:
 983:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1220              		.loc 1 983 3 is_stmt 1 view .LVU393
 983:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1221              		.loc 1 983 12 is_stmt 0 view .LVU394
 1222 001a 1C4B     		ldr	r3, .L91
 1223 001c CA22     		movs	r2, #202
 1224 001e 5A62     		str	r2, [r3, #36]
 984:./Library/stm32f4xx_rtc.c **** 
 1225              		.loc 1 984 3 is_stmt 1 view .LVU395
 984:./Library/stm32f4xx_rtc.c **** 
 1226              		.loc 1 984 12 is_stmt 0 view .LVU396
 1227 0020 5322     		movs	r2, #83
 1228 0022 5A62     		str	r2, [r3, #36]
 987:./Library/stm32f4xx_rtc.c ****   {
 1229              		.loc 1 987 3 is_stmt 1 view .LVU397
 987:./Library/stm32f4xx_rtc.c ****   {
 1230              		.loc 1 987 7 is_stmt 0 view .LVU398
 1231 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 1232              	.LVL80:
 987:./Library/stm32f4xx_rtc.c ****   {
 1233              		.loc 1 987 6 view .LVU399
 1234 0028 E0B9     		cbnz	r0, .L89
 1235              	.LVL81:
 1236              	.L85:
1017:./Library/stm32f4xx_rtc.c ****   
 1237              		.loc 1 1017 3 is_stmt 1 view .LVU400
1017:./Library/stm32f4xx_rtc.c ****   
 1238              		.loc 1 1017 12 is_stmt 0 view .LVU401
 1239 002a 184B     		ldr	r3, .L91
 1240 002c FF22     		movs	r2, #255
 1241 002e 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/cccsESzb.s 			page 77


1019:./Library/stm32f4xx_rtc.c **** }
 1242              		.loc 1 1019 3 is_stmt 1 view .LVU402
1020:./Library/stm32f4xx_rtc.c **** 
 1243              		.loc 1 1020 1 is_stmt 0 view .LVU403
 1244 0030 38BD     		pop	{r3, r4, r5, pc}
 1245              	.LVL82:
 1246              	.L82:
 946:./Library/stm32f4xx_rtc.c ****   {
 1247              		.loc 1 946 57 discriminator 1 view .LVU404
 1248 0032 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 946:./Library/stm32f4xx_rtc.c ****   {
 1249              		.loc 1 946 38 discriminator 1 view .LVU405
 1250 0034 13F0100F 		tst	r3, #16
 1251 0038 03D0     		beq	.L84
 948:./Library/stm32f4xx_rtc.c ****   }  
 1252              		.loc 1 948 5 is_stmt 1 view .LVU406
 948:./Library/stm32f4xx_rtc.c ****   }  
 1253              		.loc 1 948 60 is_stmt 0 view .LVU407
 1254 003a 03F0EF03 		and	r3, r3, #239
 948:./Library/stm32f4xx_rtc.c ****   }  
 1255              		.loc 1 948 81 view .LVU408
 1256 003e 0A33     		adds	r3, r3, #10
 948:./Library/stm32f4xx_rtc.c ****   }  
 1257              		.loc 1 948 31 view .LVU409
 1258 0040 4B70     		strb	r3, [r1, #1]
 1259              	.L84:
 950:./Library/stm32f4xx_rtc.c ****   {
 1260              		.loc 1 950 3 is_stmt 1 view .LVU410
 962:./Library/stm32f4xx_rtc.c ****   }
 1261              		.loc 1 962 5 view .LVU411
 964:./Library/stm32f4xx_rtc.c **** 
 1262              		.loc 1 964 3 view .LVU412
 967:./Library/stm32f4xx_rtc.c ****   {
 1263              		.loc 1 967 3 view .LVU413
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1264              		.loc 1 976 5 view .LVU414
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1265              		.loc 1 976 26 is_stmt 0 view .LVU415
 1266 0042 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 1267              	.LVL83:
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1268              		.loc 1 976 26 view .LVU416
 1269 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1270              	.LVL84:
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1271              		.loc 1 976 67 view .LVU417
 1272 0048 0404     		lsls	r4, r0, #16
 977:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1273              		.loc 1 977 26 view .LVU418
 1274 004a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1275 004c FFF7FEFF 		bl	RTC_ByteToBcd2
 1276              	.LVL85:
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1277              		.loc 1 976 74 view .LVU419
 1278 0050 44EA0024 		orr	r4, r4, r0, lsl #8
 978:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1279              		.loc 1 978 26 view .LVU420
ARM GAS  /tmp/cccsESzb.s 			page 78


 1280 0054 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1281 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 1282              	.LVL86:
 977:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1283              		.loc 1 977 74 view .LVU421
 1284 005a 0443     		orrs	r4, r4, r0
 979:./Library/stm32f4xx_rtc.c ****   }
 1285              		.loc 1 979 40 view .LVU422
 1286 005c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1287              		.loc 1 976 12 view .LVU423
 1288 005e 44EA4334 		orr	r4, r4, r3, lsl #13
 1289              	.LVL87:
 976:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1290              		.loc 1 976 12 view .LVU424
 1291 0062 DAE7     		b	.L83
 1292              	.L89:
 994:./Library/stm32f4xx_rtc.c **** 
 1293              		.loc 1 994 5 is_stmt 1 view .LVU425
 994:./Library/stm32f4xx_rtc.c **** 
 1294              		.loc 1 994 15 is_stmt 0 view .LVU426
 1295 0064 24F07F44 		bic	r4, r4, #-16777216
 1296              	.LVL88:
 994:./Library/stm32f4xx_rtc.c **** 
 1297              		.loc 1 994 15 view .LVU427
 1298 0068 24F0C004 		bic	r4, r4, #192
 994:./Library/stm32f4xx_rtc.c **** 
 1299              		.loc 1 994 13 view .LVU428
 1300 006c 074D     		ldr	r5, .L91
 1301              	.LVL89:
 994:./Library/stm32f4xx_rtc.c **** 
 1302              		.loc 1 994 13 view .LVU429
 1303 006e 6C60     		str	r4, [r5, #4]
 997:./Library/stm32f4xx_rtc.c **** 
 1304              		.loc 1 997 5 is_stmt 1 view .LVU430
 1305 0070 FFF7FEFF 		bl	RTC_ExitInitMode
 1306              	.LVL90:
1000:./Library/stm32f4xx_rtc.c ****     {
 1307              		.loc 1 1000 5 view .LVU431
1000:./Library/stm32f4xx_rtc.c ****     {
 1308              		.loc 1 1000 13 is_stmt 0 view .LVU432
 1309 0074 AB68     		ldr	r3, [r5, #8]
1000:./Library/stm32f4xx_rtc.c ****     {
 1310              		.loc 1 1000 8 view .LVU433
 1311 0076 13F0200F 		tst	r3, #32
 1312 007a 01D0     		beq	.L90
1013:./Library/stm32f4xx_rtc.c ****     }
 1313              		.loc 1 1013 14 view .LVU434
 1314 007c 0120     		movs	r0, #1
 1315 007e D4E7     		b	.L85
 1316              	.L90:
1002:./Library/stm32f4xx_rtc.c ****     {
 1317              		.loc 1 1002 5 is_stmt 1 view .LVU435
1002:./Library/stm32f4xx_rtc.c ****     {
 1318              		.loc 1 1002 8 is_stmt 0 view .LVU436
 1319 0080 FFF7FEFF 		bl	RTC_WaitForSynchro
 1320              	.LVL91:
ARM GAS  /tmp/cccsESzb.s 			page 79


1002:./Library/stm32f4xx_rtc.c ****     {
 1321              		.loc 1 1002 7 view .LVU437
 1322 0084 0028     		cmp	r0, #0
 1323 0086 D0D0     		beq	.L85
1008:./Library/stm32f4xx_rtc.c ****     }
 1324              		.loc 1 1008 14 view .LVU438
 1325 0088 0120     		movs	r0, #1
 1326 008a CEE7     		b	.L85
 1327              	.L92:
 1328              		.align	2
 1329              	.L91:
 1330 008c 00280040 		.word	1073752064
 1331              		.cfi_endproc
 1332              	.LFE136:
 1334              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1335              		.align	1
 1336              		.global	RTC_DateStructInit
 1337              		.syntax unified
 1338              		.thumb
 1339              		.thumb_func
 1341              	RTC_DateStructInit:
 1342              	.LVL92:
 1343              	.LFB137:
1030:./Library/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
 1344              		.loc 1 1030 1 is_stmt 1 view -0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 0
 1347              		@ frame_needed = 0, uses_anonymous_args = 0
 1348              		@ link register save eliminated.
1032:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1349              		.loc 1 1032 3 view .LVU440
1032:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1350              		.loc 1 1032 31 is_stmt 0 view .LVU441
 1351 0000 0123     		movs	r3, #1
 1352 0002 0370     		strb	r3, [r0]
1033:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1353              		.loc 1 1033 3 is_stmt 1 view .LVU442
1033:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1354              		.loc 1 1033 28 is_stmt 0 view .LVU443
 1355 0004 8370     		strb	r3, [r0, #2]
1034:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1356              		.loc 1 1034 3 is_stmt 1 view .LVU444
1034:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1357              		.loc 1 1034 29 is_stmt 0 view .LVU445
 1358 0006 4370     		strb	r3, [r0, #1]
1035:./Library/stm32f4xx_rtc.c **** }
 1359              		.loc 1 1035 3 is_stmt 1 view .LVU446
1035:./Library/stm32f4xx_rtc.c **** }
 1360              		.loc 1 1035 28 is_stmt 0 view .LVU447
 1361 0008 0023     		movs	r3, #0
 1362 000a C370     		strb	r3, [r0, #3]
1036:./Library/stm32f4xx_rtc.c **** 
 1363              		.loc 1 1036 1 view .LVU448
 1364 000c 7047     		bx	lr
 1365              		.cfi_endproc
 1366              	.LFE137:
 1368              		.section	.text.RTC_GetDate,"ax",%progbits
ARM GAS  /tmp/cccsESzb.s 			page 80


 1369              		.align	1
 1370              		.global	RTC_GetDate
 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1375              	RTC_GetDate:
 1376              	.LVL93:
 1377              	.LFB138:
1049:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1378              		.loc 1 1049 1 is_stmt 1 view -0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
1049:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1382              		.loc 1 1049 1 is_stmt 0 view .LVU450
 1383 0000 70B5     		push	{r4, r5, r6, lr}
 1384              	.LCFI15:
 1385              		.cfi_def_cfa_offset 16
 1386              		.cfi_offset 4, -16
 1387              		.cfi_offset 5, -12
 1388              		.cfi_offset 6, -8
 1389              		.cfi_offset 14, -4
1050:./Library/stm32f4xx_rtc.c **** 
 1390              		.loc 1 1050 3 is_stmt 1 view .LVU451
 1391              	.LVL94:
1053:./Library/stm32f4xx_rtc.c ****   
 1392              		.loc 1 1053 3 view .LVU452
1056:./Library/stm32f4xx_rtc.c **** 
 1393              		.loc 1 1056 3 view .LVU453
1056:./Library/stm32f4xx_rtc.c **** 
 1394              		.loc 1 1056 26 is_stmt 0 view .LVU454
 1395 0002 0E4B     		ldr	r3, .L97
 1396 0004 5B68     		ldr	r3, [r3, #4]
 1397              	.LVL95:
1059:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1398              		.loc 1 1059 3 is_stmt 1 view .LVU455
1059:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1399              		.loc 1 1059 30 is_stmt 0 view .LVU456
 1400 0006 C3F30742 		ubfx	r2, r3, #16, #8
1059:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1401              		.loc 1 1059 28 view .LVU457
 1402 000a CA70     		strb	r2, [r1, #3]
1060:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1403              		.loc 1 1060 3 is_stmt 1 view .LVU458
1060:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1404              		.loc 1 1060 31 is_stmt 0 view .LVU459
 1405 000c C3F30426 		ubfx	r6, r3, #8, #5
1060:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1406              		.loc 1 1060 29 view .LVU460
 1407 0010 4E70     		strb	r6, [r1, #1]
1061:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1408              		.loc 1 1061 3 is_stmt 1 view .LVU461
1061:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1409              		.loc 1 1061 30 is_stmt 0 view .LVU462
 1410 0012 03F03F05 		and	r5, r3, #63
1061:./Library/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1411              		.loc 1 1061 28 view .LVU463
ARM GAS  /tmp/cccsESzb.s 			page 81


 1412 0016 8D70     		strb	r5, [r1, #2]
1062:./Library/stm32f4xx_rtc.c **** 
 1413              		.loc 1 1062 3 is_stmt 1 view .LVU464
1062:./Library/stm32f4xx_rtc.c **** 
 1414              		.loc 1 1062 33 is_stmt 0 view .LVU465
 1415 0018 C3F34233 		ubfx	r3, r3, #13, #3
 1416              	.LVL96:
1062:./Library/stm32f4xx_rtc.c **** 
 1417              		.loc 1 1062 31 view .LVU466
 1418 001c 0B70     		strb	r3, [r1]
1065:./Library/stm32f4xx_rtc.c ****   {
 1419              		.loc 1 1065 3 is_stmt 1 view .LVU467
1065:./Library/stm32f4xx_rtc.c ****   {
 1420              		.loc 1 1065 6 is_stmt 0 view .LVU468
 1421 001e 60B9     		cbnz	r0, .L94
 1422 0020 0C46     		mov	r4, r1
1068:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1423              		.loc 1 1068 5 is_stmt 1 view .LVU469
1068:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1424              		.loc 1 1068 41 is_stmt 0 view .LVU470
 1425 0022 1046     		mov	r0, r2
 1426              	.LVL97:
1068:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1427              		.loc 1 1068 41 view .LVU471
 1428 0024 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1429              	.LVL98:
1068:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1430              		.loc 1 1068 30 view .LVU472
 1431 0028 E070     		strb	r0, [r4, #3]
1069:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1432              		.loc 1 1069 5 is_stmt 1 view .LVU473
1069:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1433              		.loc 1 1069 42 is_stmt 0 view .LVU474
 1434 002a 3046     		mov	r0, r6
 1435 002c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1436              	.LVL99:
1069:./Library/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1437              		.loc 1 1069 31 view .LVU475
 1438 0030 6070     		strb	r0, [r4, #1]
1070:./Library/stm32f4xx_rtc.c ****   }
 1439              		.loc 1 1070 5 is_stmt 1 view .LVU476
1070:./Library/stm32f4xx_rtc.c ****   }
 1440              		.loc 1 1070 41 is_stmt 0 view .LVU477
 1441 0032 2846     		mov	r0, r5
 1442 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1443              	.LVL100:
1070:./Library/stm32f4xx_rtc.c ****   }
 1444              		.loc 1 1070 30 view .LVU478
 1445 0038 A070     		strb	r0, [r4, #2]
 1446              	.LVL101:
 1447              	.L94:
1072:./Library/stm32f4xx_rtc.c **** 
 1448              		.loc 1 1072 1 view .LVU479
 1449 003a 70BD     		pop	{r4, r5, r6, pc}
 1450              	.L98:
 1451              		.align	2
 1452              	.L97:
ARM GAS  /tmp/cccsESzb.s 			page 82


 1453 003c 00280040 		.word	1073752064
 1454              		.cfi_endproc
 1455              	.LFE138:
 1457              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1458              		.align	1
 1459              		.global	RTC_SetAlarm
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1464              	RTC_SetAlarm:
 1465              	.LVL102:
 1466              	.LFB139:
1109:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1467              		.loc 1 1109 1 is_stmt 1 view -0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 0
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
1109:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1471              		.loc 1 1109 1 is_stmt 0 view .LVU481
 1472 0000 70B5     		push	{r4, r5, r6, lr}
 1473              	.LCFI16:
 1474              		.cfi_def_cfa_offset 16
 1475              		.cfi_offset 4, -16
 1476              		.cfi_offset 5, -12
 1477              		.cfi_offset 6, -8
 1478              		.cfi_offset 14, -4
 1479 0002 0D46     		mov	r5, r1
 1480 0004 1646     		mov	r6, r2
1110:./Library/stm32f4xx_rtc.c ****   
 1481              		.loc 1 1110 3 is_stmt 1 view .LVU482
 1482              	.LVL103:
1113:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
 1483              		.loc 1 1113 3 view .LVU483
1114:./Library/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
 1484              		.loc 1 1114 3 view .LVU484
1115:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
 1485              		.loc 1 1115 3 view .LVU485
1116:./Library/stm32f4xx_rtc.c **** 
 1486              		.loc 1 1116 3 view .LVU486
1118:./Library/stm32f4xx_rtc.c ****   {
 1487              		.loc 1 1118 3 view .LVU487
1118:./Library/stm32f4xx_rtc.c ****   {
 1488              		.loc 1 1118 6 is_stmt 0 view .LVU488
 1489 0006 0346     		mov	r3, r0
 1490 0008 30BB     		cbnz	r0, .L100
1120:./Library/stm32f4xx_rtc.c ****     {
 1491              		.loc 1 1120 5 is_stmt 1 view .LVU489
1120:./Library/stm32f4xx_rtc.c ****     {
 1492              		.loc 1 1120 13 is_stmt 0 view .LVU490
 1493 000a 254A     		ldr	r2, .L110
 1494              	.LVL104:
1120:./Library/stm32f4xx_rtc.c ****     {
 1495              		.loc 1 1120 13 view .LVU491
 1496 000c 9268     		ldr	r2, [r2, #8]
1120:./Library/stm32f4xx_rtc.c ****     {
 1497              		.loc 1 1120 8 view .LVU492
 1498 000e 12F0400F 		tst	r2, #64
ARM GAS  /tmp/cccsESzb.s 			page 83


 1499 0012 01D1     		bne	.L102
1127:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1500              		.loc 1 1127 7 is_stmt 1 view .LVU493
1127:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
 1501              		.loc 1 1127 46 is_stmt 0 view .LVU494
 1502 0014 0022     		movs	r2, #0
 1503 0016 F270     		strb	r2, [r6, #3]
1128:./Library/stm32f4xx_rtc.c ****     }
 1504              		.loc 1 1128 7 is_stmt 1 view .LVU495
1130:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
 1505              		.loc 1 1130 5 view .LVU496
1131:./Library/stm32f4xx_rtc.c ****     
 1506              		.loc 1 1131 5 view .LVU497
1133:./Library/stm32f4xx_rtc.c ****     {
 1507              		.loc 1 1133 5 view .LVU498
 1508              	.LVL105:
 1509              	.L102:
1167:./Library/stm32f4xx_rtc.c ****     }    
 1510              		.loc 1 1167 7 view .LVU499
1172:./Library/stm32f4xx_rtc.c ****   {
 1511              		.loc 1 1172 3 view .LVU500
1172:./Library/stm32f4xx_rtc.c ****   {
 1512              		.loc 1 1172 6 is_stmt 0 view .LVU501
 1513 0018 33B3     		cbz	r3, .L104
1174:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1514              		.loc 1 1174 5 is_stmt 1 view .LVU502
1174:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1515              		.loc 1 1174 57 is_stmt 0 view .LVU503
 1516 001a 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
1175:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1517              		.loc 1 1175 57 view .LVU504
 1518 001c 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1519              	.LVL106:
1175:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1520              		.loc 1 1175 71 view .LVU505
 1521 001e 0002     		lsls	r0, r0, #8
1174:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1522              		.loc 1 1174 76 view .LVU506
 1523 0020 40EA0340 		orr	r0, r0, r3, lsl #16
1176:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1524              		.loc 1 1176 56 view .LVU507
 1525 0024 B378     		ldrb	r3, [r6, #2]	@ zero_extendqisi2
1175:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1526              		.loc 1 1175 77 view .LVU508
 1527 0026 1843     		orrs	r0, r0, r3
1177:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1528              		.loc 1 1177 57 view .LVU509
 1529 0028 F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
1176:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1530              		.loc 1 1176 70 view .LVU510
 1531 002a 40EA0340 		orr	r0, r0, r3, lsl #16
1178:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1532              		.loc 1 1178 42 view .LVU511
 1533 002e 337B     		ldrb	r3, [r6, #12]	@ zero_extendqisi2
1177:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1534              		.loc 1 1177 74 view .LVU512
 1535 0030 40EA0360 		orr	r0, r0, r3, lsl #24
ARM GAS  /tmp/cccsESzb.s 			page 84


1179:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1536              		.loc 1 1179 41 view .LVU513
 1537 0034 B368     		ldr	r3, [r6, #8]
1178:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1538              		.loc 1 1178 73 view .LVU514
 1539 0036 1843     		orrs	r0, r0, r3
1180:./Library/stm32f4xx_rtc.c ****   }  
 1540              		.loc 1 1180 41 view .LVU515
 1541 0038 7368     		ldr	r3, [r6, #4]
1174:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1542              		.loc 1 1174 12 view .LVU516
 1543 003a 1843     		orrs	r0, r0, r3
 1544              	.LVL107:
 1545              	.L105:
1194:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1546              		.loc 1 1194 3 is_stmt 1 view .LVU517
1194:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1547              		.loc 1 1194 12 is_stmt 0 view .LVU518
 1548 003c 184B     		ldr	r3, .L110
 1549 003e CA22     		movs	r2, #202
 1550 0040 5A62     		str	r2, [r3, #36]
1195:./Library/stm32f4xx_rtc.c **** 
 1551              		.loc 1 1195 3 is_stmt 1 view .LVU519
1195:./Library/stm32f4xx_rtc.c **** 
 1552              		.loc 1 1195 12 is_stmt 0 view .LVU520
 1553 0042 5322     		movs	r2, #83
 1554 0044 5A62     		str	r2, [r3, #36]
1198:./Library/stm32f4xx_rtc.c ****   {
 1555              		.loc 1 1198 3 is_stmt 1 view .LVU521
1198:./Library/stm32f4xx_rtc.c ****   {
 1556              		.loc 1 1198 6 is_stmt 0 view .LVU522
 1557 0046 B5F5807F 		cmp	r5, #256
 1558 004a 27D0     		beq	.L109
1204:./Library/stm32f4xx_rtc.c ****   }
 1559              		.loc 1 1204 5 is_stmt 1 view .LVU523
1204:./Library/stm32f4xx_rtc.c ****   }
 1560              		.loc 1 1204 17 is_stmt 0 view .LVU524
 1561 004c 144B     		ldr	r3, .L110
 1562 004e 1862     		str	r0, [r3, #32]
 1563              	.L107:
1208:./Library/stm32f4xx_rtc.c **** }
 1564              		.loc 1 1208 3 is_stmt 1 view .LVU525
1208:./Library/stm32f4xx_rtc.c **** }
 1565              		.loc 1 1208 12 is_stmt 0 view .LVU526
 1566 0050 134B     		ldr	r3, .L110
 1567 0052 FF22     		movs	r2, #255
 1568 0054 5A62     		str	r2, [r3, #36]
1209:./Library/stm32f4xx_rtc.c **** 
 1569              		.loc 1 1209 1 view .LVU527
 1570 0056 70BD     		pop	{r4, r5, r6, pc}
 1571              	.LVL108:
 1572              	.L100:
1144:./Library/stm32f4xx_rtc.c ****     {
 1573              		.loc 1 1144 5 is_stmt 1 view .LVU528
1144:./Library/stm32f4xx_rtc.c ****     {
 1574              		.loc 1 1144 13 is_stmt 0 view .LVU529
 1575 0058 114A     		ldr	r2, .L110
ARM GAS  /tmp/cccsESzb.s 			page 85


 1576              	.LVL109:
1144:./Library/stm32f4xx_rtc.c ****     {
 1577              		.loc 1 1144 13 view .LVU530
 1578 005a 9268     		ldr	r2, [r2, #8]
1144:./Library/stm32f4xx_rtc.c ****     {
 1579              		.loc 1 1144 8 view .LVU531
 1580 005c 12F0400F 		tst	r2, #64
 1581 0060 DAD1     		bne	.L102
1152:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1582              		.loc 1 1152 7 is_stmt 1 view .LVU532
1152:./Library/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1583              		.loc 1 1152 46 is_stmt 0 view .LVU533
 1584 0062 0022     		movs	r2, #0
 1585 0064 F270     		strb	r2, [r6, #3]
 1586              	.LVL110:
1153:./Library/stm32f4xx_rtc.c ****     }
 1587              		.loc 1 1153 7 is_stmt 1 view .LVU534
1156:./Library/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
 1588              		.loc 1 1156 5 view .LVU535
1157:./Library/stm32f4xx_rtc.c ****     
 1589              		.loc 1 1157 5 view .LVU536
1159:./Library/stm32f4xx_rtc.c ****     {
 1590              		.loc 1 1159 5 view .LVU537
 1591 0066 D7E7     		b	.L102
 1592              	.L104:
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1593              		.loc 1 1184 5 view .LVU538
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1594              		.loc 1 1184 26 is_stmt 0 view .LVU539
 1595 0068 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 1596              	.LVL111:
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1597              		.loc 1 1184 26 view .LVU540
 1598 006a FFF7FEFF 		bl	RTC_ByteToBcd2
 1599              	.LVL112:
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1600              		.loc 1 1184 83 view .LVU541
 1601 006e 0404     		lsls	r4, r0, #16
1185:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1602              		.loc 1 1185 26 view .LVU542
 1603 0070 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1604 0072 FFF7FEFF 		bl	RTC_ByteToBcd2
 1605              	.LVL113:
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1606              		.loc 1 1184 90 view .LVU543
 1607 0076 44EA0024 		orr	r4, r4, r0, lsl #8
1186:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1608              		.loc 1 1186 26 view .LVU544
 1609 007a B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1610 007c FFF7FEFF 		bl	RTC_ByteToBcd2
 1611              	.LVL114:
1185:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1612              		.loc 1 1185 91 view .LVU545
 1613 0080 0443     		orrs	r4, r4, r0
1187:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1614              		.loc 1 1187 57 view .LVU546
 1615 0082 F378     		ldrb	r3, [r6, #3]	@ zero_extendqisi2
ARM GAS  /tmp/cccsESzb.s 			page 86


1186:./Library/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1616              		.loc 1 1186 86 view .LVU547
 1617 0084 44EA0344 		orr	r4, r4, r3, lsl #16
1188:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1618              		.loc 1 1188 26 view .LVU548
 1619 0088 307B     		ldrb	r0, [r6, #12]	@ zero_extendqisi2
 1620 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1621              	.LVL115:
1187:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1622              		.loc 1 1187 74 view .LVU549
 1623 008e 44EA0060 		orr	r0, r4, r0, lsl #24
1189:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1624              		.loc 1 1189 41 view .LVU550
 1625 0092 B368     		ldr	r3, [r6, #8]
1188:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1626              		.loc 1 1188 87 view .LVU551
 1627 0094 1843     		orrs	r0, r0, r3
1190:./Library/stm32f4xx_rtc.c ****   } 
 1628              		.loc 1 1190 41 view .LVU552
 1629 0096 7368     		ldr	r3, [r6, #4]
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1630              		.loc 1 1184 12 view .LVU553
 1631 0098 1843     		orrs	r0, r0, r3
 1632              	.LVL116:
1184:./Library/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1633              		.loc 1 1184 12 view .LVU554
 1634 009a CFE7     		b	.L105
 1635              	.L109:
1200:./Library/stm32f4xx_rtc.c ****   }
 1636              		.loc 1 1200 5 is_stmt 1 view .LVU555
1200:./Library/stm32f4xx_rtc.c ****   }
 1637              		.loc 1 1200 17 is_stmt 0 view .LVU556
 1638 009c D861     		str	r0, [r3, #28]
 1639 009e D7E7     		b	.L107
 1640              	.L111:
 1641              		.align	2
 1642              	.L110:
 1643 00a0 00280040 		.word	1073752064
 1644              		.cfi_endproc
 1645              	.LFE139:
 1647              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1648              		.align	1
 1649              		.global	RTC_AlarmStructInit
 1650              		.syntax unified
 1651              		.thumb
 1652              		.thumb_func
 1654              	RTC_AlarmStructInit:
 1655              	.LVL117:
 1656              	.LFB140:
1220:./Library/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
 1657              		.loc 1 1220 1 is_stmt 1 view -0
 1658              		.cfi_startproc
 1659              		@ args = 0, pretend = 0, frame = 0
 1660              		@ frame_needed = 0, uses_anonymous_args = 0
 1661              		@ link register save eliminated.
1222:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1662              		.loc 1 1222 3 view .LVU558
ARM GAS  /tmp/cccsESzb.s 			page 87


1222:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1663              		.loc 1 1222 42 is_stmt 0 view .LVU559
 1664 0000 0023     		movs	r3, #0
 1665 0002 C370     		strb	r3, [r0, #3]
1223:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1666              		.loc 1 1223 3 is_stmt 1 view .LVU560
1223:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1667              		.loc 1 1223 44 is_stmt 0 view .LVU561
 1668 0004 0370     		strb	r3, [r0]
1224:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1669              		.loc 1 1224 3 is_stmt 1 view .LVU562
1224:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1670              		.loc 1 1224 46 is_stmt 0 view .LVU563
 1671 0006 4370     		strb	r3, [r0, #1]
1225:./Library/stm32f4xx_rtc.c **** 
 1672              		.loc 1 1225 3 is_stmt 1 view .LVU564
1225:./Library/stm32f4xx_rtc.c **** 
 1673              		.loc 1 1225 46 is_stmt 0 view .LVU565
 1674 0008 8370     		strb	r3, [r0, #2]
1228:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1675              		.loc 1 1228 3 is_stmt 1 view .LVU566
1228:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1676              		.loc 1 1228 44 is_stmt 0 view .LVU567
 1677 000a 8360     		str	r3, [r0, #8]
1229:./Library/stm32f4xx_rtc.c **** 
 1678              		.loc 1 1229 3 is_stmt 1 view .LVU568
1229:./Library/stm32f4xx_rtc.c **** 
 1679              		.loc 1 1229 41 is_stmt 0 view .LVU569
 1680 000c 0122     		movs	r2, #1
 1681 000e 0273     		strb	r2, [r0, #12]
1232:./Library/stm32f4xx_rtc.c **** }
 1682              		.loc 1 1232 3 is_stmt 1 view .LVU570
1232:./Library/stm32f4xx_rtc.c **** }
 1683              		.loc 1 1232 34 is_stmt 0 view .LVU571
 1684 0010 4360     		str	r3, [r0, #4]
1233:./Library/stm32f4xx_rtc.c **** 
 1685              		.loc 1 1233 1 view .LVU572
 1686 0012 7047     		bx	lr
 1687              		.cfi_endproc
 1688              	.LFE140:
 1690              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1691              		.align	1
 1692              		.global	RTC_GetAlarm
 1693              		.syntax unified
 1694              		.thumb
 1695              		.thumb_func
 1697              	RTC_GetAlarm:
 1698              	.LVL118:
 1699              	.LFB141:
1250:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1700              		.loc 1 1250 1 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
1250:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1704              		.loc 1 1250 1 is_stmt 0 view .LVU574
 1705 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/cccsESzb.s 			page 88


 1706              	.LCFI17:
 1707              		.cfi_def_cfa_offset 24
 1708              		.cfi_offset 4, -24
 1709              		.cfi_offset 5, -20
 1710              		.cfi_offset 6, -16
 1711              		.cfi_offset 7, -12
 1712              		.cfi_offset 8, -8
 1713              		.cfi_offset 14, -4
 1714 0004 0546     		mov	r5, r0
 1715 0006 1446     		mov	r4, r2
1251:./Library/stm32f4xx_rtc.c **** 
 1716              		.loc 1 1251 3 is_stmt 1 view .LVU575
 1717              	.LVL119:
1254:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
 1718              		.loc 1 1254 3 view .LVU576
1255:./Library/stm32f4xx_rtc.c **** 
 1719              		.loc 1 1255 3 view .LVU577
1258:./Library/stm32f4xx_rtc.c ****   {
 1720              		.loc 1 1258 3 view .LVU578
1258:./Library/stm32f4xx_rtc.c ****   {
 1721              		.loc 1 1258 6 is_stmt 0 view .LVU579
 1722 0008 B1F5807F 		cmp	r1, #256
 1723 000c 2BD0     		beq	.L118
1264:./Library/stm32f4xx_rtc.c ****   }
 1724              		.loc 1 1264 5 is_stmt 1 view .LVU580
1264:./Library/stm32f4xx_rtc.c ****   }
 1725              		.loc 1 1264 12 is_stmt 0 view .LVU581
 1726 000e 174B     		ldr	r3, .L119
 1727 0010 1B6A     		ldr	r3, [r3, #32]
 1728              	.LVL120:
 1729              	.L115:
1268:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1730              		.loc 1 1268 3 is_stmt 1 view .LVU582
1268:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1731              		.loc 1 1268 46 is_stmt 0 view .LVU583
 1732 0012 C3F30742 		ubfx	r2, r3, #16, #8
 1733              	.LVL121:
1268:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1734              		.loc 1 1268 46 view .LVU584
 1735 0016 C3F30540 		ubfx	r0, r3, #16, #6
 1736              	.LVL122:
1268:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1737              		.loc 1 1268 44 view .LVU585
 1738 001a 2070     		strb	r0, [r4]
1270:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1739              		.loc 1 1270 3 is_stmt 1 view .LVU586
1270:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1740              		.loc 1 1270 48 is_stmt 0 view .LVU587
 1741 001c C3F30627 		ubfx	r7, r3, #8, #7
1270:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1742              		.loc 1 1270 46 view .LVU588
 1743 0020 6770     		strb	r7, [r4, #1]
1272:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1744              		.loc 1 1272 3 is_stmt 1 view .LVU589
1272:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1745              		.loc 1 1272 48 is_stmt 0 view .LVU590
 1746 0022 03F07F06 		and	r6, r3, #127
ARM GAS  /tmp/cccsESzb.s 			page 89


1272:./Library/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1747              		.loc 1 1272 46 view .LVU591
 1748 0026 A670     		strb	r6, [r4, #2]
1274:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1749              		.loc 1 1274 3 is_stmt 1 view .LVU592
1274:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1750              		.loc 1 1274 44 is_stmt 0 view .LVU593
 1751 0028 02F04002 		and	r2, r2, #64
1274:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1752              		.loc 1 1274 42 view .LVU594
 1753 002c E270     		strb	r2, [r4, #3]
1275:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1754              		.loc 1 1275 3 is_stmt 1 view .LVU595
1275:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1755              		.loc 1 1275 43 is_stmt 0 view .LVU596
 1756 002e C3F30568 		ubfx	r8, r3, #24, #6
1275:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1757              		.loc 1 1275 41 view .LVU597
 1758 0032 84F80C80 		strb	r8, [r4, #12]
1276:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1759              		.loc 1 1276 3 is_stmt 1 view .LVU598
1276:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1760              		.loc 1 1276 46 is_stmt 0 view .LVU599
 1761 0036 03F08042 		and	r2, r3, #1073741824
1276:./Library/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1762              		.loc 1 1276 44 view .LVU600
 1763 003a A260     		str	r2, [r4, #8]
1277:./Library/stm32f4xx_rtc.c **** 
 1764              		.loc 1 1277 3 is_stmt 1 view .LVU601
1277:./Library/stm32f4xx_rtc.c **** 
 1765              		.loc 1 1277 36 is_stmt 0 view .LVU602
 1766 003c 03F08033 		and	r3, r3, #-2139062144
 1767              	.LVL123:
1277:./Library/stm32f4xx_rtc.c **** 
 1768              		.loc 1 1277 34 view .LVU603
 1769 0040 6360     		str	r3, [r4, #4]
1279:./Library/stm32f4xx_rtc.c ****   {
 1770              		.loc 1 1279 3 is_stmt 1 view .LVU604
1279:./Library/stm32f4xx_rtc.c ****   {
 1771              		.loc 1 1279 6 is_stmt 0 view .LVU605
 1772 0042 75B9     		cbnz	r5, .L113
1281:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1773              		.loc 1 1281 5 is_stmt 1 view .LVU606
1281:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1774              		.loc 1 1281 48 is_stmt 0 view .LVU607
 1775 0044 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1776              	.LVL124:
1281:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1777              		.loc 1 1281 46 view .LVU608
 1778 0048 2070     		strb	r0, [r4]
1283:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1779              		.loc 1 1283 5 is_stmt 1 view .LVU609
1283:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1780              		.loc 1 1283 50 is_stmt 0 view .LVU610
 1781 004a 3846     		mov	r0, r7
 1782 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1783              	.LVL125:
ARM GAS  /tmp/cccsESzb.s 			page 90


1283:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1784              		.loc 1 1283 48 view .LVU611
 1785 0050 6070     		strb	r0, [r4, #1]
1285:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1786              		.loc 1 1285 5 is_stmt 1 view .LVU612
1285:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1787              		.loc 1 1285 50 is_stmt 0 view .LVU613
 1788 0052 3046     		mov	r0, r6
 1789 0054 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1790              	.LVL126:
1285:./Library/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1791              		.loc 1 1285 48 view .LVU614
 1792 0058 A070     		strb	r0, [r4, #2]
1287:./Library/stm32f4xx_rtc.c ****   }  
 1793              		.loc 1 1287 5 is_stmt 1 view .LVU615
1287:./Library/stm32f4xx_rtc.c ****   }  
 1794              		.loc 1 1287 45 is_stmt 0 view .LVU616
 1795 005a 4046     		mov	r0, r8
 1796 005c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1797              	.LVL127:
1287:./Library/stm32f4xx_rtc.c ****   }  
 1798              		.loc 1 1287 43 view .LVU617
 1799 0060 2073     		strb	r0, [r4, #12]
 1800              	.L113:
1289:./Library/stm32f4xx_rtc.c **** 
 1801              		.loc 1 1289 1 view .LVU618
 1802 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1803              	.LVL128:
 1804              	.L118:
1260:./Library/stm32f4xx_rtc.c ****   }
 1805              		.loc 1 1260 5 is_stmt 1 view .LVU619
1260:./Library/stm32f4xx_rtc.c ****   }
 1806              		.loc 1 1260 12 is_stmt 0 view .LVU620
 1807 0066 014B     		ldr	r3, .L119
 1808 0068 DB69     		ldr	r3, [r3, #28]
 1809              	.LVL129:
1260:./Library/stm32f4xx_rtc.c ****   }
 1810              		.loc 1 1260 12 view .LVU621
 1811 006a D2E7     		b	.L115
 1812              	.L120:
 1813              		.align	2
 1814              	.L119:
 1815 006c 00280040 		.word	1073752064
 1816              		.cfi_endproc
 1817              	.LFE141:
 1819              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1820              		.align	1
 1821              		.global	RTC_AlarmCmd
 1822              		.syntax unified
 1823              		.thumb
 1824              		.thumb_func
 1826              	RTC_AlarmCmd:
 1827              	.LVL130:
 1828              	.LFB142:
1304:./Library/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1829              		.loc 1 1304 1 is_stmt 1 view -0
 1830              		.cfi_startproc
ARM GAS  /tmp/cccsESzb.s 			page 91


 1831              		@ args = 0, pretend = 0, frame = 8
 1832              		@ frame_needed = 0, uses_anonymous_args = 0
 1833              		@ link register save eliminated.
1304:./Library/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1834              		.loc 1 1304 1 is_stmt 0 view .LVU623
 1835 0000 82B0     		sub	sp, sp, #8
 1836              	.LCFI18:
 1837              		.cfi_def_cfa_offset 8
1305:./Library/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1838              		.loc 1 1305 3 is_stmt 1 view .LVU624
1305:./Library/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1839              		.loc 1 1305 17 is_stmt 0 view .LVU625
 1840 0002 0023     		movs	r3, #0
 1841 0004 0193     		str	r3, [sp, #4]
1306:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1842              		.loc 1 1306 3 is_stmt 1 view .LVU626
 1843              	.LVL131:
1307:./Library/stm32f4xx_rtc.c ****     
 1844              		.loc 1 1307 3 view .LVU627
1310:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1845              		.loc 1 1310 3 view .LVU628
1311:./Library/stm32f4xx_rtc.c **** 
 1846              		.loc 1 1311 3 view .LVU629
1314:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1847              		.loc 1 1314 3 view .LVU630
1314:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1848              		.loc 1 1314 12 is_stmt 0 view .LVU631
 1849 0006 164B     		ldr	r3, .L128
 1850 0008 CA22     		movs	r2, #202
 1851 000a 5A62     		str	r2, [r3, #36]
1315:./Library/stm32f4xx_rtc.c **** 
 1852              		.loc 1 1315 3 is_stmt 1 view .LVU632
1315:./Library/stm32f4xx_rtc.c **** 
 1853              		.loc 1 1315 12 is_stmt 0 view .LVU633
 1854 000c 5322     		movs	r2, #83
 1855 000e 5A62     		str	r2, [r3, #36]
1318:./Library/stm32f4xx_rtc.c ****   {
 1856              		.loc 1 1318 3 is_stmt 1 view .LVU634
1318:./Library/stm32f4xx_rtc.c ****   {
 1857              		.loc 1 1318 6 is_stmt 0 view .LVU635
 1858 0010 49B1     		cbz	r1, .L122
1320:./Library/stm32f4xx_rtc.c **** 
 1859              		.loc 1 1320 5 is_stmt 1 view .LVU636
1320:./Library/stm32f4xx_rtc.c **** 
 1860              		.loc 1 1320 8 is_stmt 0 view .LVU637
 1861 0012 1A46     		mov	r2, r3
 1862 0014 9B68     		ldr	r3, [r3, #8]
1320:./Library/stm32f4xx_rtc.c **** 
 1863              		.loc 1 1320 13 view .LVU638
 1864 0016 0343     		orrs	r3, r3, r0
 1865 0018 9360     		str	r3, [r2, #8]
1322:./Library/stm32f4xx_rtc.c ****   }
 1866              		.loc 1 1322 5 is_stmt 1 view .LVU639
 1867              	.LVL132:
1322:./Library/stm32f4xx_rtc.c ****   }
 1868              		.loc 1 1322 12 is_stmt 0 view .LVU640
 1869 001a 0120     		movs	r0, #1
ARM GAS  /tmp/cccsESzb.s 			page 92


 1870              	.LVL133:
 1871              	.L123:
1347:./Library/stm32f4xx_rtc.c ****   
 1872              		.loc 1 1347 3 is_stmt 1 view .LVU641
1347:./Library/stm32f4xx_rtc.c ****   
 1873              		.loc 1 1347 12 is_stmt 0 view .LVU642
 1874 001c 104B     		ldr	r3, .L128
 1875 001e FF22     		movs	r2, #255
 1876 0020 5A62     		str	r2, [r3, #36]
1349:./Library/stm32f4xx_rtc.c **** }
 1877              		.loc 1 1349 3 is_stmt 1 view .LVU643
1350:./Library/stm32f4xx_rtc.c **** 
 1878              		.loc 1 1350 1 is_stmt 0 view .LVU644
 1879 0022 02B0     		add	sp, sp, #8
 1880              	.LCFI19:
 1881              		.cfi_remember_state
 1882              		.cfi_def_cfa_offset 0
 1883              		@ sp needed
 1884 0024 7047     		bx	lr
 1885              	.LVL134:
 1886              	.L122:
 1887              	.LCFI20:
 1888              		.cfi_restore_state
1350:./Library/stm32f4xx_rtc.c **** 
 1889              		.loc 1 1350 1 view .LVU645
 1890 0026 8C46     		mov	ip, r1
1327:./Library/stm32f4xx_rtc.c ****    
 1891              		.loc 1 1327 5 is_stmt 1 view .LVU646
1327:./Library/stm32f4xx_rtc.c ****    
 1892              		.loc 1 1327 8 is_stmt 0 view .LVU647
 1893 0028 0D4A     		ldr	r2, .L128
 1894 002a 9368     		ldr	r3, [r2, #8]
1327:./Library/stm32f4xx_rtc.c ****    
 1895              		.loc 1 1327 13 view .LVU648
 1896 002c 23EA0003 		bic	r3, r3, r0
 1897 0030 9360     		str	r3, [r2, #8]
 1898              	.LVL135:
 1899              	.L125:
1330:./Library/stm32f4xx_rtc.c ****     {
 1900              		.loc 1 1330 5 is_stmt 1 discriminator 2 view .LVU649
1332:./Library/stm32f4xx_rtc.c ****       alarmcounter++;  
 1901              		.loc 1 1332 7 discriminator 2 view .LVU650
1332:./Library/stm32f4xx_rtc.c ****       alarmcounter++;  
 1902              		.loc 1 1332 24 is_stmt 0 discriminator 2 view .LVU651
 1903 0032 0B4B     		ldr	r3, .L128
 1904 0034 DA68     		ldr	r2, [r3, #12]
1332:./Library/stm32f4xx_rtc.c ****       alarmcounter++;  
 1905              		.loc 1 1332 43 discriminator 2 view .LVU652
 1906 0036 010A     		lsrs	r1, r0, #8
1332:./Library/stm32f4xx_rtc.c ****       alarmcounter++;  
 1907              		.loc 1 1332 19 discriminator 2 view .LVU653
 1908 0038 02EA1022 		and	r2, r2, r0, lsr #8
 1909              	.LVL136:
1333:./Library/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1910              		.loc 1 1333 7 is_stmt 1 discriminator 2 view .LVU654
1333:./Library/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1911              		.loc 1 1333 19 is_stmt 0 discriminator 2 view .LVU655
ARM GAS  /tmp/cccsESzb.s 			page 93


 1912 003c 019B     		ldr	r3, [sp, #4]
 1913 003e 0133     		adds	r3, r3, #1
 1914 0040 0193     		str	r3, [sp, #4]
1334:./Library/stm32f4xx_rtc.c ****     
 1915              		.loc 1 1334 48 is_stmt 1 discriminator 2 view .LVU656
1334:./Library/stm32f4xx_rtc.c ****     
 1916              		.loc 1 1334 27 is_stmt 0 discriminator 2 view .LVU657
 1917 0042 019B     		ldr	r3, [sp, #4]
1334:./Library/stm32f4xx_rtc.c ****     
 1918              		.loc 1 1334 48 discriminator 2 view .LVU658
 1919 0044 B3F5803F 		cmp	r3, #65536
 1920 0048 01D0     		beq	.L124
1334:./Library/stm32f4xx_rtc.c ****     
 1921              		.loc 1 1334 48 discriminator 1 view .LVU659
 1922 004a 002A     		cmp	r2, #0
 1923 004c F1D0     		beq	.L125
 1924              	.L124:
1336:./Library/stm32f4xx_rtc.c ****     {
 1925              		.loc 1 1336 5 is_stmt 1 view .LVU660
1336:./Library/stm32f4xx_rtc.c ****     {
 1926              		.loc 1 1336 13 is_stmt 0 view .LVU661
 1927 004e 044B     		ldr	r3, .L128
 1928 0050 DB68     		ldr	r3, [r3, #12]
1336:./Library/stm32f4xx_rtc.c ****     {
 1929              		.loc 1 1336 8 view .LVU662
 1930 0052 1942     		tst	r1, r3
 1931 0054 01D1     		bne	.L126
1338:./Library/stm32f4xx_rtc.c ****     } 
 1932              		.loc 1 1338 14 view .LVU663
 1933 0056 6046     		mov	r0, ip
 1934              	.LVL137:
1338:./Library/stm32f4xx_rtc.c ****     } 
 1935              		.loc 1 1338 14 view .LVU664
 1936 0058 E0E7     		b	.L123
 1937              	.LVL138:
 1938              	.L126:
1342:./Library/stm32f4xx_rtc.c ****     }        
 1939              		.loc 1 1342 14 view .LVU665
 1940 005a 0120     		movs	r0, #1
 1941              	.LVL139:
1342:./Library/stm32f4xx_rtc.c ****     }        
 1942              		.loc 1 1342 14 view .LVU666
 1943 005c DEE7     		b	.L123
 1944              	.L129:
 1945 005e 00BF     		.align	2
 1946              	.L128:
 1947 0060 00280040 		.word	1073752064
 1948              		.cfi_endproc
 1949              	.LFE142:
 1951              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1952              		.align	1
 1953              		.global	RTC_AlarmSubSecondConfig
 1954              		.syntax unified
 1955              		.thumb
 1956              		.thumb_func
 1958              	RTC_AlarmSubSecondConfig:
 1959              	.LVL140:
ARM GAS  /tmp/cccsESzb.s 			page 94


 1960              	.LFB143:
1398:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1961              		.loc 1 1398 1 is_stmt 1 view -0
 1962              		.cfi_startproc
 1963              		@ args = 0, pretend = 0, frame = 0
 1964              		@ frame_needed = 0, uses_anonymous_args = 0
 1965              		@ link register save eliminated.
1398:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1966              		.loc 1 1398 1 is_stmt 0 view .LVU668
 1967 0000 10B4     		push	{r4}
 1968              	.LCFI21:
 1969              		.cfi_def_cfa_offset 4
 1970              		.cfi_offset 4, -4
1399:./Library/stm32f4xx_rtc.c **** 
 1971              		.loc 1 1399 3 is_stmt 1 view .LVU669
 1972              	.LVL141:
1402:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
 1973              		.loc 1 1402 3 view .LVU670
1403:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
 1974              		.loc 1 1403 3 view .LVU671
1404:./Library/stm32f4xx_rtc.c ****   
 1975              		.loc 1 1404 3 view .LVU672
1407:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1976              		.loc 1 1407 3 view .LVU673
1407:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1977              		.loc 1 1407 12 is_stmt 0 view .LVU674
 1978 0002 094B     		ldr	r3, .L135
 1979 0004 CA24     		movs	r4, #202
 1980 0006 5C62     		str	r4, [r3, #36]
1408:./Library/stm32f4xx_rtc.c ****   
 1981              		.loc 1 1408 3 is_stmt 1 view .LVU675
1408:./Library/stm32f4xx_rtc.c ****   
 1982              		.loc 1 1408 12 is_stmt 0 view .LVU676
 1983 0008 5324     		movs	r4, #83
 1984 000a 5C62     		str	r4, [r3, #36]
1411:./Library/stm32f4xx_rtc.c ****   
 1985              		.loc 1 1411 3 is_stmt 1 view .LVU677
1411:./Library/stm32f4xx_rtc.c ****   
 1986              		.loc 1 1411 10 is_stmt 0 view .LVU678
 1987 000c 1143     		orrs	r1, r1, r2
 1988              	.LVL142:
1413:./Library/stm32f4xx_rtc.c ****   {
 1989              		.loc 1 1413 3 is_stmt 1 view .LVU679
1413:./Library/stm32f4xx_rtc.c ****   {
 1990              		.loc 1 1413 6 is_stmt 0 view .LVU680
 1991 000e B0F5807F 		cmp	r0, #256
 1992 0012 07D0     		beq	.L134
1421:./Library/stm32f4xx_rtc.c ****   }
 1993              		.loc 1 1421 5 is_stmt 1 view .LVU681
1421:./Library/stm32f4xx_rtc.c ****   }
 1994              		.loc 1 1421 19 is_stmt 0 view .LVU682
 1995 0014 044B     		ldr	r3, .L135
 1996 0016 9964     		str	r1, [r3, #72]
 1997              	.L132:
1425:./Library/stm32f4xx_rtc.c **** 
 1998              		.loc 1 1425 3 is_stmt 1 view .LVU683
1425:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 95


 1999              		.loc 1 1425 12 is_stmt 0 view .LVU684
 2000 0018 034B     		ldr	r3, .L135
 2001 001a FF22     		movs	r2, #255
 2002              	.LVL143:
1425:./Library/stm32f4xx_rtc.c **** 
 2003              		.loc 1 1425 12 view .LVU685
 2004 001c 5A62     		str	r2, [r3, #36]
1427:./Library/stm32f4xx_rtc.c **** 
 2005              		.loc 1 1427 1 view .LVU686
 2006 001e 5DF8044B 		ldr	r4, [sp], #4
 2007              	.LCFI22:
 2008              		.cfi_remember_state
 2009              		.cfi_restore 4
 2010              		.cfi_def_cfa_offset 0
 2011 0022 7047     		bx	lr
 2012              	.LVL144:
 2013              	.L134:
 2014              	.LCFI23:
 2015              		.cfi_restore_state
1416:./Library/stm32f4xx_rtc.c ****   }
 2016              		.loc 1 1416 5 is_stmt 1 view .LVU687
1416:./Library/stm32f4xx_rtc.c ****   }
 2017              		.loc 1 1416 19 is_stmt 0 view .LVU688
 2018 0024 5964     		str	r1, [r3, #68]
 2019 0026 F7E7     		b	.L132
 2020              	.L136:
 2021              		.align	2
 2022              	.L135:
 2023 0028 00280040 		.word	1073752064
 2024              		.cfi_endproc
 2025              	.LFE143:
 2027              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2028              		.align	1
 2029              		.global	RTC_GetAlarmSubSecond
 2030              		.syntax unified
 2031              		.thumb
 2032              		.thumb_func
 2034              	RTC_GetAlarmSubSecond:
 2035              	.LVL145:
 2036              	.LFB144:
1439:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2037              		.loc 1 1439 1 is_stmt 1 view -0
 2038              		.cfi_startproc
 2039              		@ args = 0, pretend = 0, frame = 0
 2040              		@ frame_needed = 0, uses_anonymous_args = 0
 2041              		@ link register save eliminated.
1440:./Library/stm32f4xx_rtc.c ****   
 2042              		.loc 1 1440 3 view .LVU690
1443:./Library/stm32f4xx_rtc.c ****   {
 2043              		.loc 1 1443 3 view .LVU691
1443:./Library/stm32f4xx_rtc.c ****   {
 2044              		.loc 1 1443 6 is_stmt 0 view .LVU692
 2045 0000 B0F5807F 		cmp	r0, #256
 2046 0004 04D0     		beq	.L140
1449:./Library/stm32f4xx_rtc.c ****   } 
 2047              		.loc 1 1449 5 is_stmt 1 view .LVU693
1449:./Library/stm32f4xx_rtc.c ****   } 
ARM GAS  /tmp/cccsESzb.s 			page 96


 2048              		.loc 1 1449 29 is_stmt 0 view .LVU694
 2049 0006 054B     		ldr	r3, .L141
 2050 0008 986C     		ldr	r0, [r3, #72]
 2051              	.LVL146:
1449:./Library/stm32f4xx_rtc.c ****   } 
 2052              		.loc 1 1449 12 view .LVU695
 2053 000a C0F30E00 		ubfx	r0, r0, #0, #15
 2054              	.LVL147:
1452:./Library/stm32f4xx_rtc.c **** }
 2055              		.loc 1 1452 3 is_stmt 1 view .LVU696
1453:./Library/stm32f4xx_rtc.c **** 
 2056              		.loc 1 1453 1 is_stmt 0 view .LVU697
 2057 000e 7047     		bx	lr
 2058              	.LVL148:
 2059              	.L140:
1445:./Library/stm32f4xx_rtc.c ****   }
 2060              		.loc 1 1445 5 is_stmt 1 view .LVU698
1445:./Library/stm32f4xx_rtc.c ****   }
 2061              		.loc 1 1445 29 is_stmt 0 view .LVU699
 2062 0010 024B     		ldr	r3, .L141
 2063 0012 586C     		ldr	r0, [r3, #68]
 2064              	.LVL149:
1445:./Library/stm32f4xx_rtc.c ****   }
 2065              		.loc 1 1445 12 view .LVU700
 2066 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 2067              	.LVL150:
1445:./Library/stm32f4xx_rtc.c ****   }
 2068              		.loc 1 1445 12 view .LVU701
 2069 0018 7047     		bx	lr
 2070              	.L142:
 2071 001a 00BF     		.align	2
 2072              	.L141:
 2073 001c 00280040 		.word	1073752064
 2074              		.cfi_endproc
 2075              	.LFE144:
 2077              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2078              		.align	1
 2079              		.global	RTC_WakeUpClockConfig
 2080              		.syntax unified
 2081              		.thumb
 2082              		.thumb_func
 2084              	RTC_WakeUpClockConfig:
 2085              	.LVL151:
 2086              	.LFB145:
1488:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 2087              		.loc 1 1488 1 is_stmt 1 view -0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 0
 2090              		@ frame_needed = 0, uses_anonymous_args = 0
 2091              		@ link register save eliminated.
1490:./Library/stm32f4xx_rtc.c **** 
 2092              		.loc 1 1490 3 view .LVU703
1493:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2093              		.loc 1 1493 3 view .LVU704
1493:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2094              		.loc 1 1493 12 is_stmt 0 view .LVU705
 2095 0000 074B     		ldr	r3, .L144
ARM GAS  /tmp/cccsESzb.s 			page 97


 2096 0002 CA22     		movs	r2, #202
 2097 0004 5A62     		str	r2, [r3, #36]
1494:./Library/stm32f4xx_rtc.c **** 
 2098              		.loc 1 1494 3 is_stmt 1 view .LVU706
1494:./Library/stm32f4xx_rtc.c **** 
 2099              		.loc 1 1494 12 is_stmt 0 view .LVU707
 2100 0006 5322     		movs	r2, #83
 2101 0008 5A62     		str	r2, [r3, #36]
1497:./Library/stm32f4xx_rtc.c **** 
 2102              		.loc 1 1497 3 is_stmt 1 view .LVU708
1497:./Library/stm32f4xx_rtc.c **** 
 2103              		.loc 1 1497 6 is_stmt 0 view .LVU709
 2104 000a 9A68     		ldr	r2, [r3, #8]
1497:./Library/stm32f4xx_rtc.c **** 
 2105              		.loc 1 1497 11 view .LVU710
 2106 000c 22F00702 		bic	r2, r2, #7
 2107 0010 9A60     		str	r2, [r3, #8]
1500:./Library/stm32f4xx_rtc.c ****   
 2108              		.loc 1 1500 3 is_stmt 1 view .LVU711
1500:./Library/stm32f4xx_rtc.c ****   
 2109              		.loc 1 1500 6 is_stmt 0 view .LVU712
 2110 0012 9A68     		ldr	r2, [r3, #8]
1500:./Library/stm32f4xx_rtc.c ****   
 2111              		.loc 1 1500 11 view .LVU713
 2112 0014 0243     		orrs	r2, r2, r0
 2113 0016 9A60     		str	r2, [r3, #8]
1503:./Library/stm32f4xx_rtc.c **** }
 2114              		.loc 1 1503 3 is_stmt 1 view .LVU714
1503:./Library/stm32f4xx_rtc.c **** }
 2115              		.loc 1 1503 12 is_stmt 0 view .LVU715
 2116 0018 FF22     		movs	r2, #255
 2117 001a 5A62     		str	r2, [r3, #36]
1504:./Library/stm32f4xx_rtc.c **** 
 2118              		.loc 1 1504 1 view .LVU716
 2119 001c 7047     		bx	lr
 2120              	.L145:
 2121 001e 00BF     		.align	2
 2122              	.L144:
 2123 0020 00280040 		.word	1073752064
 2124              		.cfi_endproc
 2125              	.LFE145:
 2127              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2128              		.align	1
 2129              		.global	RTC_SetWakeUpCounter
 2130              		.syntax unified
 2131              		.thumb
 2132              		.thumb_func
 2134              	RTC_SetWakeUpCounter:
 2135              	.LVL152:
 2136              	.LFB146:
1515:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 2137              		.loc 1 1515 1 is_stmt 1 view -0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 0
 2140              		@ frame_needed = 0, uses_anonymous_args = 0
 2141              		@ link register save eliminated.
1517:./Library/stm32f4xx_rtc.c ****   
ARM GAS  /tmp/cccsESzb.s 			page 98


 2142              		.loc 1 1517 3 view .LVU718
1520:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2143              		.loc 1 1520 3 view .LVU719
1520:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2144              		.loc 1 1520 12 is_stmt 0 view .LVU720
 2145 0000 044B     		ldr	r3, .L147
 2146 0002 CA22     		movs	r2, #202
 2147 0004 5A62     		str	r2, [r3, #36]
1521:./Library/stm32f4xx_rtc.c ****   
 2148              		.loc 1 1521 3 is_stmt 1 view .LVU721
1521:./Library/stm32f4xx_rtc.c ****   
 2149              		.loc 1 1521 12 is_stmt 0 view .LVU722
 2150 0006 5322     		movs	r2, #83
 2151 0008 5A62     		str	r2, [r3, #36]
1524:./Library/stm32f4xx_rtc.c ****   
 2152              		.loc 1 1524 3 is_stmt 1 view .LVU723
1524:./Library/stm32f4xx_rtc.c ****   
 2153              		.loc 1 1524 13 is_stmt 0 view .LVU724
 2154 000a 5861     		str	r0, [r3, #20]
1527:./Library/stm32f4xx_rtc.c **** }
 2155              		.loc 1 1527 3 is_stmt 1 view .LVU725
1527:./Library/stm32f4xx_rtc.c **** }
 2156              		.loc 1 1527 12 is_stmt 0 view .LVU726
 2157 000c FF22     		movs	r2, #255
 2158 000e 5A62     		str	r2, [r3, #36]
1528:./Library/stm32f4xx_rtc.c **** 
 2159              		.loc 1 1528 1 view .LVU727
 2160 0010 7047     		bx	lr
 2161              	.L148:
 2162 0012 00BF     		.align	2
 2163              	.L147:
 2164 0014 00280040 		.word	1073752064
 2165              		.cfi_endproc
 2166              	.LFE146:
 2168              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2169              		.align	1
 2170              		.global	RTC_GetWakeUpCounter
 2171              		.syntax unified
 2172              		.thumb
 2173              		.thumb_func
 2175              	RTC_GetWakeUpCounter:
 2176              	.LFB147:
1536:./Library/stm32f4xx_rtc.c ****   /* Get the counter value */
 2177              		.loc 1 1536 1 is_stmt 1 view -0
 2178              		.cfi_startproc
 2179              		@ args = 0, pretend = 0, frame = 0
 2180              		@ frame_needed = 0, uses_anonymous_args = 0
 2181              		@ link register save eliminated.
1538:./Library/stm32f4xx_rtc.c **** }
 2182              		.loc 1 1538 3 view .LVU729
1538:./Library/stm32f4xx_rtc.c **** }
 2183              		.loc 1 1538 25 is_stmt 0 view .LVU730
 2184 0000 014B     		ldr	r3, .L150
 2185 0002 5869     		ldr	r0, [r3, #20]
1539:./Library/stm32f4xx_rtc.c **** 
 2186              		.loc 1 1539 1 view .LVU731
 2187 0004 80B2     		uxth	r0, r0
ARM GAS  /tmp/cccsESzb.s 			page 99


 2188 0006 7047     		bx	lr
 2189              	.L151:
 2190              		.align	2
 2191              	.L150:
 2192 0008 00280040 		.word	1073752064
 2193              		.cfi_endproc
 2194              	.LFE147:
 2196              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2197              		.align	1
 2198              		.global	RTC_WakeUpCmd
 2199              		.syntax unified
 2200              		.thumb
 2201              		.thumb_func
 2203              	RTC_WakeUpCmd:
 2204              	.LVL153:
 2205              	.LFB148:
1548:./Library/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2206              		.loc 1 1548 1 is_stmt 1 view -0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 8
 2209              		@ frame_needed = 0, uses_anonymous_args = 0
 2210              		@ link register save eliminated.
1548:./Library/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2211              		.loc 1 1548 1 is_stmt 0 view .LVU733
 2212 0000 82B0     		sub	sp, sp, #8
 2213              	.LCFI24:
 2214              		.cfi_def_cfa_offset 8
1549:./Library/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2215              		.loc 1 1549 3 is_stmt 1 view .LVU734
1549:./Library/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2216              		.loc 1 1549 17 is_stmt 0 view .LVU735
 2217 0002 0023     		movs	r3, #0
 2218 0004 0193     		str	r3, [sp, #4]
1550:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2219              		.loc 1 1550 3 is_stmt 1 view .LVU736
 2220              	.LVL154:
1551:./Library/stm32f4xx_rtc.c ****   
 2221              		.loc 1 1551 3 view .LVU737
1554:./Library/stm32f4xx_rtc.c **** 
 2222              		.loc 1 1554 3 view .LVU738
1557:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2223              		.loc 1 1557 3 view .LVU739
1557:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2224              		.loc 1 1557 12 is_stmt 0 view .LVU740
 2225 0006 164B     		ldr	r3, .L159
 2226 0008 CA22     		movs	r2, #202
 2227 000a 5A62     		str	r2, [r3, #36]
1558:./Library/stm32f4xx_rtc.c **** 
 2228              		.loc 1 1558 3 is_stmt 1 view .LVU741
1558:./Library/stm32f4xx_rtc.c **** 
 2229              		.loc 1 1558 12 is_stmt 0 view .LVU742
 2230 000c 5322     		movs	r2, #83
 2231 000e 5A62     		str	r2, [r3, #36]
1560:./Library/stm32f4xx_rtc.c ****   {
 2232              		.loc 1 1560 3 is_stmt 1 view .LVU743
1560:./Library/stm32f4xx_rtc.c ****   {
 2233              		.loc 1 1560 6 is_stmt 0 view .LVU744
ARM GAS  /tmp/cccsESzb.s 			page 100


 2234 0010 50B1     		cbz	r0, .L153
1563:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2235              		.loc 1 1563 5 is_stmt 1 view .LVU745
1563:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2236              		.loc 1 1563 8 is_stmt 0 view .LVU746
 2237 0012 1A46     		mov	r2, r3
 2238 0014 9B68     		ldr	r3, [r3, #8]
1563:./Library/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2239              		.loc 1 1563 13 view .LVU747
 2240 0016 43F48063 		orr	r3, r3, #1024
 2241 001a 9360     		str	r3, [r2, #8]
1564:./Library/stm32f4xx_rtc.c ****   }
 2242              		.loc 1 1564 5 is_stmt 1 view .LVU748
 2243              	.LVL155:
1564:./Library/stm32f4xx_rtc.c ****   }
 2244              		.loc 1 1564 12 is_stmt 0 view .LVU749
 2245 001c 0120     		movs	r0, #1
 2246              	.LVL156:
 2247              	.L154:
1588:./Library/stm32f4xx_rtc.c ****   
 2248              		.loc 1 1588 3 is_stmt 1 view .LVU750
1588:./Library/stm32f4xx_rtc.c ****   
 2249              		.loc 1 1588 12 is_stmt 0 view .LVU751
 2250 001e 104B     		ldr	r3, .L159
 2251 0020 FF22     		movs	r2, #255
 2252 0022 5A62     		str	r2, [r3, #36]
1590:./Library/stm32f4xx_rtc.c **** }
 2253              		.loc 1 1590 3 is_stmt 1 view .LVU752
1591:./Library/stm32f4xx_rtc.c **** 
 2254              		.loc 1 1591 1 is_stmt 0 view .LVU753
 2255 0024 02B0     		add	sp, sp, #8
 2256              	.LCFI25:
 2257              		.cfi_remember_state
 2258              		.cfi_def_cfa_offset 0
 2259              		@ sp needed
 2260 0026 7047     		bx	lr
 2261              	.LVL157:
 2262              	.L153:
 2263              	.LCFI26:
 2264              		.cfi_restore_state
1591:./Library/stm32f4xx_rtc.c **** 
 2265              		.loc 1 1591 1 view .LVU754
 2266 0028 0146     		mov	r1, r0
1569:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 2267              		.loc 1 1569 5 is_stmt 1 view .LVU755
1569:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 2268              		.loc 1 1569 8 is_stmt 0 view .LVU756
 2269 002a 0D4A     		ldr	r2, .L159
 2270 002c 9368     		ldr	r3, [r2, #8]
1569:./Library/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 2271              		.loc 1 1569 13 view .LVU757
 2272 002e 23F48063 		bic	r3, r3, #1024
 2273 0032 9360     		str	r3, [r2, #8]
 2274              	.LVL158:
 2275              	.L156:
1571:./Library/stm32f4xx_rtc.c ****     {
 2276              		.loc 1 1571 5 is_stmt 1 discriminator 2 view .LVU758
ARM GAS  /tmp/cccsESzb.s 			page 101


1573:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
 2277              		.loc 1 1573 7 discriminator 2 view .LVU759
1573:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
 2278              		.loc 1 1573 24 is_stmt 0 discriminator 2 view .LVU760
 2279 0034 0A4B     		ldr	r3, .L159
 2280 0036 DA68     		ldr	r2, [r3, #12]
1573:./Library/stm32f4xx_rtc.c ****       wutcounter++;  
 2281              		.loc 1 1573 19 discriminator 2 view .LVU761
 2282 0038 02F00402 		and	r2, r2, #4
 2283              	.LVL159:
1574:./Library/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2284              		.loc 1 1574 7 is_stmt 1 discriminator 2 view .LVU762
1574:./Library/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2285              		.loc 1 1574 17 is_stmt 0 discriminator 2 view .LVU763
 2286 003c 019B     		ldr	r3, [sp, #4]
 2287 003e 0133     		adds	r3, r3, #1
 2288 0040 0193     		str	r3, [sp, #4]
1575:./Library/stm32f4xx_rtc.c ****     
 2289              		.loc 1 1575 46 is_stmt 1 discriminator 2 view .LVU764
1575:./Library/stm32f4xx_rtc.c ****     
 2290              		.loc 1 1575 25 is_stmt 0 discriminator 2 view .LVU765
 2291 0042 019B     		ldr	r3, [sp, #4]
1575:./Library/stm32f4xx_rtc.c ****     
 2292              		.loc 1 1575 46 discriminator 2 view .LVU766
 2293 0044 B3F5803F 		cmp	r3, #65536
 2294 0048 01D0     		beq	.L155
1575:./Library/stm32f4xx_rtc.c ****     
 2295              		.loc 1 1575 46 discriminator 1 view .LVU767
 2296 004a 002A     		cmp	r2, #0
 2297 004c F2D0     		beq	.L156
 2298              	.L155:
1577:./Library/stm32f4xx_rtc.c ****     {
 2299              		.loc 1 1577 5 is_stmt 1 view .LVU768
1577:./Library/stm32f4xx_rtc.c ****     {
 2300              		.loc 1 1577 13 is_stmt 0 view .LVU769
 2301 004e 044B     		ldr	r3, .L159
 2302 0050 DB68     		ldr	r3, [r3, #12]
1577:./Library/stm32f4xx_rtc.c ****     {
 2303              		.loc 1 1577 8 view .LVU770
 2304 0052 13F0040F 		tst	r3, #4
 2305 0056 01D1     		bne	.L157
1579:./Library/stm32f4xx_rtc.c ****     }
 2306              		.loc 1 1579 14 view .LVU771
 2307 0058 0846     		mov	r0, r1
 2308              	.LVL160:
1579:./Library/stm32f4xx_rtc.c ****     }
 2309              		.loc 1 1579 14 view .LVU772
 2310 005a E0E7     		b	.L154
 2311              	.LVL161:
 2312              	.L157:
1583:./Library/stm32f4xx_rtc.c ****     }    
 2313              		.loc 1 1583 14 view .LVU773
 2314 005c 0120     		movs	r0, #1
 2315              	.LVL162:
1583:./Library/stm32f4xx_rtc.c ****     }    
 2316              		.loc 1 1583 14 view .LVU774
 2317 005e DEE7     		b	.L154
ARM GAS  /tmp/cccsESzb.s 			page 102


 2318              	.L160:
 2319              		.align	2
 2320              	.L159:
 2321 0060 00280040 		.word	1073752064
 2322              		.cfi_endproc
 2323              	.LFE148:
 2325              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2326              		.align	1
 2327              		.global	RTC_DayLightSavingConfig
 2328              		.syntax unified
 2329              		.thumb
 2330              		.thumb_func
 2332              	RTC_DayLightSavingConfig:
 2333              	.LVL163:
 2334              	.LFB149:
1625:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 2335              		.loc 1 1625 1 is_stmt 1 view -0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 0
 2338              		@ frame_needed = 0, uses_anonymous_args = 0
 2339              		@ link register save eliminated.
1627:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
 2340              		.loc 1 1627 3 view .LVU776
1628:./Library/stm32f4xx_rtc.c **** 
 2341              		.loc 1 1628 3 view .LVU777
1631:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2342              		.loc 1 1631 3 view .LVU778
1631:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2343              		.loc 1 1631 12 is_stmt 0 view .LVU779
 2344 0000 074B     		ldr	r3, .L162
 2345 0002 CA22     		movs	r2, #202
 2346 0004 5A62     		str	r2, [r3, #36]
1632:./Library/stm32f4xx_rtc.c **** 
 2347              		.loc 1 1632 3 is_stmt 1 view .LVU780
1632:./Library/stm32f4xx_rtc.c **** 
 2348              		.loc 1 1632 12 is_stmt 0 view .LVU781
 2349 0006 5322     		movs	r2, #83
 2350 0008 5A62     		str	r2, [r3, #36]
1635:./Library/stm32f4xx_rtc.c **** 
 2351              		.loc 1 1635 3 is_stmt 1 view .LVU782
1635:./Library/stm32f4xx_rtc.c **** 
 2352              		.loc 1 1635 6 is_stmt 0 view .LVU783
 2353 000a 9A68     		ldr	r2, [r3, #8]
1635:./Library/stm32f4xx_rtc.c **** 
 2354              		.loc 1 1635 11 view .LVU784
 2355 000c 22F48022 		bic	r2, r2, #262144
 2356 0010 9A60     		str	r2, [r3, #8]
1638:./Library/stm32f4xx_rtc.c **** 
 2357              		.loc 1 1638 3 is_stmt 1 view .LVU785
1638:./Library/stm32f4xx_rtc.c **** 
 2358              		.loc 1 1638 6 is_stmt 0 view .LVU786
 2359 0012 9A68     		ldr	r2, [r3, #8]
1638:./Library/stm32f4xx_rtc.c **** 
 2360              		.loc 1 1638 44 view .LVU787
 2361 0014 0843     		orrs	r0, r0, r1
 2362              	.LVL164:
1638:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 103


 2363              		.loc 1 1638 11 view .LVU788
 2364 0016 0243     		orrs	r2, r2, r0
 2365 0018 9A60     		str	r2, [r3, #8]
1641:./Library/stm32f4xx_rtc.c **** }
 2366              		.loc 1 1641 3 is_stmt 1 view .LVU789
1641:./Library/stm32f4xx_rtc.c **** }
 2367              		.loc 1 1641 12 is_stmt 0 view .LVU790
 2368 001a FF22     		movs	r2, #255
 2369 001c 5A62     		str	r2, [r3, #36]
1642:./Library/stm32f4xx_rtc.c **** 
 2370              		.loc 1 1642 1 view .LVU791
 2371 001e 7047     		bx	lr
 2372              	.L163:
 2373              		.align	2
 2374              	.L162:
 2375 0020 00280040 		.word	1073752064
 2376              		.cfi_endproc
 2377              	.LFE149:
 2379              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2380              		.align	1
 2381              		.global	RTC_GetStoreOperation
 2382              		.syntax unified
 2383              		.thumb
 2384              		.thumb_func
 2386              	RTC_GetStoreOperation:
 2387              	.LFB150:
1652:./Library/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2388              		.loc 1 1652 1 is_stmt 1 view -0
 2389              		.cfi_startproc
 2390              		@ args = 0, pretend = 0, frame = 0
 2391              		@ frame_needed = 0, uses_anonymous_args = 0
 2392              		@ link register save eliminated.
1653:./Library/stm32f4xx_rtc.c **** }
 2393              		.loc 1 1653 3 view .LVU793
1653:./Library/stm32f4xx_rtc.c **** }
 2394              		.loc 1 1653 14 is_stmt 0 view .LVU794
 2395 0000 024B     		ldr	r3, .L165
 2396 0002 9868     		ldr	r0, [r3, #8]
1654:./Library/stm32f4xx_rtc.c **** 
 2397              		.loc 1 1654 1 view .LVU795
 2398 0004 00F48020 		and	r0, r0, #262144
 2399 0008 7047     		bx	lr
 2400              	.L166:
 2401 000a 00BF     		.align	2
 2402              	.L165:
 2403 000c 00280040 		.word	1073752064
 2404              		.cfi_endproc
 2405              	.LFE150:
 2407              		.section	.text.RTC_OutputConfig,"ax",%progbits
 2408              		.align	1
 2409              		.global	RTC_OutputConfig
 2410              		.syntax unified
 2411              		.thumb
 2412              		.thumb_func
 2414              	RTC_OutputConfig:
 2415              	.LVL165:
 2416              	.LFB151:
ARM GAS  /tmp/cccsESzb.s 			page 104


1691:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 2417              		.loc 1 1691 1 is_stmt 1 view -0
 2418              		.cfi_startproc
 2419              		@ args = 0, pretend = 0, frame = 0
 2420              		@ frame_needed = 0, uses_anonymous_args = 0
 2421              		@ link register save eliminated.
1693:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
 2422              		.loc 1 1693 3 view .LVU797
1694:./Library/stm32f4xx_rtc.c **** 
 2423              		.loc 1 1694 3 view .LVU798
1697:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2424              		.loc 1 1697 3 view .LVU799
1697:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2425              		.loc 1 1697 12 is_stmt 0 view .LVU800
 2426 0000 074B     		ldr	r3, .L168
 2427 0002 CA22     		movs	r2, #202
 2428 0004 5A62     		str	r2, [r3, #36]
1698:./Library/stm32f4xx_rtc.c **** 
 2429              		.loc 1 1698 3 is_stmt 1 view .LVU801
1698:./Library/stm32f4xx_rtc.c **** 
 2430              		.loc 1 1698 12 is_stmt 0 view .LVU802
 2431 0006 5322     		movs	r2, #83
 2432 0008 5A62     		str	r2, [r3, #36]
1701:./Library/stm32f4xx_rtc.c **** 
 2433              		.loc 1 1701 3 is_stmt 1 view .LVU803
1701:./Library/stm32f4xx_rtc.c **** 
 2434              		.loc 1 1701 6 is_stmt 0 view .LVU804
 2435 000a 9A68     		ldr	r2, [r3, #8]
1701:./Library/stm32f4xx_rtc.c **** 
 2436              		.loc 1 1701 11 view .LVU805
 2437 000c 22F4E002 		bic	r2, r2, #7340032
 2438 0010 9A60     		str	r2, [r3, #8]
1704:./Library/stm32f4xx_rtc.c **** 
 2439              		.loc 1 1704 3 is_stmt 1 view .LVU806
1704:./Library/stm32f4xx_rtc.c **** 
 2440              		.loc 1 1704 6 is_stmt 0 view .LVU807
 2441 0012 9A68     		ldr	r2, [r3, #8]
1704:./Library/stm32f4xx_rtc.c **** 
 2442              		.loc 1 1704 36 view .LVU808
 2443 0014 0843     		orrs	r0, r0, r1
 2444              	.LVL166:
1704:./Library/stm32f4xx_rtc.c **** 
 2445              		.loc 1 1704 11 view .LVU809
 2446 0016 0243     		orrs	r2, r2, r0
 2447 0018 9A60     		str	r2, [r3, #8]
1707:./Library/stm32f4xx_rtc.c **** }
 2448              		.loc 1 1707 3 is_stmt 1 view .LVU810
1707:./Library/stm32f4xx_rtc.c **** }
 2449              		.loc 1 1707 12 is_stmt 0 view .LVU811
 2450 001a FF22     		movs	r2, #255
 2451 001c 5A62     		str	r2, [r3, #36]
1708:./Library/stm32f4xx_rtc.c **** 
 2452              		.loc 1 1708 1 view .LVU812
 2453 001e 7047     		bx	lr
 2454              	.L169:
 2455              		.align	2
 2456              	.L168:
ARM GAS  /tmp/cccsESzb.s 			page 105


 2457 0020 00280040 		.word	1073752064
 2458              		.cfi_endproc
 2459              	.LFE151:
 2461              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2462              		.align	1
 2463              		.global	RTC_CoarseCalibConfig
 2464              		.syntax unified
 2465              		.thumb
 2466              		.thumb_func
 2468              	RTC_CoarseCalibConfig:
 2469              	.LVL167:
 2470              	.LFB152:
1745:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2471              		.loc 1 1745 1 is_stmt 1 view -0
 2472              		.cfi_startproc
 2473              		@ args = 0, pretend = 0, frame = 0
 2474              		@ frame_needed = 0, uses_anonymous_args = 0
1745:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2475              		.loc 1 1745 1 is_stmt 0 view .LVU814
 2476 0000 38B5     		push	{r3, r4, r5, lr}
 2477              	.LCFI27:
 2478              		.cfi_def_cfa_offset 16
 2479              		.cfi_offset 3, -16
 2480              		.cfi_offset 4, -12
 2481              		.cfi_offset 5, -8
 2482              		.cfi_offset 14, -4
 2483 0002 0446     		mov	r4, r0
 2484 0004 0D46     		mov	r5, r1
1746:./Library/stm32f4xx_rtc.c ****    
 2485              		.loc 1 1746 3 is_stmt 1 view .LVU815
 2486              	.LVL168:
1749:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
 2487              		.loc 1 1749 3 view .LVU816
1750:./Library/stm32f4xx_rtc.c **** 
 2488              		.loc 1 1750 3 view .LVU817
1753:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2489              		.loc 1 1753 3 view .LVU818
1753:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2490              		.loc 1 1753 12 is_stmt 0 view .LVU819
 2491 0006 094B     		ldr	r3, .L174
 2492 0008 CA22     		movs	r2, #202
 2493 000a 5A62     		str	r2, [r3, #36]
1754:./Library/stm32f4xx_rtc.c **** 
 2494              		.loc 1 1754 3 is_stmt 1 view .LVU820
1754:./Library/stm32f4xx_rtc.c **** 
 2495              		.loc 1 1754 12 is_stmt 0 view .LVU821
 2496 000c 5322     		movs	r2, #83
 2497 000e 5A62     		str	r2, [r3, #36]
1757:./Library/stm32f4xx_rtc.c ****   {
 2498              		.loc 1 1757 3 is_stmt 1 view .LVU822
1757:./Library/stm32f4xx_rtc.c ****   {
 2499              		.loc 1 1757 7 is_stmt 0 view .LVU823
 2500 0010 FFF7FEFF 		bl	RTC_EnterInitMode
 2501              	.LVL169:
1757:./Library/stm32f4xx_rtc.c ****   {
 2502              		.loc 1 1757 6 view .LVU824
 2503 0014 18B9     		cbnz	r0, .L173
ARM GAS  /tmp/cccsESzb.s 			page 106


 2504              	.LVL170:
 2505              	.L171:
1772:./Library/stm32f4xx_rtc.c ****   
 2506              		.loc 1 1772 3 is_stmt 1 view .LVU825
1772:./Library/stm32f4xx_rtc.c ****   
 2507              		.loc 1 1772 12 is_stmt 0 view .LVU826
 2508 0016 054B     		ldr	r3, .L174
 2509 0018 FF22     		movs	r2, #255
 2510 001a 5A62     		str	r2, [r3, #36]
1774:./Library/stm32f4xx_rtc.c **** }
 2511              		.loc 1 1774 3 is_stmt 1 view .LVU827
1775:./Library/stm32f4xx_rtc.c **** 
 2512              		.loc 1 1775 1 is_stmt 0 view .LVU828
 2513 001c 38BD     		pop	{r3, r4, r5, pc}
 2514              	.LVL171:
 2515              	.L173:
1764:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2516              		.loc 1 1764 5 is_stmt 1 view .LVU829
1764:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2517              		.loc 1 1764 44 is_stmt 0 view .LVU830
 2518 001e 2C43     		orrs	r4, r4, r5
 2519              	.LVL172:
1764:./Library/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 2520              		.loc 1 1764 17 view .LVU831
 2521 0020 024B     		ldr	r3, .L174
 2522 0022 9C61     		str	r4, [r3, #24]
1766:./Library/stm32f4xx_rtc.c ****     
 2523              		.loc 1 1766 5 is_stmt 1 view .LVU832
 2524 0024 FFF7FEFF 		bl	RTC_ExitInitMode
 2525              	.LVL173:
1768:./Library/stm32f4xx_rtc.c ****   } 
 2526              		.loc 1 1768 5 view .LVU833
1768:./Library/stm32f4xx_rtc.c ****   } 
 2527              		.loc 1 1768 12 is_stmt 0 view .LVU834
 2528 0028 0120     		movs	r0, #1
 2529 002a F4E7     		b	.L171
 2530              	.L175:
 2531              		.align	2
 2532              	.L174:
 2533 002c 00280040 		.word	1073752064
 2534              		.cfi_endproc
 2535              	.LFE152:
 2537              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2538              		.align	1
 2539              		.global	RTC_CoarseCalibCmd
 2540              		.syntax unified
 2541              		.thumb
 2542              		.thumb_func
 2544              	RTC_CoarseCalibCmd:
 2545              	.LVL174:
 2546              	.LFB153:
1786:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2547              		.loc 1 1786 1 is_stmt 1 view -0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 0
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
1786:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
ARM GAS  /tmp/cccsESzb.s 			page 107


 2551              		.loc 1 1786 1 is_stmt 0 view .LVU836
 2552 0000 10B5     		push	{r4, lr}
 2553              	.LCFI28:
 2554              		.cfi_def_cfa_offset 8
 2555              		.cfi_offset 4, -8
 2556              		.cfi_offset 14, -4
 2557 0002 0446     		mov	r4, r0
1787:./Library/stm32f4xx_rtc.c ****   
 2558              		.loc 1 1787 3 is_stmt 1 view .LVU837
 2559              	.LVL175:
1790:./Library/stm32f4xx_rtc.c **** 
 2560              		.loc 1 1790 3 view .LVU838
1793:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2561              		.loc 1 1793 3 view .LVU839
1793:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2562              		.loc 1 1793 12 is_stmt 0 view .LVU840
 2563 0004 0D4B     		ldr	r3, .L181
 2564 0006 CA22     		movs	r2, #202
 2565 0008 5A62     		str	r2, [r3, #36]
1794:./Library/stm32f4xx_rtc.c ****   
 2566              		.loc 1 1794 3 is_stmt 1 view .LVU841
1794:./Library/stm32f4xx_rtc.c ****   
 2567              		.loc 1 1794 12 is_stmt 0 view .LVU842
 2568 000a 5322     		movs	r2, #83
 2569 000c 5A62     		str	r2, [r3, #36]
1797:./Library/stm32f4xx_rtc.c ****   {
 2570              		.loc 1 1797 3 is_stmt 1 view .LVU843
1797:./Library/stm32f4xx_rtc.c ****   {
 2571              		.loc 1 1797 7 is_stmt 0 view .LVU844
 2572 000e FFF7FEFF 		bl	RTC_EnterInitMode
 2573              	.LVL176:
1797:./Library/stm32f4xx_rtc.c ****   {
 2574              		.loc 1 1797 6 view .LVU845
 2575 0012 40B1     		cbz	r0, .L177
1803:./Library/stm32f4xx_rtc.c ****     {
 2576              		.loc 1 1803 5 is_stmt 1 view .LVU846
1803:./Library/stm32f4xx_rtc.c ****     {
 2577              		.loc 1 1803 8 is_stmt 0 view .LVU847
 2578 0014 5CB1     		cbz	r4, .L178
1806:./Library/stm32f4xx_rtc.c ****     }
 2579              		.loc 1 1806 7 is_stmt 1 view .LVU848
1806:./Library/stm32f4xx_rtc.c ****     }
 2580              		.loc 1 1806 10 is_stmt 0 view .LVU849
 2581 0016 094A     		ldr	r2, .L181
 2582 0018 9368     		ldr	r3, [r2, #8]
1806:./Library/stm32f4xx_rtc.c ****     }
 2583              		.loc 1 1806 15 view .LVU850
 2584 001a 43F08003 		orr	r3, r3, #128
 2585 001e 9360     		str	r3, [r2, #8]
 2586              	.L179:
1814:./Library/stm32f4xx_rtc.c ****     
 2587              		.loc 1 1814 5 is_stmt 1 view .LVU851
 2588 0020 FFF7FEFF 		bl	RTC_ExitInitMode
 2589              	.LVL177:
1816:./Library/stm32f4xx_rtc.c ****   } 
 2590              		.loc 1 1816 5 view .LVU852
1816:./Library/stm32f4xx_rtc.c ****   } 
ARM GAS  /tmp/cccsESzb.s 			page 108


 2591              		.loc 1 1816 12 is_stmt 0 view .LVU853
 2592 0024 0120     		movs	r0, #1
 2593              	.LVL178:
 2594              	.L177:
1820:./Library/stm32f4xx_rtc.c ****   
 2595              		.loc 1 1820 3 is_stmt 1 view .LVU854
1820:./Library/stm32f4xx_rtc.c ****   
 2596              		.loc 1 1820 12 is_stmt 0 view .LVU855
 2597 0026 054B     		ldr	r3, .L181
 2598 0028 FF22     		movs	r2, #255
 2599 002a 5A62     		str	r2, [r3, #36]
1822:./Library/stm32f4xx_rtc.c **** }
 2600              		.loc 1 1822 3 is_stmt 1 view .LVU856
1823:./Library/stm32f4xx_rtc.c **** 
 2601              		.loc 1 1823 1 is_stmt 0 view .LVU857
 2602 002c 10BD     		pop	{r4, pc}
 2603              	.LVL179:
 2604              	.L178:
1811:./Library/stm32f4xx_rtc.c ****     }
 2605              		.loc 1 1811 7 is_stmt 1 view .LVU858
1811:./Library/stm32f4xx_rtc.c ****     }
 2606              		.loc 1 1811 10 is_stmt 0 view .LVU859
 2607 002e 034A     		ldr	r2, .L181
 2608 0030 9368     		ldr	r3, [r2, #8]
1811:./Library/stm32f4xx_rtc.c ****     }
 2609              		.loc 1 1811 15 view .LVU860
 2610 0032 23F08003 		bic	r3, r3, #128
 2611 0036 9360     		str	r3, [r2, #8]
 2612 0038 F2E7     		b	.L179
 2613              	.L182:
 2614 003a 00BF     		.align	2
 2615              	.L181:
 2616 003c 00280040 		.word	1073752064
 2617              		.cfi_endproc
 2618              	.LFE153:
 2620              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2621              		.align	1
 2622              		.global	RTC_CalibOutputCmd
 2623              		.syntax unified
 2624              		.thumb
 2625              		.thumb_func
 2627              	RTC_CalibOutputCmd:
 2628              	.LVL180:
 2629              	.LFB154:
1832:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 2630              		.loc 1 1832 1 is_stmt 1 view -0
 2631              		.cfi_startproc
 2632              		@ args = 0, pretend = 0, frame = 0
 2633              		@ frame_needed = 0, uses_anonymous_args = 0
 2634              		@ link register save eliminated.
1834:./Library/stm32f4xx_rtc.c ****   
 2635              		.loc 1 1834 3 view .LVU862
1837:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2636              		.loc 1 1837 3 view .LVU863
1837:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2637              		.loc 1 1837 12 is_stmt 0 view .LVU864
 2638 0000 0A4B     		ldr	r3, .L186
ARM GAS  /tmp/cccsESzb.s 			page 109


 2639 0002 CA22     		movs	r2, #202
 2640 0004 5A62     		str	r2, [r3, #36]
1838:./Library/stm32f4xx_rtc.c ****   
 2641              		.loc 1 1838 3 is_stmt 1 view .LVU865
1838:./Library/stm32f4xx_rtc.c ****   
 2642              		.loc 1 1838 12 is_stmt 0 view .LVU866
 2643 0006 5322     		movs	r2, #83
 2644 0008 5A62     		str	r2, [r3, #36]
1840:./Library/stm32f4xx_rtc.c ****   {
 2645              		.loc 1 1840 3 is_stmt 1 view .LVU867
1840:./Library/stm32f4xx_rtc.c ****   {
 2646              		.loc 1 1840 6 is_stmt 0 view .LVU868
 2647 000a 40B1     		cbz	r0, .L184
1843:./Library/stm32f4xx_rtc.c ****   }
 2648              		.loc 1 1843 5 is_stmt 1 view .LVU869
1843:./Library/stm32f4xx_rtc.c ****   }
 2649              		.loc 1 1843 8 is_stmt 0 view .LVU870
 2650 000c 1A46     		mov	r2, r3
 2651 000e 9B68     		ldr	r3, [r3, #8]
1843:./Library/stm32f4xx_rtc.c ****   }
 2652              		.loc 1 1843 13 view .LVU871
 2653 0010 43F40003 		orr	r3, r3, #8388608
 2654 0014 9360     		str	r3, [r2, #8]
 2655              	.L185:
1852:./Library/stm32f4xx_rtc.c **** }
 2656              		.loc 1 1852 3 is_stmt 1 view .LVU872
1852:./Library/stm32f4xx_rtc.c **** }
 2657              		.loc 1 1852 12 is_stmt 0 view .LVU873
 2658 0016 054B     		ldr	r3, .L186
 2659 0018 FF22     		movs	r2, #255
 2660 001a 5A62     		str	r2, [r3, #36]
1853:./Library/stm32f4xx_rtc.c **** 
 2661              		.loc 1 1853 1 view .LVU874
 2662 001c 7047     		bx	lr
 2663              	.L184:
1848:./Library/stm32f4xx_rtc.c ****   }
 2664              		.loc 1 1848 5 is_stmt 1 view .LVU875
1848:./Library/stm32f4xx_rtc.c ****   }
 2665              		.loc 1 1848 8 is_stmt 0 view .LVU876
 2666 001e 034A     		ldr	r2, .L186
 2667 0020 9368     		ldr	r3, [r2, #8]
1848:./Library/stm32f4xx_rtc.c ****   }
 2668              		.loc 1 1848 13 view .LVU877
 2669 0022 23F40003 		bic	r3, r3, #8388608
 2670 0026 9360     		str	r3, [r2, #8]
 2671 0028 F5E7     		b	.L185
 2672              	.L187:
 2673 002a 00BF     		.align	2
 2674              	.L186:
 2675 002c 00280040 		.word	1073752064
 2676              		.cfi_endproc
 2677              	.LFE154:
 2679              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2680              		.align	1
 2681              		.global	RTC_CalibOutputConfig
 2682              		.syntax unified
 2683              		.thumb
ARM GAS  /tmp/cccsESzb.s 			page 110


 2684              		.thumb_func
 2686              	RTC_CalibOutputConfig:
 2687              	.LVL181:
 2688              	.LFB155:
1864:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 2689              		.loc 1 1864 1 is_stmt 1 view -0
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 0
 2692              		@ frame_needed = 0, uses_anonymous_args = 0
 2693              		@ link register save eliminated.
1866:./Library/stm32f4xx_rtc.c **** 
 2694              		.loc 1 1866 3 view .LVU879
1869:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2695              		.loc 1 1869 3 view .LVU880
1869:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2696              		.loc 1 1869 12 is_stmt 0 view .LVU881
 2697 0000 074B     		ldr	r3, .L189
 2698 0002 CA22     		movs	r2, #202
 2699 0004 5A62     		str	r2, [r3, #36]
1870:./Library/stm32f4xx_rtc.c ****   
 2700              		.loc 1 1870 3 is_stmt 1 view .LVU882
1870:./Library/stm32f4xx_rtc.c ****   
 2701              		.loc 1 1870 12 is_stmt 0 view .LVU883
 2702 0006 5322     		movs	r2, #83
 2703 0008 5A62     		str	r2, [r3, #36]
1873:./Library/stm32f4xx_rtc.c **** 
 2704              		.loc 1 1873 3 is_stmt 1 view .LVU884
1873:./Library/stm32f4xx_rtc.c **** 
 2705              		.loc 1 1873 6 is_stmt 0 view .LVU885
 2706 000a 9A68     		ldr	r2, [r3, #8]
1873:./Library/stm32f4xx_rtc.c **** 
 2707              		.loc 1 1873 11 view .LVU886
 2708 000c 22F40022 		bic	r2, r2, #524288
 2709 0010 9A60     		str	r2, [r3, #8]
1876:./Library/stm32f4xx_rtc.c **** 
 2710              		.loc 1 1876 3 is_stmt 1 view .LVU887
1876:./Library/stm32f4xx_rtc.c **** 
 2711              		.loc 1 1876 6 is_stmt 0 view .LVU888
 2712 0012 9A68     		ldr	r2, [r3, #8]
1876:./Library/stm32f4xx_rtc.c **** 
 2713              		.loc 1 1876 11 view .LVU889
 2714 0014 0243     		orrs	r2, r2, r0
 2715 0016 9A60     		str	r2, [r3, #8]
1879:./Library/stm32f4xx_rtc.c **** }
 2716              		.loc 1 1879 3 is_stmt 1 view .LVU890
1879:./Library/stm32f4xx_rtc.c **** }
 2717              		.loc 1 1879 12 is_stmt 0 view .LVU891
 2718 0018 FF22     		movs	r2, #255
 2719 001a 5A62     		str	r2, [r3, #36]
1880:./Library/stm32f4xx_rtc.c **** 
 2720              		.loc 1 1880 1 view .LVU892
 2721 001c 7047     		bx	lr
 2722              	.L190:
 2723 001e 00BF     		.align	2
 2724              	.L189:
 2725 0020 00280040 		.word	1073752064
 2726              		.cfi_endproc
ARM GAS  /tmp/cccsESzb.s 			page 111


 2727              	.LFE155:
 2729              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2730              		.align	1
 2731              		.global	RTC_SmoothCalibConfig
 2732              		.syntax unified
 2733              		.thumb
 2734              		.thumb_func
 2736              	RTC_SmoothCalibConfig:
 2737              	.LVL182:
 2738              	.LFB156:
1902:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2739              		.loc 1 1902 1 is_stmt 1 view -0
 2740              		.cfi_startproc
 2741              		@ args = 0, pretend = 0, frame = 0
 2742              		@ frame_needed = 0, uses_anonymous_args = 0
 2743              		@ link register save eliminated.
1902:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2744              		.loc 1 1902 1 is_stmt 0 view .LVU894
 2745 0000 10B4     		push	{r4}
 2746              	.LCFI29:
 2747              		.cfi_def_cfa_offset 4
 2748              		.cfi_offset 4, -4
1903:./Library/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2749              		.loc 1 1903 3 is_stmt 1 view .LVU895
 2750              	.LVL183:
1904:./Library/stm32f4xx_rtc.c **** 
 2751              		.loc 1 1904 3 view .LVU896
1907:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
 2752              		.loc 1 1907 3 view .LVU897
1908:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
 2753              		.loc 1 1908 3 view .LVU898
1909:./Library/stm32f4xx_rtc.c **** 
 2754              		.loc 1 1909 3 view .LVU899
1912:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2755              		.loc 1 1912 3 view .LVU900
1912:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2756              		.loc 1 1912 12 is_stmt 0 view .LVU901
 2757 0002 134B     		ldr	r3, .L199
 2758 0004 CA24     		movs	r4, #202
 2759 0006 5C62     		str	r4, [r3, #36]
1913:./Library/stm32f4xx_rtc.c ****   
 2760              		.loc 1 1913 3 is_stmt 1 view .LVU902
1913:./Library/stm32f4xx_rtc.c ****   
 2761              		.loc 1 1913 12 is_stmt 0 view .LVU903
 2762 0008 5324     		movs	r4, #83
 2763 000a 5C62     		str	r4, [r3, #36]
1916:./Library/stm32f4xx_rtc.c ****   {
 2764              		.loc 1 1916 3 is_stmt 1 view .LVU904
1916:./Library/stm32f4xx_rtc.c ****   {
 2765              		.loc 1 1916 11 is_stmt 0 view .LVU905
 2766 000c DB68     		ldr	r3, [r3, #12]
1916:./Library/stm32f4xx_rtc.c ****   {
 2767              		.loc 1 1916 6 view .LVU906
 2768 000e 13F4803F 		tst	r3, #65536
 2769 0012 0FD1     		bne	.L196
 2770              	.LVL184:
 2771              	.L193:
ARM GAS  /tmp/cccsESzb.s 			page 112


1926:./Library/stm32f4xx_rtc.c ****   {
 2772              		.loc 1 1926 3 is_stmt 1 view .LVU907
1926:./Library/stm32f4xx_rtc.c ****   {
 2773              		.loc 1 1926 11 is_stmt 0 view .LVU908
 2774 0014 0E4B     		ldr	r3, .L199
 2775 0016 DB68     		ldr	r3, [r3, #12]
1926:./Library/stm32f4xx_rtc.c ****   {
 2776              		.loc 1 1926 6 view .LVU909
 2777 0018 13F4803F 		tst	r3, #65536
 2778 001c 15D1     		bne	.L197
1929:./Library/stm32f4xx_rtc.c **** 
 2779              		.loc 1 1929 5 is_stmt 1 view .LVU910
1929:./Library/stm32f4xx_rtc.c **** 
 2780              		.loc 1 1929 60 is_stmt 0 view .LVU911
 2781 001e 0843     		orrs	r0, r0, r1
 2782              	.LVL185:
1929:./Library/stm32f4xx_rtc.c **** 
 2783              		.loc 1 1929 17 view .LVU912
 2784 0020 1043     		orrs	r0, r0, r2
1929:./Library/stm32f4xx_rtc.c **** 
 2785              		.loc 1 1929 15 view .LVU913
 2786 0022 0B4B     		ldr	r3, .L199
 2787 0024 D863     		str	r0, [r3, #60]
1931:./Library/stm32f4xx_rtc.c ****   }
 2788              		.loc 1 1931 5 is_stmt 1 view .LVU914
 2789              	.LVL186:
1931:./Library/stm32f4xx_rtc.c ****   }
 2790              		.loc 1 1931 12 is_stmt 0 view .LVU915
 2791 0026 0120     		movs	r0, #1
 2792              	.LVL187:
 2793              	.L195:
1939:./Library/stm32f4xx_rtc.c ****   
 2794              		.loc 1 1939 3 is_stmt 1 view .LVU916
1939:./Library/stm32f4xx_rtc.c ****   
 2795              		.loc 1 1939 12 is_stmt 0 view .LVU917
 2796 0028 094B     		ldr	r3, .L199
 2797 002a FF22     		movs	r2, #255
 2798              	.LVL188:
1939:./Library/stm32f4xx_rtc.c ****   
 2799              		.loc 1 1939 12 view .LVU918
 2800 002c 5A62     		str	r2, [r3, #36]
1941:./Library/stm32f4xx_rtc.c **** }
 2801              		.loc 1 1941 3 is_stmt 1 view .LVU919
1942:./Library/stm32f4xx_rtc.c **** 
 2802              		.loc 1 1942 1 is_stmt 0 view .LVU920
 2803 002e 5DF8044B 		ldr	r4, [sp], #4
 2804              	.LCFI30:
 2805              		.cfi_remember_state
 2806              		.cfi_restore 4
 2807              		.cfi_def_cfa_offset 0
 2808 0032 7047     		bx	lr
 2809              	.LVL189:
 2810              	.L196:
 2811              	.LCFI31:
 2812              		.cfi_restore_state
1904:./Library/stm32f4xx_rtc.c **** 
 2813              		.loc 1 1904 12 view .LVU921
ARM GAS  /tmp/cccsESzb.s 			page 113


 2814 0034 0023     		movs	r3, #0
 2815              	.LVL190:
 2816              	.L192:
1919:./Library/stm32f4xx_rtc.c ****     {
 2817              		.loc 1 1919 52 is_stmt 1 view .LVU922
1919:./Library/stm32f4xx_rtc.c ****     {
 2818              		.loc 1 1919 17 is_stmt 0 view .LVU923
 2819 0036 064C     		ldr	r4, .L199
 2820 0038 E468     		ldr	r4, [r4, #12]
1919:./Library/stm32f4xx_rtc.c ****     {
 2821              		.loc 1 1919 52 view .LVU924
 2822 003a 14F4803F 		tst	r4, #65536
 2823 003e E9D0     		beq	.L193
1919:./Library/stm32f4xx_rtc.c ****     {
 2824              		.loc 1 1919 52 discriminator 1 view .LVU925
 2825 0040 B3F5003F 		cmp	r3, #131072
 2826 0044 E6D0     		beq	.L193
1921:./Library/stm32f4xx_rtc.c ****     }
 2827              		.loc 1 1921 7 is_stmt 1 view .LVU926
1921:./Library/stm32f4xx_rtc.c ****     }
 2828              		.loc 1 1921 19 is_stmt 0 view .LVU927
 2829 0046 0133     		adds	r3, r3, #1
 2830              	.LVL191:
1921:./Library/stm32f4xx_rtc.c ****     }
 2831              		.loc 1 1921 19 view .LVU928
 2832 0048 F5E7     		b	.L192
 2833              	.LVL192:
 2834              	.L197:
1935:./Library/stm32f4xx_rtc.c ****   }
 2835              		.loc 1 1935 12 view .LVU929
 2836 004a 0020     		movs	r0, #0
 2837              	.LVL193:
1935:./Library/stm32f4xx_rtc.c ****   }
 2838              		.loc 1 1935 12 view .LVU930
 2839 004c ECE7     		b	.L195
 2840              	.L200:
 2841 004e 00BF     		.align	2
 2842              	.L199:
 2843 0050 00280040 		.word	1073752064
 2844              		.cfi_endproc
 2845              	.LFE156:
 2847              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2848              		.align	1
 2849              		.global	RTC_TimeStampCmd
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2854              	RTC_TimeStampCmd:
 2855              	.LVL194:
 2856              	.LFB157:
1976:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2857              		.loc 1 1976 1 is_stmt 1 view -0
 2858              		.cfi_startproc
 2859              		@ args = 0, pretend = 0, frame = 0
 2860              		@ frame_needed = 0, uses_anonymous_args = 0
 2861              		@ link register save eliminated.
1977:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 114


 2862              		.loc 1 1977 3 view .LVU932
1980:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 2863              		.loc 1 1980 3 view .LVU933
1981:./Library/stm32f4xx_rtc.c **** 
 2864              		.loc 1 1981 3 view .LVU934
1984:./Library/stm32f4xx_rtc.c **** 
 2865              		.loc 1 1984 3 view .LVU935
1984:./Library/stm32f4xx_rtc.c **** 
 2866              		.loc 1 1984 26 is_stmt 0 view .LVU936
 2867 0000 0A4B     		ldr	r3, .L204
 2868 0002 9B68     		ldr	r3, [r3, #8]
1984:./Library/stm32f4xx_rtc.c **** 
 2869              		.loc 1 1984 10 view .LVU937
 2870 0004 23F40063 		bic	r3, r3, #2048
 2871 0008 23F00803 		bic	r3, r3, #8
 2872              	.LVL195:
1987:./Library/stm32f4xx_rtc.c ****   {
 2873              		.loc 1 1987 3 is_stmt 1 view .LVU938
1987:./Library/stm32f4xx_rtc.c ****   {
 2874              		.loc 1 1987 6 is_stmt 0 view .LVU939
 2875 000c 59B1     		cbz	r1, .L202
1989:./Library/stm32f4xx_rtc.c ****   }
 2876              		.loc 1 1989 5 is_stmt 1 view .LVU940
1989:./Library/stm32f4xx_rtc.c ****   }
 2877              		.loc 1 1989 12 is_stmt 0 view .LVU941
 2878 000e 0343     		orrs	r3, r3, r0
 2879              	.LVL196:
1989:./Library/stm32f4xx_rtc.c ****   }
 2880              		.loc 1 1989 12 view .LVU942
 2881 0010 43F40063 		orr	r3, r3, #2048
 2882              	.LVL197:
 2883              	.L203:
1997:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2884              		.loc 1 1997 3 is_stmt 1 view .LVU943
1997:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2885              		.loc 1 1997 12 is_stmt 0 view .LVU944
 2886 0014 054A     		ldr	r2, .L204
 2887 0016 CA21     		movs	r1, #202
 2888              	.LVL198:
1997:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2889              		.loc 1 1997 12 view .LVU945
 2890 0018 5162     		str	r1, [r2, #36]
1998:./Library/stm32f4xx_rtc.c **** 
 2891              		.loc 1 1998 3 is_stmt 1 view .LVU946
1998:./Library/stm32f4xx_rtc.c **** 
 2892              		.loc 1 1998 12 is_stmt 0 view .LVU947
 2893 001a 5321     		movs	r1, #83
 2894 001c 5162     		str	r1, [r2, #36]
2001:./Library/stm32f4xx_rtc.c **** 
 2895              		.loc 1 2001 3 is_stmt 1 view .LVU948
2001:./Library/stm32f4xx_rtc.c **** 
 2896              		.loc 1 2001 11 is_stmt 0 view .LVU949
 2897 001e 9360     		str	r3, [r2, #8]
2004:./Library/stm32f4xx_rtc.c **** }
 2898              		.loc 1 2004 3 is_stmt 1 view .LVU950
2004:./Library/stm32f4xx_rtc.c **** }
 2899              		.loc 1 2004 12 is_stmt 0 view .LVU951
ARM GAS  /tmp/cccsESzb.s 			page 115


 2900 0020 FF23     		movs	r3, #255
 2901              	.LVL199:
2004:./Library/stm32f4xx_rtc.c **** }
 2902              		.loc 1 2004 12 view .LVU952
 2903 0022 5362     		str	r3, [r2, #36]
 2904              	.LVL200:
2005:./Library/stm32f4xx_rtc.c **** 
 2905              		.loc 1 2005 1 view .LVU953
 2906 0024 7047     		bx	lr
 2907              	.LVL201:
 2908              	.L202:
1993:./Library/stm32f4xx_rtc.c ****   }
 2909              		.loc 1 1993 5 is_stmt 1 view .LVU954
1993:./Library/stm32f4xx_rtc.c ****   }
 2910              		.loc 1 1993 12 is_stmt 0 view .LVU955
 2911 0026 0343     		orrs	r3, r3, r0
 2912              	.LVL202:
1993:./Library/stm32f4xx_rtc.c ****   }
 2913              		.loc 1 1993 12 view .LVU956
 2914 0028 F4E7     		b	.L203
 2915              	.L205:
 2916 002a 00BF     		.align	2
 2917              	.L204:
 2918 002c 00280040 		.word	1073752064
 2919              		.cfi_endproc
 2920              	.LFE157:
 2922              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2923              		.align	1
 2924              		.global	RTC_GetTimeStamp
 2925              		.syntax unified
 2926              		.thumb
 2927              		.thumb_func
 2929              	RTC_GetTimeStamp:
 2930              	.LVL203:
 2931              	.LFB158:
2021:./Library/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2932              		.loc 1 2021 1 is_stmt 1 view -0
 2933              		.cfi_startproc
 2934              		@ args = 0, pretend = 0, frame = 0
 2935              		@ frame_needed = 0, uses_anonymous_args = 0
2021:./Library/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2936              		.loc 1 2021 1 is_stmt 0 view .LVU958
 2937 0000 38B5     		push	{r3, r4, r5, lr}
 2938              	.LCFI32:
 2939              		.cfi_def_cfa_offset 16
 2940              		.cfi_offset 3, -16
 2941              		.cfi_offset 4, -12
 2942              		.cfi_offset 5, -8
 2943              		.cfi_offset 14, -4
 2944 0002 0D46     		mov	r5, r1
 2945 0004 1446     		mov	r4, r2
2022:./Library/stm32f4xx_rtc.c **** 
 2946              		.loc 1 2022 3 is_stmt 1 view .LVU959
 2947              	.LVL204:
2025:./Library/stm32f4xx_rtc.c **** 
 2948              		.loc 1 2025 3 view .LVU960
2028:./Library/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
ARM GAS  /tmp/cccsESzb.s 			page 116


 2949              		.loc 1 2028 3 view .LVU961
2028:./Library/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2950              		.loc 1 2028 27 is_stmt 0 view .LVU962
 2951 0006 1C4A     		ldr	r2, .L209
 2952              	.LVL205:
2028:./Library/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2953              		.loc 1 2028 27 view .LVU963
 2954 0008 136B     		ldr	r3, [r2, #48]
 2955              	.LVL206:
2029:./Library/stm32f4xx_rtc.c **** 
 2956              		.loc 1 2029 3 is_stmt 1 view .LVU964
2029:./Library/stm32f4xx_rtc.c **** 
 2957              		.loc 1 2029 27 is_stmt 0 view .LVU965
 2958 000a 526B     		ldr	r2, [r2, #52]
 2959              	.LVL207:
2032:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2960              		.loc 1 2032 3 is_stmt 1 view .LVU966
2032:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2961              		.loc 1 2032 36 is_stmt 0 view .LVU967
 2962 000c C3F30641 		ubfx	r1, r3, #16, #7
 2963              	.LVL208:
2032:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2964              		.loc 1 2032 36 view .LVU968
 2965 0010 C3F3054C 		ubfx	ip, r3, #16, #6
2032:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2966              		.loc 1 2032 34 view .LVU969
 2967 0014 85F800C0 		strb	ip, [r5]
2033:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2968              		.loc 1 2033 3 is_stmt 1 view .LVU970
2033:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2969              		.loc 1 2033 38 is_stmt 0 view .LVU971
 2970 0018 C3F3062C 		ubfx	ip, r3, #8, #7
2033:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2971              		.loc 1 2033 36 view .LVU972
 2972 001c 85F801C0 		strb	ip, [r5, #1]
2034:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2973              		.loc 1 2034 3 is_stmt 1 view .LVU973
2034:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2974              		.loc 1 2034 38 is_stmt 0 view .LVU974
 2975 0020 03F07F03 		and	r3, r3, #127
 2976              	.LVL209:
2034:./Library/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2977              		.loc 1 2034 36 view .LVU975
 2978 0024 AB70     		strb	r3, [r5, #2]
2035:./Library/stm32f4xx_rtc.c **** 
 2979              		.loc 1 2035 3 is_stmt 1 view .LVU976
2035:./Library/stm32f4xx_rtc.c **** 
 2980              		.loc 1 2035 34 is_stmt 0 view .LVU977
 2981 0026 01F04003 		and	r3, r1, #64
2035:./Library/stm32f4xx_rtc.c **** 
 2982              		.loc 1 2035 32 view .LVU978
 2983 002a EB70     		strb	r3, [r5, #3]
2038:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2984              		.loc 1 2038 3 is_stmt 1 view .LVU979
2038:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2985              		.loc 1 2038 33 is_stmt 0 view .LVU980
 2986 002c 0023     		movs	r3, #0
ARM GAS  /tmp/cccsESzb.s 			page 117


 2987 002e E370     		strb	r3, [r4, #3]
2039:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2988              		.loc 1 2039 3 is_stmt 1 view .LVU981
2039:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2989              		.loc 1 2039 36 is_stmt 0 view .LVU982
 2990 0030 C2F30423 		ubfx	r3, r2, #8, #5
2039:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2991              		.loc 1 2039 34 view .LVU983
 2992 0034 6370     		strb	r3, [r4, #1]
2040:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2993              		.loc 1 2040 3 is_stmt 1 view .LVU984
2040:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2994              		.loc 1 2040 35 is_stmt 0 view .LVU985
 2995 0036 02F03F03 		and	r3, r2, #63
2040:./Library/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2996              		.loc 1 2040 33 view .LVU986
 2997 003a A370     		strb	r3, [r4, #2]
2041:./Library/stm32f4xx_rtc.c **** 
 2998              		.loc 1 2041 3 is_stmt 1 view .LVU987
2041:./Library/stm32f4xx_rtc.c **** 
 2999              		.loc 1 2041 38 is_stmt 0 view .LVU988
 3000 003c C2F34232 		ubfx	r2, r2, #13, #3
 3001              	.LVL210:
2041:./Library/stm32f4xx_rtc.c **** 
 3002              		.loc 1 2041 36 view .LVU989
 3003 0040 2270     		strb	r2, [r4]
2044:./Library/stm32f4xx_rtc.c ****   {
 3004              		.loc 1 2044 3 is_stmt 1 view .LVU990
2044:./Library/stm32f4xx_rtc.c ****   {
 3005              		.loc 1 2044 6 is_stmt 0 view .LVU991
 3006 0042 B8B9     		cbnz	r0, .L206
2047:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3007              		.loc 1 2047 5 is_stmt 1 view .LVU992
2047:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3008              		.loc 1 2047 47 is_stmt 0 view .LVU993
 3009 0044 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 3010              	.LVL211:
2047:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3011              		.loc 1 2047 47 view .LVU994
 3012 0046 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3013              	.LVL212:
2047:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3014              		.loc 1 2047 36 view .LVU995
 3015 004a 2870     		strb	r0, [r5]
2048:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3016              		.loc 1 2048 5 is_stmt 1 view .LVU996
2048:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3017              		.loc 1 2048 49 is_stmt 0 view .LVU997
 3018 004c 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 3019 004e FFF7FEFF 		bl	RTC_Bcd2ToByte
 3020              	.LVL213:
2048:./Library/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3021              		.loc 1 2048 38 view .LVU998
 3022 0052 6870     		strb	r0, [r5, #1]
2049:./Library/stm32f4xx_rtc.c **** 
 3023              		.loc 1 2049 5 is_stmt 1 view .LVU999
2049:./Library/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/cccsESzb.s 			page 118


 3024              		.loc 1 2049 49 is_stmt 0 view .LVU1000
 3025 0054 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 3026 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3027              	.LVL214:
2049:./Library/stm32f4xx_rtc.c **** 
 3028              		.loc 1 2049 38 view .LVU1001
 3029 005a A870     		strb	r0, [r5, #2]
2052:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3030              		.loc 1 2052 5 is_stmt 1 view .LVU1002
2052:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3031              		.loc 1 2052 47 is_stmt 0 view .LVU1003
 3032 005c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3033 005e FFF7FEFF 		bl	RTC_Bcd2ToByte
 3034              	.LVL215:
2052:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3035              		.loc 1 2052 36 view .LVU1004
 3036 0062 6070     		strb	r0, [r4, #1]
2053:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3037              		.loc 1 2053 5 is_stmt 1 view .LVU1005
2053:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3038              		.loc 1 2053 46 is_stmt 0 view .LVU1006
 3039 0064 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 3040 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3041              	.LVL216:
2053:./Library/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3042              		.loc 1 2053 35 view .LVU1007
 3043 006a A070     		strb	r0, [r4, #2]
2054:./Library/stm32f4xx_rtc.c ****   }
 3044              		.loc 1 2054 5 is_stmt 1 view .LVU1008
2054:./Library/stm32f4xx_rtc.c ****   }
 3045              		.loc 1 2054 49 is_stmt 0 view .LVU1009
 3046 006c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 3047 006e FFF7FEFF 		bl	RTC_Bcd2ToByte
 3048              	.LVL217:
2054:./Library/stm32f4xx_rtc.c ****   }
 3049              		.loc 1 2054 38 view .LVU1010
 3050 0072 2070     		strb	r0, [r4]
 3051              	.L206:
2056:./Library/stm32f4xx_rtc.c **** 
 3052              		.loc 1 2056 1 view .LVU1011
 3053 0074 38BD     		pop	{r3, r4, r5, pc}
 3054              	.LVL218:
 3055              	.L210:
2056:./Library/stm32f4xx_rtc.c **** 
 3056              		.loc 1 2056 1 view .LVU1012
 3057 0076 00BF     		.align	2
 3058              	.L209:
 3059 0078 00280040 		.word	1073752064
 3060              		.cfi_endproc
 3061              	.LFE158:
 3063              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3064              		.align	1
 3065              		.global	RTC_GetTimeStampSubSecond
 3066              		.syntax unified
 3067              		.thumb
 3068              		.thumb_func
 3070              	RTC_GetTimeStampSubSecond:
ARM GAS  /tmp/cccsESzb.s 			page 119


 3071              	.LFB159:
2064:./Library/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
 3072              		.loc 1 2064 1 is_stmt 1 view -0
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 0
 3075              		@ frame_needed = 0, uses_anonymous_args = 0
 3076              		@ link register save eliminated.
2066:./Library/stm32f4xx_rtc.c **** }
 3077              		.loc 1 2066 3 view .LVU1014
2066:./Library/stm32f4xx_rtc.c **** }
 3078              		.loc 1 2066 10 is_stmt 0 view .LVU1015
 3079 0000 014B     		ldr	r3, .L212
 3080 0002 986B     		ldr	r0, [r3, #56]
2067:./Library/stm32f4xx_rtc.c **** 
 3081              		.loc 1 2067 1 view .LVU1016
 3082 0004 7047     		bx	lr
 3083              	.L213:
 3084 0006 00BF     		.align	2
 3085              	.L212:
 3086 0008 00280040 		.word	1073752064
 3087              		.cfi_endproc
 3088              	.LFE159:
 3090              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3091              		.align	1
 3092              		.global	RTC_TamperTriggerConfig
 3093              		.syntax unified
 3094              		.thumb
 3095              		.thumb_func
 3097              	RTC_TamperTriggerConfig:
 3098              	.LVL219:
 3099              	.LFB160:
2099:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3100              		.loc 1 2099 1 is_stmt 1 view -0
 3101              		.cfi_startproc
 3102              		@ args = 0, pretend = 0, frame = 0
 3103              		@ frame_needed = 0, uses_anonymous_args = 0
 3104              		@ link register save eliminated.
2101:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 3105              		.loc 1 2101 3 view .LVU1018
2102:./Library/stm32f4xx_rtc.c ****  
 3106              		.loc 1 2102 3 view .LVU1019
2104:./Library/stm32f4xx_rtc.c ****   {  
 3107              		.loc 1 2104 3 view .LVU1020
2104:./Library/stm32f4xx_rtc.c ****   {  
 3108              		.loc 1 2104 6 is_stmt 0 view .LVU1021
 3109 0000 29B9     		cbnz	r1, .L215
2107:./Library/stm32f4xx_rtc.c ****   }
 3110              		.loc 1 2107 5 is_stmt 1 view .LVU1022
2107:./Library/stm32f4xx_rtc.c ****   }
 3111              		.loc 1 2107 8 is_stmt 0 view .LVU1023
 3112 0002 064A     		ldr	r2, .L217
 3113 0004 136C     		ldr	r3, [r2, #64]
2107:./Library/stm32f4xx_rtc.c ****   }
 3114              		.loc 1 2107 16 view .LVU1024
 3115 0006 23EA4003 		bic	r3, r3, r0, lsl #1
 3116 000a 1364     		str	r3, [r2, #64]
 3117 000c 7047     		bx	lr
ARM GAS  /tmp/cccsESzb.s 			page 120


 3118              	.L215:
2112:./Library/stm32f4xx_rtc.c ****   }  
 3119              		.loc 1 2112 5 is_stmt 1 view .LVU1025
2112:./Library/stm32f4xx_rtc.c ****   }  
 3120              		.loc 1 2112 8 is_stmt 0 view .LVU1026
 3121 000e 034A     		ldr	r2, .L217
 3122 0010 136C     		ldr	r3, [r2, #64]
2112:./Library/stm32f4xx_rtc.c ****   }  
 3123              		.loc 1 2112 16 view .LVU1027
 3124 0012 43EA4003 		orr	r3, r3, r0, lsl #1
 3125 0016 1364     		str	r3, [r2, #64]
2114:./Library/stm32f4xx_rtc.c **** 
 3126              		.loc 1 2114 1 view .LVU1028
 3127 0018 7047     		bx	lr
 3128              	.L218:
 3129 001a 00BF     		.align	2
 3130              	.L217:
 3131 001c 00280040 		.word	1073752064
 3132              		.cfi_endproc
 3133              	.LFE160:
 3135              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3136              		.align	1
 3137              		.global	RTC_TamperCmd
 3138              		.syntax unified
 3139              		.thumb
 3140              		.thumb_func
 3142              	RTC_TamperCmd:
 3143              	.LVL220:
 3144              	.LFB161:
2125:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3145              		.loc 1 2125 1 is_stmt 1 view -0
 3146              		.cfi_startproc
 3147              		@ args = 0, pretend = 0, frame = 0
 3148              		@ frame_needed = 0, uses_anonymous_args = 0
 3149              		@ link register save eliminated.
2127:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3150              		.loc 1 2127 3 view .LVU1030
2128:./Library/stm32f4xx_rtc.c ****   
 3151              		.loc 1 2128 3 view .LVU1031
2130:./Library/stm32f4xx_rtc.c ****   {
 3152              		.loc 1 2130 3 view .LVU1032
2130:./Library/stm32f4xx_rtc.c ****   {
 3153              		.loc 1 2130 6 is_stmt 0 view .LVU1033
 3154 0000 21B1     		cbz	r1, .L220
2133:./Library/stm32f4xx_rtc.c ****   }
 3155              		.loc 1 2133 5 is_stmt 1 view .LVU1034
2133:./Library/stm32f4xx_rtc.c ****   }
 3156              		.loc 1 2133 8 is_stmt 0 view .LVU1035
 3157 0002 054A     		ldr	r2, .L222
 3158 0004 136C     		ldr	r3, [r2, #64]
2133:./Library/stm32f4xx_rtc.c ****   }
 3159              		.loc 1 2133 16 view .LVU1036
 3160 0006 0343     		orrs	r3, r3, r0
 3161 0008 1364     		str	r3, [r2, #64]
 3162 000a 7047     		bx	lr
 3163              	.L220:
2138:./Library/stm32f4xx_rtc.c ****   }  
ARM GAS  /tmp/cccsESzb.s 			page 121


 3164              		.loc 1 2138 5 is_stmt 1 view .LVU1037
2138:./Library/stm32f4xx_rtc.c ****   }  
 3165              		.loc 1 2138 8 is_stmt 0 view .LVU1038
 3166 000c 024A     		ldr	r2, .L222
 3167 000e 136C     		ldr	r3, [r2, #64]
2138:./Library/stm32f4xx_rtc.c ****   }  
 3168              		.loc 1 2138 16 view .LVU1039
 3169 0010 23EA0003 		bic	r3, r3, r0
 3170 0014 1364     		str	r3, [r2, #64]
2140:./Library/stm32f4xx_rtc.c **** 
 3171              		.loc 1 2140 1 view .LVU1040
 3172 0016 7047     		bx	lr
 3173              	.L223:
 3174              		.align	2
 3175              	.L222:
 3176 0018 00280040 		.word	1073752064
 3177              		.cfi_endproc
 3178              	.LFE161:
 3180              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3181              		.align	1
 3182              		.global	RTC_TamperFilterConfig
 3183              		.syntax unified
 3184              		.thumb
 3185              		.thumb_func
 3187              	RTC_TamperFilterConfig:
 3188              	.LVL221:
 3189              	.LFB162:
2156:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3190              		.loc 1 2156 1 is_stmt 1 view -0
 3191              		.cfi_startproc
 3192              		@ args = 0, pretend = 0, frame = 0
 3193              		@ frame_needed = 0, uses_anonymous_args = 0
 3194              		@ link register save eliminated.
2158:./Library/stm32f4xx_rtc.c ****    
 3195              		.loc 1 2158 3 view .LVU1042
2161:./Library/stm32f4xx_rtc.c **** 
 3196              		.loc 1 2161 3 view .LVU1043
2161:./Library/stm32f4xx_rtc.c **** 
 3197              		.loc 1 2161 6 is_stmt 0 view .LVU1044
 3198 0000 044B     		ldr	r3, .L225
 3199 0002 1A6C     		ldr	r2, [r3, #64]
2161:./Library/stm32f4xx_rtc.c **** 
 3200              		.loc 1 2161 14 view .LVU1045
 3201 0004 22F4C052 		bic	r2, r2, #6144
 3202 0008 1A64     		str	r2, [r3, #64]
2164:./Library/stm32f4xx_rtc.c **** }
 3203              		.loc 1 2164 3 is_stmt 1 view .LVU1046
2164:./Library/stm32f4xx_rtc.c **** }
 3204              		.loc 1 2164 6 is_stmt 0 view .LVU1047
 3205 000a 1A6C     		ldr	r2, [r3, #64]
2164:./Library/stm32f4xx_rtc.c **** }
 3206              		.loc 1 2164 14 view .LVU1048
 3207 000c 0243     		orrs	r2, r2, r0
 3208 000e 1A64     		str	r2, [r3, #64]
2165:./Library/stm32f4xx_rtc.c **** 
 3209              		.loc 1 2165 1 view .LVU1049
 3210 0010 7047     		bx	lr
ARM GAS  /tmp/cccsESzb.s 			page 122


 3211              	.L226:
 3212 0012 00BF     		.align	2
 3213              	.L225:
 3214 0014 00280040 		.word	1073752064
 3215              		.cfi_endproc
 3216              	.LFE162:
 3218              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3219              		.align	1
 3220              		.global	RTC_TamperSamplingFreqConfig
 3221              		.syntax unified
 3222              		.thumb
 3223              		.thumb_func
 3225              	RTC_TamperSamplingFreqConfig:
 3226              	.LVL222:
 3227              	.LFB163:
2190:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3228              		.loc 1 2190 1 is_stmt 1 view -0
 3229              		.cfi_startproc
 3230              		@ args = 0, pretend = 0, frame = 0
 3231              		@ frame_needed = 0, uses_anonymous_args = 0
 3232              		@ link register save eliminated.
2192:./Library/stm32f4xx_rtc.c ****  
 3233              		.loc 1 2192 3 view .LVU1051
2195:./Library/stm32f4xx_rtc.c **** 
 3234              		.loc 1 2195 3 view .LVU1052
2195:./Library/stm32f4xx_rtc.c **** 
 3235              		.loc 1 2195 6 is_stmt 0 view .LVU1053
 3236 0000 044B     		ldr	r3, .L228
 3237 0002 1A6C     		ldr	r2, [r3, #64]
2195:./Library/stm32f4xx_rtc.c **** 
 3238              		.loc 1 2195 14 view .LVU1054
 3239 0004 22F4E062 		bic	r2, r2, #1792
 3240 0008 1A64     		str	r2, [r3, #64]
2198:./Library/stm32f4xx_rtc.c **** }
 3241              		.loc 1 2198 3 is_stmt 1 view .LVU1055
2198:./Library/stm32f4xx_rtc.c **** }
 3242              		.loc 1 2198 6 is_stmt 0 view .LVU1056
 3243 000a 1A6C     		ldr	r2, [r3, #64]
2198:./Library/stm32f4xx_rtc.c **** }
 3244              		.loc 1 2198 14 view .LVU1057
 3245 000c 0243     		orrs	r2, r2, r0
 3246 000e 1A64     		str	r2, [r3, #64]
2199:./Library/stm32f4xx_rtc.c **** 
 3247              		.loc 1 2199 1 view .LVU1058
 3248 0010 7047     		bx	lr
 3249              	.L229:
 3250 0012 00BF     		.align	2
 3251              	.L228:
 3252 0014 00280040 		.word	1073752064
 3253              		.cfi_endproc
 3254              	.LFE163:
 3256              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3257              		.align	1
 3258              		.global	RTC_TamperPinsPrechargeDuration
 3259              		.syntax unified
 3260              		.thumb
 3261              		.thumb_func
ARM GAS  /tmp/cccsESzb.s 			page 123


 3263              	RTC_TamperPinsPrechargeDuration:
 3264              	.LVL223:
 3265              	.LFB164:
2213:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3266              		.loc 1 2213 1 is_stmt 1 view -0
 3267              		.cfi_startproc
 3268              		@ args = 0, pretend = 0, frame = 0
 3269              		@ frame_needed = 0, uses_anonymous_args = 0
 3270              		@ link register save eliminated.
2215:./Library/stm32f4xx_rtc.c ****    
 3271              		.loc 1 2215 3 view .LVU1060
2218:./Library/stm32f4xx_rtc.c **** 
 3272              		.loc 1 2218 3 view .LVU1061
2218:./Library/stm32f4xx_rtc.c **** 
 3273              		.loc 1 2218 6 is_stmt 0 view .LVU1062
 3274 0000 044B     		ldr	r3, .L231
 3275 0002 1A6C     		ldr	r2, [r3, #64]
2218:./Library/stm32f4xx_rtc.c **** 
 3276              		.loc 1 2218 14 view .LVU1063
 3277 0004 22F4C042 		bic	r2, r2, #24576
 3278 0008 1A64     		str	r2, [r3, #64]
2221:./Library/stm32f4xx_rtc.c **** }
 3279              		.loc 1 2221 3 is_stmt 1 view .LVU1064
2221:./Library/stm32f4xx_rtc.c **** }
 3280              		.loc 1 2221 6 is_stmt 0 view .LVU1065
 3281 000a 1A6C     		ldr	r2, [r3, #64]
2221:./Library/stm32f4xx_rtc.c **** }
 3282              		.loc 1 2221 14 view .LVU1066
 3283 000c 0243     		orrs	r2, r2, r0
 3284 000e 1A64     		str	r2, [r3, #64]
2222:./Library/stm32f4xx_rtc.c **** 
 3285              		.loc 1 2222 1 view .LVU1067
 3286 0010 7047     		bx	lr
 3287              	.L232:
 3288 0012 00BF     		.align	2
 3289              	.L231:
 3290 0014 00280040 		.word	1073752064
 3291              		.cfi_endproc
 3292              	.LFE164:
 3294              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3295              		.align	1
 3296              		.global	RTC_TimeStampOnTamperDetectionCmd
 3297              		.syntax unified
 3298              		.thumb
 3299              		.thumb_func
 3301              	RTC_TimeStampOnTamperDetectionCmd:
 3302              	.LVL224:
 3303              	.LFB165:
2233:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3304              		.loc 1 2233 1 is_stmt 1 view -0
 3305              		.cfi_startproc
 3306              		@ args = 0, pretend = 0, frame = 0
 3307              		@ frame_needed = 0, uses_anonymous_args = 0
 3308              		@ link register save eliminated.
2235:./Library/stm32f4xx_rtc.c ****    
 3309              		.loc 1 2235 3 view .LVU1069
2237:./Library/stm32f4xx_rtc.c ****   {
ARM GAS  /tmp/cccsESzb.s 			page 124


 3310              		.loc 1 2237 3 view .LVU1070
2237:./Library/stm32f4xx_rtc.c ****   {
 3311              		.loc 1 2237 6 is_stmt 0 view .LVU1071
 3312 0000 28B1     		cbz	r0, .L234
2240:./Library/stm32f4xx_rtc.c ****   }
 3313              		.loc 1 2240 5 is_stmt 1 view .LVU1072
2240:./Library/stm32f4xx_rtc.c ****   }
 3314              		.loc 1 2240 8 is_stmt 0 view .LVU1073
 3315 0002 064A     		ldr	r2, .L236
 3316 0004 136C     		ldr	r3, [r2, #64]
2240:./Library/stm32f4xx_rtc.c ****   }
 3317              		.loc 1 2240 16 view .LVU1074
 3318 0006 43F08003 		orr	r3, r3, #128
 3319 000a 1364     		str	r3, [r2, #64]
 3320 000c 7047     		bx	lr
 3321              	.L234:
2245:./Library/stm32f4xx_rtc.c ****   }
 3322              		.loc 1 2245 5 is_stmt 1 view .LVU1075
2245:./Library/stm32f4xx_rtc.c ****   }
 3323              		.loc 1 2245 8 is_stmt 0 view .LVU1076
 3324 000e 034A     		ldr	r2, .L236
 3325 0010 136C     		ldr	r3, [r2, #64]
2245:./Library/stm32f4xx_rtc.c ****   }
 3326              		.loc 1 2245 16 view .LVU1077
 3327 0012 23F08003 		bic	r3, r3, #128
 3328 0016 1364     		str	r3, [r2, #64]
2247:./Library/stm32f4xx_rtc.c **** 
 3329              		.loc 1 2247 1 view .LVU1078
 3330 0018 7047     		bx	lr
 3331              	.L237:
 3332 001a 00BF     		.align	2
 3333              	.L236:
 3334 001c 00280040 		.word	1073752064
 3335              		.cfi_endproc
 3336              	.LFE165:
 3338              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3339              		.align	1
 3340              		.global	RTC_TamperPullUpCmd
 3341              		.syntax unified
 3342              		.thumb
 3343              		.thumb_func
 3345              	RTC_TamperPullUpCmd:
 3346              	.LVL225:
 3347              	.LFB166:
2256:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3348              		.loc 1 2256 1 is_stmt 1 view -0
 3349              		.cfi_startproc
 3350              		@ args = 0, pretend = 0, frame = 0
 3351              		@ frame_needed = 0, uses_anonymous_args = 0
 3352              		@ link register save eliminated.
2258:./Library/stm32f4xx_rtc.c ****   
 3353              		.loc 1 2258 3 view .LVU1080
2260:./Library/stm32f4xx_rtc.c ****   {
 3354              		.loc 1 2260 2 view .LVU1081
2260:./Library/stm32f4xx_rtc.c ****   {
 3355              		.loc 1 2260 5 is_stmt 0 view .LVU1082
 3356 0000 28B1     		cbz	r0, .L239
ARM GAS  /tmp/cccsESzb.s 			page 125


2263:./Library/stm32f4xx_rtc.c ****   }
 3357              		.loc 1 2263 5 is_stmt 1 view .LVU1083
2263:./Library/stm32f4xx_rtc.c ****   }
 3358              		.loc 1 2263 8 is_stmt 0 view .LVU1084
 3359 0002 064A     		ldr	r2, .L241
 3360 0004 136C     		ldr	r3, [r2, #64]
2263:./Library/stm32f4xx_rtc.c ****   }
 3361              		.loc 1 2263 16 view .LVU1085
 3362 0006 23F40043 		bic	r3, r3, #32768
 3363 000a 1364     		str	r3, [r2, #64]
 3364 000c 7047     		bx	lr
 3365              	.L239:
2268:./Library/stm32f4xx_rtc.c ****   } 
 3366              		.loc 1 2268 5 is_stmt 1 view .LVU1086
2268:./Library/stm32f4xx_rtc.c ****   } 
 3367              		.loc 1 2268 8 is_stmt 0 view .LVU1087
 3368 000e 034A     		ldr	r2, .L241
 3369 0010 136C     		ldr	r3, [r2, #64]
2268:./Library/stm32f4xx_rtc.c ****   } 
 3370              		.loc 1 2268 16 view .LVU1088
 3371 0012 43F40043 		orr	r3, r3, #32768
 3372 0016 1364     		str	r3, [r2, #64]
2270:./Library/stm32f4xx_rtc.c **** 
 3373              		.loc 1 2270 1 view .LVU1089
 3374 0018 7047     		bx	lr
 3375              	.L242:
 3376 001a 00BF     		.align	2
 3377              	.L241:
 3378 001c 00280040 		.word	1073752064
 3379              		.cfi_endproc
 3380              	.LFE166:
 3382              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3383              		.align	1
 3384              		.global	RTC_WriteBackupRegister
 3385              		.syntax unified
 3386              		.thumb
 3387              		.thumb_func
 3389              	RTC_WriteBackupRegister:
 3390              	.LVL226:
 3391              	.LFB167:
2297:./Library/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3392              		.loc 1 2297 1 is_stmt 1 view -0
 3393              		.cfi_startproc
 3394              		@ args = 0, pretend = 0, frame = 8
 3395              		@ frame_needed = 0, uses_anonymous_args = 0
 3396              		@ link register save eliminated.
2297:./Library/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3397              		.loc 1 2297 1 is_stmt 0 view .LVU1091
 3398 0000 82B0     		sub	sp, sp, #8
 3399              	.LCFI33:
 3400              		.cfi_def_cfa_offset 8
2298:./Library/stm32f4xx_rtc.c ****   
 3401              		.loc 1 2298 3 is_stmt 1 view .LVU1092
2298:./Library/stm32f4xx_rtc.c ****   
 3402              		.loc 1 2298 17 is_stmt 0 view .LVU1093
 3403 0002 0023     		movs	r3, #0
 3404 0004 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/cccsESzb.s 			page 126


2301:./Library/stm32f4xx_rtc.c **** 
 3405              		.loc 1 2301 3 is_stmt 1 view .LVU1094
2303:./Library/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3406              		.loc 1 2303 3 view .LVU1095
2303:./Library/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3407              		.loc 1 2303 7 is_stmt 0 view .LVU1096
 3408 0006 054B     		ldr	r3, .L245
 3409 0008 0193     		str	r3, [sp, #4]
2304:./Library/stm32f4xx_rtc.c **** 
 3410              		.loc 1 2304 3 is_stmt 1 view .LVU1097
2304:./Library/stm32f4xx_rtc.c **** 
 3411              		.loc 1 2304 7 is_stmt 0 view .LVU1098
 3412 000a 019B     		ldr	r3, [sp, #4]
 3413 000c 03EB8003 		add	r3, r3, r0, lsl #2
 3414 0010 0193     		str	r3, [sp, #4]
2307:./Library/stm32f4xx_rtc.c **** }
 3415              		.loc 1 2307 3 is_stmt 1 view .LVU1099
2307:./Library/stm32f4xx_rtc.c **** }
 3416              		.loc 1 2307 4 is_stmt 0 view .LVU1100
 3417 0012 019B     		ldr	r3, [sp, #4]
2307:./Library/stm32f4xx_rtc.c **** }
 3418              		.loc 1 2307 25 view .LVU1101
 3419 0014 1960     		str	r1, [r3]
2308:./Library/stm32f4xx_rtc.c **** 
 3420              		.loc 1 2308 1 view .LVU1102
 3421 0016 02B0     		add	sp, sp, #8
 3422              	.LCFI34:
 3423              		.cfi_def_cfa_offset 0
 3424              		@ sp needed
 3425 0018 7047     		bx	lr
 3426              	.L246:
 3427 001a 00BF     		.align	2
 3428              	.L245:
 3429 001c 50280040 		.word	1073752144
 3430              		.cfi_endproc
 3431              	.LFE167:
 3433              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3434              		.align	1
 3435              		.global	RTC_ReadBackupRegister
 3436              		.syntax unified
 3437              		.thumb
 3438              		.thumb_func
 3440              	RTC_ReadBackupRegister:
 3441              	.LVL227:
 3442              	.LFB168:
2318:./Library/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3443              		.loc 1 2318 1 is_stmt 1 view -0
 3444              		.cfi_startproc
 3445              		@ args = 0, pretend = 0, frame = 8
 3446              		@ frame_needed = 0, uses_anonymous_args = 0
 3447              		@ link register save eliminated.
2318:./Library/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3448              		.loc 1 2318 1 is_stmt 0 view .LVU1104
 3449 0000 82B0     		sub	sp, sp, #8
 3450              	.LCFI35:
 3451              		.cfi_def_cfa_offset 8
2319:./Library/stm32f4xx_rtc.c ****   
ARM GAS  /tmp/cccsESzb.s 			page 127


 3452              		.loc 1 2319 3 is_stmt 1 view .LVU1105
2319:./Library/stm32f4xx_rtc.c ****   
 3453              		.loc 1 2319 17 is_stmt 0 view .LVU1106
 3454 0002 0023     		movs	r3, #0
 3455 0004 0193     		str	r3, [sp, #4]
2322:./Library/stm32f4xx_rtc.c **** 
 3456              		.loc 1 2322 3 is_stmt 1 view .LVU1107
2324:./Library/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3457              		.loc 1 2324 3 view .LVU1108
2324:./Library/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3458              		.loc 1 2324 7 is_stmt 0 view .LVU1109
 3459 0006 054B     		ldr	r3, .L249
 3460 0008 0193     		str	r3, [sp, #4]
2325:./Library/stm32f4xx_rtc.c ****   
 3461              		.loc 1 2325 3 is_stmt 1 view .LVU1110
2325:./Library/stm32f4xx_rtc.c ****   
 3462              		.loc 1 2325 7 is_stmt 0 view .LVU1111
 3463 000a 019B     		ldr	r3, [sp, #4]
 3464 000c 03EB8003 		add	r3, r3, r0, lsl #2
 3465 0010 0193     		str	r3, [sp, #4]
2328:./Library/stm32f4xx_rtc.c **** }
 3466              		.loc 1 2328 3 is_stmt 1 view .LVU1112
2328:./Library/stm32f4xx_rtc.c **** }
 3467              		.loc 1 2328 12 is_stmt 0 view .LVU1113
 3468 0012 019B     		ldr	r3, [sp, #4]
2328:./Library/stm32f4xx_rtc.c **** }
 3469              		.loc 1 2328 11 view .LVU1114
 3470 0014 1868     		ldr	r0, [r3]
 3471              	.LVL228:
2329:./Library/stm32f4xx_rtc.c **** 
 3472              		.loc 1 2329 1 view .LVU1115
 3473 0016 02B0     		add	sp, sp, #8
 3474              	.LCFI36:
 3475              		.cfi_def_cfa_offset 0
 3476              		@ sp needed
 3477 0018 7047     		bx	lr
 3478              	.L250:
 3479 001a 00BF     		.align	2
 3480              	.L249:
 3481 001c 50280040 		.word	1073752144
 3482              		.cfi_endproc
 3483              	.LFE168:
 3485              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3486              		.align	1
 3487              		.global	RTC_TamperPinSelection
 3488              		.syntax unified
 3489              		.thumb
 3490              		.thumb_func
 3492              	RTC_TamperPinSelection:
 3493              	.LVL229:
 3494              	.LFB169:
2357:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3495              		.loc 1 2357 1 is_stmt 1 view -0
 3496              		.cfi_startproc
 3497              		@ args = 0, pretend = 0, frame = 0
 3498              		@ frame_needed = 0, uses_anonymous_args = 0
 3499              		@ link register save eliminated.
ARM GAS  /tmp/cccsESzb.s 			page 128


2359:./Library/stm32f4xx_rtc.c ****   
 3500              		.loc 1 2359 3 view .LVU1117
2361:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3501              		.loc 1 2361 3 view .LVU1118
2361:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3502              		.loc 1 2361 6 is_stmt 0 view .LVU1119
 3503 0000 044B     		ldr	r3, .L252
 3504 0002 1A6C     		ldr	r2, [r3, #64]
2361:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3505              		.loc 1 2361 14 view .LVU1120
 3506 0004 22F48032 		bic	r2, r2, #65536
 3507 0008 1A64     		str	r2, [r3, #64]
2362:./Library/stm32f4xx_rtc.c **** }
 3508              		.loc 1 2362 3 is_stmt 1 view .LVU1121
2362:./Library/stm32f4xx_rtc.c **** }
 3509              		.loc 1 2362 6 is_stmt 0 view .LVU1122
 3510 000a 1A6C     		ldr	r2, [r3, #64]
2362:./Library/stm32f4xx_rtc.c **** }
 3511              		.loc 1 2362 14 view .LVU1123
 3512 000c 0243     		orrs	r2, r2, r0
 3513 000e 1A64     		str	r2, [r3, #64]
2363:./Library/stm32f4xx_rtc.c **** 
 3514              		.loc 1 2363 1 view .LVU1124
 3515 0010 7047     		bx	lr
 3516              	.L253:
 3517 0012 00BF     		.align	2
 3518              	.L252:
 3519 0014 00280040 		.word	1073752064
 3520              		.cfi_endproc
 3521              	.LFE169:
 3523              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3524              		.align	1
 3525              		.global	RTC_TimeStampPinSelection
 3526              		.syntax unified
 3527              		.thumb
 3528              		.thumb_func
 3530              	RTC_TimeStampPinSelection:
 3531              	.LVL230:
 3532              	.LFB170:
2374:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3533              		.loc 1 2374 1 is_stmt 1 view -0
 3534              		.cfi_startproc
 3535              		@ args = 0, pretend = 0, frame = 0
 3536              		@ frame_needed = 0, uses_anonymous_args = 0
 3537              		@ link register save eliminated.
2376:./Library/stm32f4xx_rtc.c ****   
 3538              		.loc 1 2376 3 view .LVU1126
2378:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3539              		.loc 1 2378 3 view .LVU1127
2378:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3540              		.loc 1 2378 6 is_stmt 0 view .LVU1128
 3541 0000 044B     		ldr	r3, .L255
 3542 0002 1A6C     		ldr	r2, [r3, #64]
2378:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3543              		.loc 1 2378 14 view .LVU1129
 3544 0004 22F40032 		bic	r2, r2, #131072
 3545 0008 1A64     		str	r2, [r3, #64]
ARM GAS  /tmp/cccsESzb.s 			page 129


2379:./Library/stm32f4xx_rtc.c **** }
 3546              		.loc 1 2379 3 is_stmt 1 view .LVU1130
2379:./Library/stm32f4xx_rtc.c **** }
 3547              		.loc 1 2379 6 is_stmt 0 view .LVU1131
 3548 000a 1A6C     		ldr	r2, [r3, #64]
2379:./Library/stm32f4xx_rtc.c **** }
 3549              		.loc 1 2379 14 view .LVU1132
 3550 000c 0243     		orrs	r2, r2, r0
 3551 000e 1A64     		str	r2, [r3, #64]
2380:./Library/stm32f4xx_rtc.c **** 
 3552              		.loc 1 2380 1 view .LVU1133
 3553 0010 7047     		bx	lr
 3554              	.L256:
 3555 0012 00BF     		.align	2
 3556              	.L255:
 3557 0014 00280040 		.word	1073752064
 3558              		.cfi_endproc
 3559              	.LFE170:
 3561              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3562              		.align	1
 3563              		.global	RTC_OutputTypeConfig
 3564              		.syntax unified
 3565              		.thumb
 3566              		.thumb_func
 3568              	RTC_OutputTypeConfig:
 3569              	.LVL231:
 3570              	.LFB171:
2393:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3571              		.loc 1 2393 1 is_stmt 1 view -0
 3572              		.cfi_startproc
 3573              		@ args = 0, pretend = 0, frame = 0
 3574              		@ frame_needed = 0, uses_anonymous_args = 0
 3575              		@ link register save eliminated.
2395:./Library/stm32f4xx_rtc.c ****   
 3576              		.loc 1 2395 3 view .LVU1135
2397:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3577              		.loc 1 2397 3 view .LVU1136
2397:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3578              		.loc 1 2397 6 is_stmt 0 view .LVU1137
 3579 0000 044B     		ldr	r3, .L258
 3580 0002 1A6C     		ldr	r2, [r3, #64]
2397:./Library/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3581              		.loc 1 2397 14 view .LVU1138
 3582 0004 22F48022 		bic	r2, r2, #262144
 3583 0008 1A64     		str	r2, [r3, #64]
2398:./Library/stm32f4xx_rtc.c **** }
 3584              		.loc 1 2398 3 is_stmt 1 view .LVU1139
2398:./Library/stm32f4xx_rtc.c **** }
 3585              		.loc 1 2398 6 is_stmt 0 view .LVU1140
 3586 000a 1A6C     		ldr	r2, [r3, #64]
2398:./Library/stm32f4xx_rtc.c **** }
 3587              		.loc 1 2398 14 view .LVU1141
 3588 000c 0243     		orrs	r2, r2, r0
 3589 000e 1A64     		str	r2, [r3, #64]
2399:./Library/stm32f4xx_rtc.c **** 
 3590              		.loc 1 2399 1 view .LVU1142
 3591 0010 7047     		bx	lr
ARM GAS  /tmp/cccsESzb.s 			page 130


 3592              	.L259:
 3593 0012 00BF     		.align	2
 3594              	.L258:
 3595 0014 00280040 		.word	1073752064
 3596              		.cfi_endproc
 3597              	.LFE171:
 3599              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3600              		.align	1
 3601              		.global	RTC_SynchroShiftConfig
 3602              		.syntax unified
 3603              		.thumb
 3604              		.thumb_func
 3606              	RTC_SynchroShiftConfig:
 3607              	.LVL232:
 3608              	.LFB172:
2431:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3609              		.loc 1 2431 1 is_stmt 1 view -0
 3610              		.cfi_startproc
 3611              		@ args = 0, pretend = 0, frame = 0
 3612              		@ frame_needed = 0, uses_anonymous_args = 0
2431:./Library/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3613              		.loc 1 2431 1 is_stmt 0 view .LVU1144
 3614 0000 08B5     		push	{r3, lr}
 3615              	.LCFI37:
 3616              		.cfi_def_cfa_offset 8
 3617              		.cfi_offset 3, -8
 3618              		.cfi_offset 14, -4
2432:./Library/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3619              		.loc 1 2432 3 is_stmt 1 view .LVU1145
 3620              	.LVL233:
2433:./Library/stm32f4xx_rtc.c **** 
 3621              		.loc 1 2433 3 view .LVU1146
2436:./Library/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
 3622              		.loc 1 2436 3 view .LVU1147
2437:./Library/stm32f4xx_rtc.c **** 
 3623              		.loc 1 2437 3 view .LVU1148
2440:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3624              		.loc 1 2440 3 view .LVU1149
2440:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3625              		.loc 1 2440 12 is_stmt 0 view .LVU1150
 3626 0002 164B     		ldr	r3, .L271
 3627 0004 CA22     		movs	r2, #202
 3628 0006 5A62     		str	r2, [r3, #36]
2441:./Library/stm32f4xx_rtc.c ****   
 3629              		.loc 1 2441 3 is_stmt 1 view .LVU1151
2441:./Library/stm32f4xx_rtc.c ****   
 3630              		.loc 1 2441 12 is_stmt 0 view .LVU1152
 3631 0008 5322     		movs	r2, #83
 3632 000a 5A62     		str	r2, [r3, #36]
2444:./Library/stm32f4xx_rtc.c ****   {
 3633              		.loc 1 2444 3 is_stmt 1 view .LVU1153
2444:./Library/stm32f4xx_rtc.c ****   {
 3634              		.loc 1 2444 11 is_stmt 0 view .LVU1154
 3635 000c DB68     		ldr	r3, [r3, #12]
2444:./Library/stm32f4xx_rtc.c ****   {
 3636              		.loc 1 2444 6 view .LVU1155
 3637 000e 13F0080F 		tst	r3, #8
ARM GAS  /tmp/cccsESzb.s 			page 131


 3638 0012 0BD1     		bne	.L265
 3639              	.LVL234:
 3640              	.L262:
2454:./Library/stm32f4xx_rtc.c ****   {
 3641              		.loc 1 2454 3 is_stmt 1 view .LVU1156
2454:./Library/stm32f4xx_rtc.c ****   {
 3642              		.loc 1 2454 11 is_stmt 0 view .LVU1157
 3643 0014 114B     		ldr	r3, .L271
 3644 0016 DB68     		ldr	r3, [r3, #12]
2454:./Library/stm32f4xx_rtc.c ****   {
 3645              		.loc 1 2454 6 view .LVU1158
 3646 0018 13F0080F 		tst	r3, #8
 3647 001c 19D1     		bne	.L266
2457:./Library/stm32f4xx_rtc.c ****     {
 3648              		.loc 1 2457 5 is_stmt 1 view .LVU1159
2457:./Library/stm32f4xx_rtc.c ****     {
 3649              		.loc 1 2457 12 is_stmt 0 view .LVU1160
 3650 001e 0F4B     		ldr	r3, .L271
 3651 0020 9B68     		ldr	r3, [r3, #8]
2457:./Library/stm32f4xx_rtc.c ****     {
 3652              		.loc 1 2457 7 view .LVU1161
 3653 0022 13F0100F 		tst	r3, #16
 3654 0026 0CD0     		beq	.L270
2473:./Library/stm32f4xx_rtc.c ****     }
 3655              		.loc 1 2473 14 view .LVU1162
 3656 0028 0020     		movs	r0, #0
 3657              	.LVL235:
2473:./Library/stm32f4xx_rtc.c ****     }
 3658              		.loc 1 2473 14 view .LVU1163
 3659 002a 13E0     		b	.L264
 3660              	.LVL236:
 3661              	.L265:
2433:./Library/stm32f4xx_rtc.c **** 
 3662              		.loc 1 2433 12 view .LVU1164
 3663 002c 0023     		movs	r3, #0
 3664              	.LVL237:
 3665              	.L261:
2447:./Library/stm32f4xx_rtc.c ****     {
 3666              		.loc 1 2447 49 is_stmt 1 view .LVU1165
2447:./Library/stm32f4xx_rtc.c ****     {
 3667              		.loc 1 2447 17 is_stmt 0 view .LVU1166
 3668 002e 0B4A     		ldr	r2, .L271
 3669 0030 D268     		ldr	r2, [r2, #12]
2447:./Library/stm32f4xx_rtc.c ****     {
 3670              		.loc 1 2447 49 view .LVU1167
 3671 0032 12F0080F 		tst	r2, #8
 3672 0036 EDD0     		beq	.L262
2447:./Library/stm32f4xx_rtc.c ****     {
 3673              		.loc 1 2447 49 discriminator 1 view .LVU1168
 3674 0038 B3F5805F 		cmp	r3, #4096
 3675 003c EAD0     		beq	.L262
2449:./Library/stm32f4xx_rtc.c ****     }
 3676              		.loc 1 2449 7 is_stmt 1 view .LVU1169
2449:./Library/stm32f4xx_rtc.c ****     }
 3677              		.loc 1 2449 16 is_stmt 0 view .LVU1170
 3678 003e 0133     		adds	r3, r3, #1
 3679              	.LVL238:
ARM GAS  /tmp/cccsESzb.s 			page 132


2449:./Library/stm32f4xx_rtc.c ****     }
 3680              		.loc 1 2449 16 view .LVU1171
 3681 0040 F5E7     		b	.L261
 3682              	.LVL239:
 3683              	.L270:
2460:./Library/stm32f4xx_rtc.c ****     
 3684              		.loc 1 2460 7 is_stmt 1 view .LVU1172
2460:./Library/stm32f4xx_rtc.c ****     
 3685              		.loc 1 2460 58 is_stmt 0 view .LVU1173
 3686 0042 0843     		orrs	r0, r0, r1
 3687              	.LVL240:
2460:./Library/stm32f4xx_rtc.c ****     
 3688              		.loc 1 2460 19 view .LVU1174
 3689 0044 054B     		ldr	r3, .L271
 3690 0046 D862     		str	r0, [r3, #44]
2462:./Library/stm32f4xx_rtc.c ****       {
 3691              		.loc 1 2462 7 is_stmt 1 view .LVU1175
2462:./Library/stm32f4xx_rtc.c ****       {
 3692              		.loc 1 2462 10 is_stmt 0 view .LVU1176
 3693 0048 FFF7FEFF 		bl	RTC_WaitForSynchro
 3694              	.LVL241:
2462:./Library/stm32f4xx_rtc.c ****       {
 3695              		.loc 1 2462 9 view .LVU1177
 3696 004c 10B1     		cbz	r0, .L264
2468:./Library/stm32f4xx_rtc.c ****       }
 3697              		.loc 1 2468 16 view .LVU1178
 3698 004e 0120     		movs	r0, #1
 3699 0050 00E0     		b	.L264
 3700              	.LVL242:
 3701              	.L266:
2478:./Library/stm32f4xx_rtc.c ****   }
 3702              		.loc 1 2478 12 view .LVU1179
 3703 0052 0020     		movs	r0, #0
 3704              	.LVL243:
 3705              	.L264:
2482:./Library/stm32f4xx_rtc.c ****   
 3706              		.loc 1 2482 3 is_stmt 1 view .LVU1180
2482:./Library/stm32f4xx_rtc.c ****   
 3707              		.loc 1 2482 12 is_stmt 0 view .LVU1181
 3708 0054 014B     		ldr	r3, .L271
 3709 0056 FF22     		movs	r2, #255
 3710 0058 5A62     		str	r2, [r3, #36]
2484:./Library/stm32f4xx_rtc.c **** }
 3711              		.loc 1 2484 3 is_stmt 1 view .LVU1182
2485:./Library/stm32f4xx_rtc.c **** 
 3712              		.loc 1 2485 1 is_stmt 0 view .LVU1183
 3713 005a 08BD     		pop	{r3, pc}
 3714              	.L272:
 3715              		.align	2
 3716              	.L271:
 3717 005c 00280040 		.word	1073752064
 3718              		.cfi_endproc
 3719              	.LFE172:
 3721              		.section	.text.RTC_ITConfig,"ax",%progbits
 3722              		.align	1
 3723              		.global	RTC_ITConfig
 3724              		.syntax unified
ARM GAS  /tmp/cccsESzb.s 			page 133


 3725              		.thumb
 3726              		.thumb_func
 3728              	RTC_ITConfig:
 3729              	.LVL244:
 3730              	.LFB173:
2551:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3731              		.loc 1 2551 1 is_stmt 1 view -0
 3732              		.cfi_startproc
 3733              		@ args = 0, pretend = 0, frame = 0
 3734              		@ frame_needed = 0, uses_anonymous_args = 0
 3735              		@ link register save eliminated.
2553:./Library/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 3736              		.loc 1 2553 3 view .LVU1185
2554:./Library/stm32f4xx_rtc.c **** 
 3737              		.loc 1 2554 3 view .LVU1186
2557:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3738              		.loc 1 2557 3 view .LVU1187
2557:./Library/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3739              		.loc 1 2557 12 is_stmt 0 view .LVU1188
 3740 0000 104B     		ldr	r3, .L276
 3741 0002 CA22     		movs	r2, #202
 3742 0004 5A62     		str	r2, [r3, #36]
2558:./Library/stm32f4xx_rtc.c **** 
 3743              		.loc 1 2558 3 is_stmt 1 view .LVU1189
2558:./Library/stm32f4xx_rtc.c **** 
 3744              		.loc 1 2558 12 is_stmt 0 view .LVU1190
 3745 0006 5322     		movs	r2, #83
 3746 0008 5A62     		str	r2, [r3, #36]
2560:./Library/stm32f4xx_rtc.c ****   {
 3747              		.loc 1 2560 3 is_stmt 1 view .LVU1191
2560:./Library/stm32f4xx_rtc.c ****   {
 3748              		.loc 1 2560 6 is_stmt 0 view .LVU1192
 3749 000a 69B1     		cbz	r1, .L274
2563:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3750              		.loc 1 2563 5 is_stmt 1 view .LVU1193
2563:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3751              		.loc 1 2563 8 is_stmt 0 view .LVU1194
 3752 000c 9A68     		ldr	r2, [r3, #8]
2563:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3753              		.loc 1 2563 16 view .LVU1195
 3754 000e 20F00401 		bic	r1, r0, #4
 3755              	.LVL245:
2563:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3756              		.loc 1 2563 13 view .LVU1196
 3757 0012 0A43     		orrs	r2, r2, r1
 3758 0014 9A60     		str	r2, [r3, #8]
2565:./Library/stm32f4xx_rtc.c ****   }
 3759              		.loc 1 2565 5 is_stmt 1 view .LVU1197
2565:./Library/stm32f4xx_rtc.c ****   }
 3760              		.loc 1 2565 8 is_stmt 0 view .LVU1198
 3761 0016 1A6C     		ldr	r2, [r3, #64]
2565:./Library/stm32f4xx_rtc.c ****   }
 3762              		.loc 1 2565 19 view .LVU1199
 3763 0018 00F00400 		and	r0, r0, #4
 3764              	.LVL246:
2565:./Library/stm32f4xx_rtc.c ****   }
 3765              		.loc 1 2565 16 view .LVU1200
ARM GAS  /tmp/cccsESzb.s 			page 134


 3766 001c 1043     		orrs	r0, r0, r2
 3767 001e 1864     		str	r0, [r3, #64]
 3768              	.L275:
2575:./Library/stm32f4xx_rtc.c **** }
 3769              		.loc 1 2575 3 is_stmt 1 view .LVU1201
2575:./Library/stm32f4xx_rtc.c **** }
 3770              		.loc 1 2575 12 is_stmt 0 view .LVU1202
 3771 0020 084B     		ldr	r3, .L276
 3772 0022 FF22     		movs	r2, #255
 3773 0024 5A62     		str	r2, [r3, #36]
2576:./Library/stm32f4xx_rtc.c **** 
 3774              		.loc 1 2576 1 view .LVU1203
 3775 0026 7047     		bx	lr
 3776              	.LVL247:
 3777              	.L274:
2570:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3778              		.loc 1 2570 5 is_stmt 1 view .LVU1204
2570:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3779              		.loc 1 2570 8 is_stmt 0 view .LVU1205
 3780 0028 064B     		ldr	r3, .L276
 3781 002a 9A68     		ldr	r2, [r3, #8]
2570:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3782              		.loc 1 2570 35 view .LVU1206
 3783 002c 20F00401 		bic	r1, r0, #4
 3784              	.LVL248:
2570:./Library/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 3785              		.loc 1 2570 13 view .LVU1207
 3786 0030 22EA0102 		bic	r2, r2, r1
 3787 0034 9A60     		str	r2, [r3, #8]
2572:./Library/stm32f4xx_rtc.c ****   }
 3788              		.loc 1 2572 5 is_stmt 1 view .LVU1208
2572:./Library/stm32f4xx_rtc.c ****   }
 3789              		.loc 1 2572 8 is_stmt 0 view .LVU1209
 3790 0036 1A6C     		ldr	r2, [r3, #64]
2572:./Library/stm32f4xx_rtc.c ****   }
 3791              		.loc 1 2572 38 view .LVU1210
 3792 0038 00F00400 		and	r0, r0, #4
 3793              	.LVL249:
2572:./Library/stm32f4xx_rtc.c ****   }
 3794              		.loc 1 2572 16 view .LVU1211
 3795 003c 22EA0002 		bic	r2, r2, r0
 3796 0040 1A64     		str	r2, [r3, #64]
 3797 0042 EDE7     		b	.L275
 3798              	.L277:
 3799              		.align	2
 3800              	.L276:
 3801 0044 00280040 		.word	1073752064
 3802              		.cfi_endproc
 3803              	.LFE173:
 3805              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 3806              		.align	1
 3807              		.global	RTC_GetFlagStatus
 3808              		.syntax unified
 3809              		.thumb
 3810              		.thumb_func
 3812              	RTC_GetFlagStatus:
 3813              	.LVL250:
ARM GAS  /tmp/cccsESzb.s 			page 135


 3814              	.LFB174:
2600:./Library/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 3815              		.loc 1 2600 1 is_stmt 1 view -0
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 0
 3818              		@ frame_needed = 0, uses_anonymous_args = 0
 3819              		@ link register save eliminated.
2601:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3820              		.loc 1 2601 3 view .LVU1213
2602:./Library/stm32f4xx_rtc.c ****   
 3821              		.loc 1 2602 3 view .LVU1214
2605:./Library/stm32f4xx_rtc.c ****   
 3822              		.loc 1 2605 3 view .LVU1215
2608:./Library/stm32f4xx_rtc.c ****   
 3823              		.loc 1 2608 3 view .LVU1216
2608:./Library/stm32f4xx_rtc.c ****   
 3824              		.loc 1 2608 26 is_stmt 0 view .LVU1217
 3825 0000 074B     		ldr	r3, .L281
 3826 0002 DB68     		ldr	r3, [r3, #12]
2608:./Library/stm32f4xx_rtc.c ****   
 3827              		.loc 1 2608 10 view .LVU1218
 3828 0004 23F07F43 		bic	r3, r3, #-16777216
 3829 0008 23F47E03 		bic	r3, r3, #16646144
 3830 000c 23F40043 		bic	r3, r3, #32768
 3831 0010 23F08003 		bic	r3, r3, #128
 3832              	.LVL251:
2611:./Library/stm32f4xx_rtc.c ****   {
 3833              		.loc 1 2611 3 is_stmt 1 view .LVU1219
2611:./Library/stm32f4xx_rtc.c ****   {
 3834              		.loc 1 2611 6 is_stmt 0 view .LVU1220
 3835 0014 0342     		tst	r3, r0
 3836 0016 01D0     		beq	.L280
2613:./Library/stm32f4xx_rtc.c ****   }
 3837              		.loc 1 2613 15 view .LVU1221
 3838 0018 0120     		movs	r0, #1
 3839              	.LVL252:
2613:./Library/stm32f4xx_rtc.c ****   }
 3840              		.loc 1 2613 15 view .LVU1222
 3841 001a 7047     		bx	lr
 3842              	.LVL253:
 3843              	.L280:
2617:./Library/stm32f4xx_rtc.c ****   }
 3844              		.loc 1 2617 15 view .LVU1223
 3845 001c 0020     		movs	r0, #0
 3846              	.LVL254:
2619:./Library/stm32f4xx_rtc.c **** }
 3847              		.loc 1 2619 3 is_stmt 1 view .LVU1224
2620:./Library/stm32f4xx_rtc.c **** 
 3848              		.loc 1 2620 1 is_stmt 0 view .LVU1225
 3849 001e 7047     		bx	lr
 3850              	.L282:
 3851              		.align	2
 3852              	.L281:
 3853 0020 00280040 		.word	1073752064
 3854              		.cfi_endproc
 3855              	.LFE174:
 3857              		.section	.text.RTC_ClearFlag,"ax",%progbits
ARM GAS  /tmp/cccsESzb.s 			page 136


 3858              		.align	1
 3859              		.global	RTC_ClearFlag
 3860              		.syntax unified
 3861              		.thumb
 3862              		.thumb_func
 3864              	RTC_ClearFlag:
 3865              	.LVL255:
 3866              	.LFB175:
2637:./Library/stm32f4xx_rtc.c ****   /* Check the parameters */
 3867              		.loc 1 2637 1 is_stmt 1 view -0
 3868              		.cfi_startproc
 3869              		@ args = 0, pretend = 0, frame = 0
 3870              		@ frame_needed = 0, uses_anonymous_args = 0
 3871              		@ link register save eliminated.
2639:./Library/stm32f4xx_rtc.c **** 
 3872              		.loc 1 2639 3 view .LVU1227
2642:./Library/stm32f4xx_rtc.c **** }
 3873              		.loc 1 2642 3 view .LVU1228
2642:./Library/stm32f4xx_rtc.c **** }
 3874              		.loc 1 2642 63 is_stmt 0 view .LVU1229
 3875 0000 80B2     		uxth	r0, r0
 3876              	.LVL256:
2642:./Library/stm32f4xx_rtc.c **** }
 3877              		.loc 1 2642 63 view .LVU1230
 3878 0002 40F08000 		orr	r0, r0, #128
2642:./Library/stm32f4xx_rtc.c **** }
 3879              		.loc 1 2642 93 view .LVU1231
 3880 0006 044A     		ldr	r2, .L284
 3881 0008 D368     		ldr	r3, [r2, #12]
2642:./Library/stm32f4xx_rtc.c **** }
 3882              		.loc 1 2642 79 view .LVU1232
 3883 000a 03F08003 		and	r3, r3, #128
2642:./Library/stm32f4xx_rtc.c **** }
 3884              		.loc 1 2642 14 view .LVU1233
 3885 000e 63EA0003 		orn	r3, r3, r0
2642:./Library/stm32f4xx_rtc.c **** }
 3886              		.loc 1 2642 12 view .LVU1234
 3887 0012 D360     		str	r3, [r2, #12]
2643:./Library/stm32f4xx_rtc.c **** 
 3888              		.loc 1 2643 1 view .LVU1235
 3889 0014 7047     		bx	lr
 3890              	.L285:
 3891 0016 00BF     		.align	2
 3892              	.L284:
 3893 0018 00280040 		.word	1073752064
 3894              		.cfi_endproc
 3895              	.LFE175:
 3897              		.section	.text.RTC_GetITStatus,"ax",%progbits
 3898              		.align	1
 3899              		.global	RTC_GetITStatus
 3900              		.syntax unified
 3901              		.thumb
 3902              		.thumb_func
 3904              	RTC_GetITStatus:
 3905              	.LVL257:
 3906              	.LFB176:
2658:./Library/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
ARM GAS  /tmp/cccsESzb.s 			page 137


 3907              		.loc 1 2658 1 is_stmt 1 view -0
 3908              		.cfi_startproc
 3909              		@ args = 0, pretend = 0, frame = 0
 3910              		@ frame_needed = 0, uses_anonymous_args = 0
 3911              		@ link register save eliminated.
2659:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 3912              		.loc 1 2659 3 view .LVU1237
2660:./Library/stm32f4xx_rtc.c ****  
 3913              		.loc 1 2660 3 view .LVU1238
2663:./Library/stm32f4xx_rtc.c ****   
 3914              		.loc 1 2663 3 view .LVU1239
2666:./Library/stm32f4xx_rtc.c ****  
 3915              		.loc 1 2666 3 view .LVU1240
2666:./Library/stm32f4xx_rtc.c ****  
 3916              		.loc 1 2666 26 is_stmt 0 view .LVU1241
 3917 0000 0C49     		ldr	r1, .L290
 3918 0002 0B6C     		ldr	r3, [r1, #64]
2666:./Library/stm32f4xx_rtc.c ****  
 3919              		.loc 1 2666 10 view .LVU1242
 3920 0004 03F00403 		and	r3, r3, #4
 3921              	.LVL258:
2669:./Library/stm32f4xx_rtc.c ****   
 3922              		.loc 1 2669 3 is_stmt 1 view .LVU1243
2669:./Library/stm32f4xx_rtc.c ****   
 3923              		.loc 1 2669 33 is_stmt 0 view .LVU1244
 3924 0008 8A68     		ldr	r2, [r1, #8]
2669:./Library/stm32f4xx_rtc.c ****   
 3925              		.loc 1 2669 38 view .LVU1245
 3926 000a 0240     		ands	r2, r2, r0
2669:./Library/stm32f4xx_rtc.c ****   
 3927              		.loc 1 2669 58 view .LVU1246
 3928 000c 03EAD03C 		and	ip, r3, r0, lsr #15
2669:./Library/stm32f4xx_rtc.c ****   
 3929              		.loc 1 2669 48 view .LVU1247
 3930 0010 42EA0C02 		orr	r2, r2, ip
2669:./Library/stm32f4xx_rtc.c ****   
 3931              		.loc 1 2669 86 view .LVU1248
 3932 0014 03EA1043 		and	r3, r3, r0, lsr #16
 3933              	.LVL259:
2672:./Library/stm32f4xx_rtc.c ****   
 3934              		.loc 1 2672 3 is_stmt 1 view .LVU1249
2672:./Library/stm32f4xx_rtc.c ****   
 3935              		.loc 1 2672 27 is_stmt 0 view .LVU1250
 3936 0018 C968     		ldr	r1, [r1, #12]
2672:./Library/stm32f4xx_rtc.c ****   
 3937              		.loc 1 2672 10 view .LVU1251
 3938 001a 01EA1011 		and	r1, r1, r0, lsr #4
 3939              	.LVL260:
2675:./Library/stm32f4xx_rtc.c ****   {
 3940              		.loc 1 2675 3 is_stmt 1 view .LVU1252
2675:./Library/stm32f4xx_rtc.c ****   {
 3941              		.loc 1 2675 6 is_stmt 0 view .LVU1253
 3942 001e 1A43     		orrs	r2, r2, r3
 3943              	.LVL261:
2675:./Library/stm32f4xx_rtc.c ****   {
 3944              		.loc 1 2675 6 view .LVU1254
 3945 0020 03D0     		beq	.L288
ARM GAS  /tmp/cccsESzb.s 			page 138


2675:./Library/stm32f4xx_rtc.c ****   {
 3946              		.loc 1 2675 53 discriminator 1 view .LVU1255
 3947 0022 89B2     		uxth	r1, r1
 3948              	.LVL262:
2675:./Library/stm32f4xx_rtc.c ****   {
 3949              		.loc 1 2675 41 discriminator 1 view .LVU1256
 3950 0024 19B9     		cbnz	r1, .L289
2681:./Library/stm32f4xx_rtc.c ****   }
 3951              		.loc 1 2681 15 view .LVU1257
 3952 0026 0020     		movs	r0, #0
 3953              	.LVL263:
2681:./Library/stm32f4xx_rtc.c ****   }
 3954              		.loc 1 2681 15 view .LVU1258
 3955 0028 7047     		bx	lr
 3956              	.LVL264:
 3957              	.L288:
2681:./Library/stm32f4xx_rtc.c ****   }
 3958              		.loc 1 2681 15 view .LVU1259
 3959 002a 0020     		movs	r0, #0
 3960              	.LVL265:
2681:./Library/stm32f4xx_rtc.c ****   }
 3961              		.loc 1 2681 15 view .LVU1260
 3962 002c 7047     		bx	lr
 3963              	.LVL266:
 3964              	.L289:
2677:./Library/stm32f4xx_rtc.c ****   }
 3965              		.loc 1 2677 15 view .LVU1261
 3966 002e 0120     		movs	r0, #1
 3967              	.LVL267:
2683:./Library/stm32f4xx_rtc.c **** }
 3968              		.loc 1 2683 3 is_stmt 1 view .LVU1262
2684:./Library/stm32f4xx_rtc.c **** 
 3969              		.loc 1 2684 1 is_stmt 0 view .LVU1263
 3970 0030 7047     		bx	lr
 3971              	.L291:
 3972 0032 00BF     		.align	2
 3973              	.L290:
 3974 0034 00280040 		.word	1073752064
 3975              		.cfi_endproc
 3976              	.LFE176:
 3978              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3979              		.align	1
 3980              		.global	RTC_ClearITPendingBit
 3981              		.syntax unified
 3982              		.thumb
 3983              		.thumb_func
 3985              	RTC_ClearITPendingBit:
 3986              	.LVL268:
 3987              	.LFB177:
2699:./Library/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3988              		.loc 1 2699 1 is_stmt 1 view -0
 3989              		.cfi_startproc
 3990              		@ args = 0, pretend = 0, frame = 0
 3991              		@ frame_needed = 0, uses_anonymous_args = 0
 3992              		@ link register save eliminated.
2700:./Library/stm32f4xx_rtc.c **** 
 3993              		.loc 1 2700 3 view .LVU1265
ARM GAS  /tmp/cccsESzb.s 			page 139


2703:./Library/stm32f4xx_rtc.c **** 
 3994              		.loc 1 2703 3 view .LVU1266
2706:./Library/stm32f4xx_rtc.c **** 
 3995              		.loc 1 2706 3 view .LVU1267
2709:./Library/stm32f4xx_rtc.c **** }
 3996              		.loc 1 2709 3 view .LVU1268
2709:./Library/stm32f4xx_rtc.c **** }
 3997              		.loc 1 2709 61 is_stmt 0 view .LVU1269
 3998 0000 C0F30F10 		ubfx	r0, r0, #4, #16
 3999              	.LVL269:
2709:./Library/stm32f4xx_rtc.c **** }
 4000              		.loc 1 2709 61 view .LVU1270
 4001 0004 40F08000 		orr	r0, r0, #128
2709:./Library/stm32f4xx_rtc.c **** }
 4002              		.loc 1 2709 91 view .LVU1271
 4003 0008 034A     		ldr	r2, .L293
 4004 000a D368     		ldr	r3, [r2, #12]
2709:./Library/stm32f4xx_rtc.c **** }
 4005              		.loc 1 2709 77 view .LVU1272
 4006 000c 03F08003 		and	r3, r3, #128
2709:./Library/stm32f4xx_rtc.c **** }
 4007              		.loc 1 2709 14 view .LVU1273
 4008 0010 63EA0003 		orn	r3, r3, r0
2709:./Library/stm32f4xx_rtc.c **** }
 4009              		.loc 1 2709 12 view .LVU1274
 4010 0014 D360     		str	r3, [r2, #12]
2710:./Library/stm32f4xx_rtc.c **** 
 4011              		.loc 1 2710 1 view .LVU1275
 4012 0016 7047     		bx	lr
 4013              	.L294:
 4014              		.align	2
 4015              	.L293:
 4016 0018 00280040 		.word	1073752064
 4017              		.cfi_endproc
 4018              	.LFE177:
 4020              		.text
 4021              	.Letext0:
 4022              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 4023              		.file 3 "./CORE/stm32f4xx.h"
 4024              		.file 4 "./Library/stm32f4xx_rtc.h"
ARM GAS  /tmp/cccsESzb.s 			page 140


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
     /tmp/cccsESzb.s:21     .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/cccsESzb.s:26     .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/cccsESzb.s:75     .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/cccsESzb.s:80     .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/cccsESzb.s:108    .text.RTC_StructInit:0000000000000000 $t
     /tmp/cccsESzb.s:114    .text.RTC_StructInit:0000000000000000 RTC_StructInit
     /tmp/cccsESzb.s:140    .text.RTC_WriteProtectionCmd:0000000000000000 $t
     /tmp/cccsESzb.s:146    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
     /tmp/cccsESzb.s:179    .text.RTC_WriteProtectionCmd:0000000000000018 $d
     /tmp/cccsESzb.s:184    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/cccsESzb.s:190    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/cccsESzb.s:278    .text.RTC_EnterInitMode:000000000000004c $d
     /tmp/cccsESzb.s:283    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/cccsESzb.s:289    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/cccsESzb.s:308    .text.RTC_ExitInitMode:000000000000000c $d
     /tmp/cccsESzb.s:313    .text.RTC_Init:0000000000000000 $t
     /tmp/cccsESzb.s:319    .text.RTC_Init:0000000000000000 RTC_Init
     /tmp/cccsESzb.s:403    .text.RTC_Init:0000000000000044 $d
     /tmp/cccsESzb.s:408    .text.RTC_WaitForSynchro:0000000000000000 $t
     /tmp/cccsESzb.s:414    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
     /tmp/cccsESzb.s:507    .text.RTC_WaitForSynchro:000000000000004c $d
     /tmp/cccsESzb.s:512    .text.RTC_DeInit:0000000000000000 $t
     /tmp/cccsESzb.s:518    .text.RTC_DeInit:0000000000000000 RTC_DeInit
     /tmp/cccsESzb.s:677    .text.RTC_DeInit:0000000000000090 $d
     /tmp/cccsESzb.s:683    .text.RTC_RefClockCmd:0000000000000000 $t
     /tmp/cccsESzb.s:689    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
     /tmp/cccsESzb.s:761    .text.RTC_RefClockCmd:000000000000003c $d
     /tmp/cccsESzb.s:766    .text.RTC_BypassShadowCmd:0000000000000000 $t
     /tmp/cccsESzb.s:772    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
     /tmp/cccsESzb.s:820    .text.RTC_BypassShadowCmd:000000000000002c $d
     /tmp/cccsESzb.s:825    .text.RTC_SetTime:0000000000000000 $t
     /tmp/cccsESzb.s:831    .text.RTC_SetTime:0000000000000000 RTC_SetTime
     /tmp/cccsESzb.s:1000   .text.RTC_SetTime:00000000000000a0 $d
     /tmp/cccsESzb.s:1005   .text.RTC_TimeStructInit:0000000000000000 $t
     /tmp/cccsESzb.s:1011   .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
     /tmp/cccsESzb.s:1038   .text.RTC_GetTime:0000000000000000 $t
     /tmp/cccsESzb.s:1044   .text.RTC_GetTime:0000000000000000 RTC_GetTime
     /tmp/cccsESzb.s:1125   .text.RTC_GetTime:0000000000000040 $d
     /tmp/cccsESzb.s:1130   .text.RTC_GetSubSecond:0000000000000000 $t
     /tmp/cccsESzb.s:1136   .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
     /tmp/cccsESzb.s:1158   .text.RTC_GetSubSecond:0000000000000008 $d
     /tmp/cccsESzb.s:1163   .text.RTC_SetDate:0000000000000000 $t
     /tmp/cccsESzb.s:1169   .text.RTC_SetDate:0000000000000000 RTC_SetDate
     /tmp/cccsESzb.s:1330   .text.RTC_SetDate:000000000000008c $d
     /tmp/cccsESzb.s:1335   .text.RTC_DateStructInit:0000000000000000 $t
     /tmp/cccsESzb.s:1341   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
     /tmp/cccsESzb.s:1369   .text.RTC_GetDate:0000000000000000 $t
     /tmp/cccsESzb.s:1375   .text.RTC_GetDate:0000000000000000 RTC_GetDate
     /tmp/cccsESzb.s:1453   .text.RTC_GetDate:000000000000003c $d
     /tmp/cccsESzb.s:1458   .text.RTC_SetAlarm:0000000000000000 $t
     /tmp/cccsESzb.s:1464   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
     /tmp/cccsESzb.s:1643   .text.RTC_SetAlarm:00000000000000a0 $d
     /tmp/cccsESzb.s:1648   .text.RTC_AlarmStructInit:0000000000000000 $t
     /tmp/cccsESzb.s:1654   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
     /tmp/cccsESzb.s:1691   .text.RTC_GetAlarm:0000000000000000 $t
ARM GAS  /tmp/cccsESzb.s 			page 141


     /tmp/cccsESzb.s:1697   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
     /tmp/cccsESzb.s:1815   .text.RTC_GetAlarm:000000000000006c $d
     /tmp/cccsESzb.s:1820   .text.RTC_AlarmCmd:0000000000000000 $t
     /tmp/cccsESzb.s:1826   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
     /tmp/cccsESzb.s:1947   .text.RTC_AlarmCmd:0000000000000060 $d
     /tmp/cccsESzb.s:1952   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
     /tmp/cccsESzb.s:1958   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
     /tmp/cccsESzb.s:2023   .text.RTC_AlarmSubSecondConfig:0000000000000028 $d
     /tmp/cccsESzb.s:2028   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
     /tmp/cccsESzb.s:2034   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
     /tmp/cccsESzb.s:2073   .text.RTC_GetAlarmSubSecond:000000000000001c $d
     /tmp/cccsESzb.s:2078   .text.RTC_WakeUpClockConfig:0000000000000000 $t
     /tmp/cccsESzb.s:2084   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
     /tmp/cccsESzb.s:2123   .text.RTC_WakeUpClockConfig:0000000000000020 $d
     /tmp/cccsESzb.s:2128   .text.RTC_SetWakeUpCounter:0000000000000000 $t
     /tmp/cccsESzb.s:2134   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
     /tmp/cccsESzb.s:2164   .text.RTC_SetWakeUpCounter:0000000000000014 $d
     /tmp/cccsESzb.s:2169   .text.RTC_GetWakeUpCounter:0000000000000000 $t
     /tmp/cccsESzb.s:2175   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
     /tmp/cccsESzb.s:2192   .text.RTC_GetWakeUpCounter:0000000000000008 $d
     /tmp/cccsESzb.s:2197   .text.RTC_WakeUpCmd:0000000000000000 $t
     /tmp/cccsESzb.s:2203   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
     /tmp/cccsESzb.s:2321   .text.RTC_WakeUpCmd:0000000000000060 $d
     /tmp/cccsESzb.s:2326   .text.RTC_DayLightSavingConfig:0000000000000000 $t
     /tmp/cccsESzb.s:2332   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
     /tmp/cccsESzb.s:2375   .text.RTC_DayLightSavingConfig:0000000000000020 $d
     /tmp/cccsESzb.s:2380   .text.RTC_GetStoreOperation:0000000000000000 $t
     /tmp/cccsESzb.s:2386   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
     /tmp/cccsESzb.s:2403   .text.RTC_GetStoreOperation:000000000000000c $d
     /tmp/cccsESzb.s:2408   .text.RTC_OutputConfig:0000000000000000 $t
     /tmp/cccsESzb.s:2414   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
     /tmp/cccsESzb.s:2457   .text.RTC_OutputConfig:0000000000000020 $d
     /tmp/cccsESzb.s:2462   .text.RTC_CoarseCalibConfig:0000000000000000 $t
     /tmp/cccsESzb.s:2468   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
     /tmp/cccsESzb.s:2533   .text.RTC_CoarseCalibConfig:000000000000002c $d
     /tmp/cccsESzb.s:2538   .text.RTC_CoarseCalibCmd:0000000000000000 $t
     /tmp/cccsESzb.s:2544   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
     /tmp/cccsESzb.s:2616   .text.RTC_CoarseCalibCmd:000000000000003c $d
     /tmp/cccsESzb.s:2621   .text.RTC_CalibOutputCmd:0000000000000000 $t
     /tmp/cccsESzb.s:2627   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
     /tmp/cccsESzb.s:2675   .text.RTC_CalibOutputCmd:000000000000002c $d
     /tmp/cccsESzb.s:2680   .text.RTC_CalibOutputConfig:0000000000000000 $t
     /tmp/cccsESzb.s:2686   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
     /tmp/cccsESzb.s:2725   .text.RTC_CalibOutputConfig:0000000000000020 $d
     /tmp/cccsESzb.s:2730   .text.RTC_SmoothCalibConfig:0000000000000000 $t
     /tmp/cccsESzb.s:2736   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
     /tmp/cccsESzb.s:2843   .text.RTC_SmoothCalibConfig:0000000000000050 $d
     /tmp/cccsESzb.s:2848   .text.RTC_TimeStampCmd:0000000000000000 $t
     /tmp/cccsESzb.s:2854   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
     /tmp/cccsESzb.s:2918   .text.RTC_TimeStampCmd:000000000000002c $d
     /tmp/cccsESzb.s:2923   .text.RTC_GetTimeStamp:0000000000000000 $t
     /tmp/cccsESzb.s:2929   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
     /tmp/cccsESzb.s:3059   .text.RTC_GetTimeStamp:0000000000000078 $d
     /tmp/cccsESzb.s:3064   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
     /tmp/cccsESzb.s:3070   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
     /tmp/cccsESzb.s:3086   .text.RTC_GetTimeStampSubSecond:0000000000000008 $d
     /tmp/cccsESzb.s:3091   .text.RTC_TamperTriggerConfig:0000000000000000 $t
ARM GAS  /tmp/cccsESzb.s 			page 142


     /tmp/cccsESzb.s:3097   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
     /tmp/cccsESzb.s:3131   .text.RTC_TamperTriggerConfig:000000000000001c $d
     /tmp/cccsESzb.s:3136   .text.RTC_TamperCmd:0000000000000000 $t
     /tmp/cccsESzb.s:3142   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
     /tmp/cccsESzb.s:3176   .text.RTC_TamperCmd:0000000000000018 $d
     /tmp/cccsESzb.s:3181   .text.RTC_TamperFilterConfig:0000000000000000 $t
     /tmp/cccsESzb.s:3187   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
     /tmp/cccsESzb.s:3214   .text.RTC_TamperFilterConfig:0000000000000014 $d
     /tmp/cccsESzb.s:3219   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
     /tmp/cccsESzb.s:3225   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
     /tmp/cccsESzb.s:3252   .text.RTC_TamperSamplingFreqConfig:0000000000000014 $d
     /tmp/cccsESzb.s:3257   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
     /tmp/cccsESzb.s:3263   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
     /tmp/cccsESzb.s:3290   .text.RTC_TamperPinsPrechargeDuration:0000000000000014 $d
     /tmp/cccsESzb.s:3295   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
     /tmp/cccsESzb.s:3301   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/cccsESzb.s:3334   .text.RTC_TimeStampOnTamperDetectionCmd:000000000000001c $d
     /tmp/cccsESzb.s:3339   .text.RTC_TamperPullUpCmd:0000000000000000 $t
     /tmp/cccsESzb.s:3345   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
     /tmp/cccsESzb.s:3378   .text.RTC_TamperPullUpCmd:000000000000001c $d
     /tmp/cccsESzb.s:3383   .text.RTC_WriteBackupRegister:0000000000000000 $t
     /tmp/cccsESzb.s:3389   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
     /tmp/cccsESzb.s:3429   .text.RTC_WriteBackupRegister:000000000000001c $d
     /tmp/cccsESzb.s:3434   .text.RTC_ReadBackupRegister:0000000000000000 $t
     /tmp/cccsESzb.s:3440   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
     /tmp/cccsESzb.s:3481   .text.RTC_ReadBackupRegister:000000000000001c $d
     /tmp/cccsESzb.s:3486   .text.RTC_TamperPinSelection:0000000000000000 $t
     /tmp/cccsESzb.s:3492   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
     /tmp/cccsESzb.s:3519   .text.RTC_TamperPinSelection:0000000000000014 $d
     /tmp/cccsESzb.s:3524   .text.RTC_TimeStampPinSelection:0000000000000000 $t
     /tmp/cccsESzb.s:3530   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
     /tmp/cccsESzb.s:3557   .text.RTC_TimeStampPinSelection:0000000000000014 $d
     /tmp/cccsESzb.s:3562   .text.RTC_OutputTypeConfig:0000000000000000 $t
     /tmp/cccsESzb.s:3568   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
     /tmp/cccsESzb.s:3595   .text.RTC_OutputTypeConfig:0000000000000014 $d
     /tmp/cccsESzb.s:3600   .text.RTC_SynchroShiftConfig:0000000000000000 $t
     /tmp/cccsESzb.s:3606   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
     /tmp/cccsESzb.s:3717   .text.RTC_SynchroShiftConfig:000000000000005c $d
     /tmp/cccsESzb.s:3722   .text.RTC_ITConfig:0000000000000000 $t
     /tmp/cccsESzb.s:3728   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
     /tmp/cccsESzb.s:3801   .text.RTC_ITConfig:0000000000000044 $d
     /tmp/cccsESzb.s:3806   .text.RTC_GetFlagStatus:0000000000000000 $t
     /tmp/cccsESzb.s:3812   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
     /tmp/cccsESzb.s:3853   .text.RTC_GetFlagStatus:0000000000000020 $d
     /tmp/cccsESzb.s:3858   .text.RTC_ClearFlag:0000000000000000 $t
     /tmp/cccsESzb.s:3864   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
     /tmp/cccsESzb.s:3893   .text.RTC_ClearFlag:0000000000000018 $d
     /tmp/cccsESzb.s:3898   .text.RTC_GetITStatus:0000000000000000 $t
     /tmp/cccsESzb.s:3904   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
     /tmp/cccsESzb.s:3974   .text.RTC_GetITStatus:0000000000000034 $d
     /tmp/cccsESzb.s:3979   .text.RTC_ClearITPendingBit:0000000000000000 $t
     /tmp/cccsESzb.s:3985   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
     /tmp/cccsESzb.s:4016   .text.RTC_ClearITPendingBit:0000000000000018 $d

NO UNDEFINED SYMBOLS
