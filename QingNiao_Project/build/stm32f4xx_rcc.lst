ARM GAS  /tmp/ccGY1Mdk.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Library/stm32f4xx_rcc.c"
  20              		.section	.text.RCC_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	RCC_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	RCC_DeInit:
  28              	.LFB123:
   1:./Library/stm32f4xx_rcc.c **** /**
   2:./Library/stm32f4xx_rcc.c ****   ******************************************************************************
   3:./Library/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:./Library/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:./Library/stm32f4xx_rcc.c ****   * @version V1.8.1
   6:./Library/stm32f4xx_rcc.c ****   * @date    27-January-2022
   7:./Library/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Library/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:./Library/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:./Library/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:./Library/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:./Library/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:./Library/stm32f4xx_rcc.c ****   *
  14:./Library/stm32f4xx_rcc.c ****  @verbatim
  15:./Library/stm32f4xx_rcc.c ****  ===============================================================================
  16:./Library/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:./Library/stm32f4xx_rcc.c ****  ===============================================================================
  18:./Library/stm32f4xx_rcc.c ****     [..]  
  19:./Library/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:./Library/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:./Library/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:./Library/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:./Library/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:./Library/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:./Library/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:./Library/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:./Library/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:./Library/stm32f4xx_rcc.c ****     [..]          
  29:./Library/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:
  30:./Library/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
ARM GAS  /tmp/ccGY1Mdk.s 			page 2


  31:./Library/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:./Library/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:./Library/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:./Library/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:./Library/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:./Library/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:./Library/stm32f4xx_rcc.c ****  @endverbatim    
  38:./Library/stm32f4xx_rcc.c ****   ******************************************************************************
  39:./Library/stm32f4xx_rcc.c ****   * @attention
  40:./Library/stm32f4xx_rcc.c ****   *
  41:./Library/stm32f4xx_rcc.c ****   * Copyright (c) 2016 STMicroelectronics.
  42:./Library/stm32f4xx_rcc.c ****   * All rights reserved.
  43:./Library/stm32f4xx_rcc.c ****   *
  44:./Library/stm32f4xx_rcc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  45:./Library/stm32f4xx_rcc.c ****   * in the root directory of this software component.
  46:./Library/stm32f4xx_rcc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  47:./Library/stm32f4xx_rcc.c ****   *
  48:./Library/stm32f4xx_rcc.c ****   ******************************************************************************
  49:./Library/stm32f4xx_rcc.c ****   */
  50:./Library/stm32f4xx_rcc.c **** 
  51:./Library/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  52:./Library/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  53:./Library/stm32f4xx_rcc.c **** 
  54:./Library/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  55:./Library/stm32f4xx_rcc.c ****   * @{
  56:./Library/stm32f4xx_rcc.c ****   */
  57:./Library/stm32f4xx_rcc.c **** 
  58:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC 
  59:./Library/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  60:./Library/stm32f4xx_rcc.c ****   * @{
  61:./Library/stm32f4xx_rcc.c ****   */ 
  62:./Library/stm32f4xx_rcc.c **** 
  63:./Library/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  64:./Library/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  65:./Library/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  66:./Library/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  67:./Library/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  68:./Library/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  69:./Library/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  70:./Library/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  71:./Library/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  72:./Library/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  73:./Library/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  74:./Library/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  75:./Library/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  76:./Library/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  77:./Library/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  78:./Library/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  79:./Library/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  80:./Library/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  81:./Library/stm32f4xx_rcc.c **** 
  82:./Library/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  83:./Library/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  84:./Library/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  85:./Library/stm32f4xx_rcc.c **** 
  86:./Library/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:./Library/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
ARM GAS  /tmp/ccGY1Mdk.s 			page 3


  88:./Library/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:./Library/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:./Library/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:./Library/stm32f4xx_rcc.c **** 
  92:./Library/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:./Library/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:./Library/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:./Library/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:./Library/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:./Library/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:./Library/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:./Library/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:./Library/stm32f4xx_rcc.c **** 
 101:./Library/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 102:./Library/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 103:./Library/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 104:./Library/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 105:./Library/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 106:./Library/stm32f4xx_rcc.c **** 
 107:./Library/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 108:./Library/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 109:./Library/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 110:./Library/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 111:./Library/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 112:./Library/stm32f4xx_rcc.c ****     
 113:./Library/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
 114:./Library/stm32f4xx_rcc.c **** #define RCC_CFGR_OFFSET            (RCC_OFFSET + 0x08)
 115:./Library/stm32f4xx_rcc.c ****  #if defined(STM32F410xx)
 116:./Library/stm32f4xx_rcc.c **** /* Alias word address of MCO1EN bit */
 117:./Library/stm32f4xx_rcc.c **** #define RCC_MCO1EN_BIT_NUMBER      0x8
 118:./Library/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO1EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO1EN_BIT_NUMBE
 119:./Library/stm32f4xx_rcc.c **** 
 120:./Library/stm32f4xx_rcc.c **** /* Alias word address of MCO2EN bit */
 121:./Library/stm32f4xx_rcc.c **** #define RCC_MCO2EN_BIT_NUMBER      0x9
 122:./Library/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO2EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO2EN_BIT_NUMBE
 123:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
 124:./Library/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 125:./Library/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 126:./Library/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 127:./Library/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 128:./Library/stm32f4xx_rcc.c **** 
 129:./Library/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 130:./Library/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 131:./Library/stm32f4xx_rcc.c **** 
 132:./Library/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 133:./Library/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 134:./Library/stm32f4xx_rcc.c **** 
 135:./Library/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 136:./Library/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 137:./Library/stm32f4xx_rcc.c **** 
 138:./Library/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 139:./Library/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 140:./Library/stm32f4xx_rcc.c **** 
 141:./Library/stm32f4xx_rcc.c **** /* BDCR register base address */
 142:./Library/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 143:./Library/stm32f4xx_rcc.c **** 
 144:./Library/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /tmp/ccGY1Mdk.s 			page 4


 145:./Library/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 146:./Library/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 147:./Library/stm32f4xx_rcc.c **** 
 148:./Library/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 149:./Library/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 150:./Library/stm32f4xx_rcc.c **** 
 151:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 152:./Library/stm32f4xx_rcc.c ****   * @{
 153:./Library/stm32f4xx_rcc.c ****   */ 
 154:./Library/stm32f4xx_rcc.c **** 
 155:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 156:./Library/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 157:./Library/stm32f4xx_rcc.c ****  *
 158:./Library/stm32f4xx_rcc.c **** @verbatim   
 159:./Library/stm32f4xx_rcc.c ****  ===================================================================================
 160:./Library/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 161:./Library/stm32f4xx_rcc.c ****  ===================================================================================
 162:./Library/stm32f4xx_rcc.c ****     [..]
 163:./Library/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 164:./Library/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 165:./Library/stm32f4xx_rcc.c ****   
 166:./Library/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 167:./Library/stm32f4xx_rcc.c ****           the PLL as System clock source.
 168:./Library/stm32f4xx_rcc.c **** 
 169:./Library/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 170:./Library/stm32f4xx_rcc.c ****           clock source.
 171:./Library/stm32f4xx_rcc.c **** 
 172:./Library/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 173:./Library/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 174:./Library/stm32f4xx_rcc.c **** 
 175:./Library/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 176:./Library/stm32f4xx_rcc.c **** 
 177:./Library/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 178:./Library/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 179:./Library/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 180:./Library/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 181:./Library/stm32f4xx_rcc.c **** 
 182:./Library/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 183:./Library/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 184:./Library/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 185:./Library/stm32f4xx_rcc.c ****      
 186:./Library/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 187:./Library/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx/446xx/469xx/479xx d
 188:./Library/stm32f4xx_rcc.c ****   
 189:./Library/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 190:./Library/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 191:./Library/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 192:./Library/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 193:./Library/stm32f4xx_rcc.c ****          exception vector.   
 194:./Library/stm32f4xx_rcc.c **** 
 195:./Library/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 196:./Library/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 197:./Library/stm32f4xx_rcc.c **** 
 198:./Library/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 199:./Library/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 200:./Library/stm32f4xx_rcc.c ****  @endverbatim
 201:./Library/stm32f4xx_rcc.c ****   * @{
ARM GAS  /tmp/ccGY1Mdk.s 			page 5


 202:./Library/stm32f4xx_rcc.c ****   */
 203:./Library/stm32f4xx_rcc.c **** 
 204:./Library/stm32f4xx_rcc.c **** /**
 205:./Library/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 206:./Library/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 207:./Library/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 208:./Library/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 209:./Library/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 210:./Library/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 211:./Library/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 212:./Library/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 213:./Library/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 214:./Library/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 215:./Library/stm32f4xx_rcc.c ****   * @param  None
 216:./Library/stm32f4xx_rcc.c ****   * @retval None
 217:./Library/stm32f4xx_rcc.c ****   */
 218:./Library/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 219:./Library/stm32f4xx_rcc.c **** {
  29              		.loc 1 219 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 220:./Library/stm32f4xx_rcc.c ****   /* Set HSION bit */
 221:./Library/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  34              		.loc 1 221 3 view .LVU1
  35              		.loc 1 221 6 is_stmt 0 view .LVU2
  36 0000 0C4B     		ldr	r3, .L2
  37 0002 1A68     		ldr	r2, [r3]
  38              		.loc 1 221 11 view .LVU3
  39 0004 42F00102 		orr	r2, r2, #1
  40 0008 1A60     		str	r2, [r3]
 222:./Library/stm32f4xx_rcc.c **** 
 223:./Library/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 224:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  41              		.loc 1 224 3 is_stmt 1 view .LVU4
  42              		.loc 1 224 13 is_stmt 0 view .LVU5
  43 000a 0021     		movs	r1, #0
  44 000c 9960     		str	r1, [r3, #8]
 225:./Library/stm32f4xx_rcc.c **** 
 226:./Library/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits
 227:./Library/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  45              		.loc 1 227 3 is_stmt 1 view .LVU6
  46              		.loc 1 227 6 is_stmt 0 view .LVU7
  47 000e 1A68     		ldr	r2, [r3]
  48              		.loc 1 227 11 view .LVU8
  49 0010 22F0A852 		bic	r2, r2, #352321536
  50 0014 22F41022 		bic	r2, r2, #589824
  51 0018 1A60     		str	r2, [r3]
 228:./Library/stm32f4xx_rcc.c ****   
 229:./Library/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 230:./Library/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  52              		.loc 1 230 3 is_stmt 1 view .LVU9
  53              		.loc 1 230 16 is_stmt 0 view .LVU10
  54 001a 074A     		ldr	r2, .L2+4
  55 001c 5A60     		str	r2, [r3, #4]
 231:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccGY1Mdk.s 			page 6


 232:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 233:./Library/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 234:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  56              		.loc 1 234 3 is_stmt 1 view .LVU11
  57              		.loc 1 234 19 is_stmt 0 view .LVU12
  58 001e 074A     		ldr	r2, .L2+8
  59 0020 C3F88420 		str	r2, [r3, #132]
 235:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
 236:./Library/stm32f4xx_rcc.c **** 
 237:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 238:./Library/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
 239:./Library/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
 240:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
 241:./Library/stm32f4xx_rcc.c ****   
 242:./Library/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 243:./Library/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  60              		.loc 1 243 3 is_stmt 1 view .LVU13
  61              		.loc 1 243 6 is_stmt 0 view .LVU14
  62 0024 1A68     		ldr	r2, [r3]
  63              		.loc 1 243 11 view .LVU15
  64 0026 22F48022 		bic	r2, r2, #262144
  65 002a 1A60     		str	r2, [r3]
 244:./Library/stm32f4xx_rcc.c **** 
 245:./Library/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 246:./Library/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  66              		.loc 1 246 3 is_stmt 1 view .LVU16
  67              		.loc 1 246 12 is_stmt 0 view .LVU17
  68 002c D960     		str	r1, [r3, #12]
 247:./Library/stm32f4xx_rcc.c **** 
 248:./Library/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423
 249:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000;
  69              		.loc 1 249 3 is_stmt 1 view .LVU18
  70              		.loc 1 249 16 is_stmt 0 view .LVU19
  71 002e C3F88C10 		str	r1, [r3, #140]
 250:./Library/stm32f4xx_rcc.c ****   
 251:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
 252:./Library/stm32f4xx_rcc.c ****   /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F
 253:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 = 0x00000000;
 254:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */  
 255:./Library/stm32f4xx_rcc.c **** }
  72              		.loc 1 255 1 view .LVU20
  73 0032 7047     		bx	lr
  74              	.L3:
  75              		.align	2
  76              	.L2:
  77 0034 00380240 		.word	1073887232
  78 0038 10300024 		.word	603992080
  79 003c 00300020 		.word	536883200
  80              		.cfi_endproc
  81              	.LFE123:
  83              		.section	.text.RCC_HSEConfig,"ax",%progbits
  84              		.align	1
  85              		.global	RCC_HSEConfig
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  90              	RCC_HSEConfig:
ARM GAS  /tmp/ccGY1Mdk.s 			page 7


  91              	.LVL0:
  92              	.LFB124:
 256:./Library/stm32f4xx_rcc.c **** 
 257:./Library/stm32f4xx_rcc.c **** /**
 258:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 259:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 260:./Library/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 261:./Library/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 262:./Library/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 263:./Library/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 264:./Library/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 265:./Library/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 266:./Library/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 267:./Library/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 268:./Library/stm32f4xx_rcc.c ****   *         function.    
 269:./Library/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 270:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 271:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 272:./Library/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 273:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 274:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 275:./Library/stm32f4xx_rcc.c ****   * @retval None
 276:./Library/stm32f4xx_rcc.c ****   */
 277:./Library/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 278:./Library/stm32f4xx_rcc.c **** {
  93              		.loc 1 278 1 is_stmt 1 view -0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 0
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              		@ link register save eliminated.
 279:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 280:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
  98              		.loc 1 280 3 view .LVU22
 281:./Library/stm32f4xx_rcc.c **** 
 282:./Library/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 283:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
  99              		.loc 1 283 3 view .LVU23
 100              		.loc 1 283 38 is_stmt 0 view .LVU24
 101 0000 024B     		ldr	r3, .L5
 102 0002 0022     		movs	r2, #0
 103 0004 9A70     		strb	r2, [r3, #2]
 284:./Library/stm32f4xx_rcc.c **** 
 285:./Library/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 286:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 104              		.loc 1 286 3 is_stmt 1 view .LVU25
 105              		.loc 1 286 38 is_stmt 0 view .LVU26
 106 0006 9870     		strb	r0, [r3, #2]
 287:./Library/stm32f4xx_rcc.c **** }
 107              		.loc 1 287 1 view .LVU27
 108 0008 7047     		bx	lr
 109              	.L6:
 110 000a 00BF     		.align	2
 111              	.L5:
 112 000c 00380240 		.word	1073887232
 113              		.cfi_endproc
 114              	.LFE124:
 116              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
ARM GAS  /tmp/ccGY1Mdk.s 			page 8


 117              		.align	1
 118              		.global	RCC_AdjustHSICalibrationValue
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 123              	RCC_AdjustHSICalibrationValue:
 124              	.LVL1:
 125              	.LFB126:
 288:./Library/stm32f4xx_rcc.c **** 
 289:./Library/stm32f4xx_rcc.c **** /**
 290:./Library/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 291:./Library/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 292:./Library/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 293:./Library/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 294:./Library/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 295:./Library/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 296:./Library/stm32f4xx_rcc.c ****   * @param  None
 297:./Library/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 298:./Library/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 299:./Library/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 300:./Library/stm32f4xx_rcc.c ****   */
 301:./Library/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 302:./Library/stm32f4xx_rcc.c **** {
 303:./Library/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 304:./Library/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 305:./Library/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 306:./Library/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 307:./Library/stm32f4xx_rcc.c ****   do
 308:./Library/stm32f4xx_rcc.c ****   {
 309:./Library/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 310:./Library/stm32f4xx_rcc.c ****     startupcounter++;
 311:./Library/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 312:./Library/stm32f4xx_rcc.c **** 
 313:./Library/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 314:./Library/stm32f4xx_rcc.c ****   {
 315:./Library/stm32f4xx_rcc.c ****     status = SUCCESS;
 316:./Library/stm32f4xx_rcc.c ****   }
 317:./Library/stm32f4xx_rcc.c ****   else
 318:./Library/stm32f4xx_rcc.c ****   {
 319:./Library/stm32f4xx_rcc.c ****     status = ERROR;
 320:./Library/stm32f4xx_rcc.c ****   }
 321:./Library/stm32f4xx_rcc.c ****   return (status);
 322:./Library/stm32f4xx_rcc.c **** }
 323:./Library/stm32f4xx_rcc.c **** 
 324:./Library/stm32f4xx_rcc.c **** /**
 325:./Library/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 326:./Library/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 327:./Library/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 328:./Library/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 329:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 330:./Library/stm32f4xx_rcc.c ****   * @retval None
 331:./Library/stm32f4xx_rcc.c ****   */
 332:./Library/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 333:./Library/stm32f4xx_rcc.c **** {
 126              		.loc 1 333 1 is_stmt 1 view -0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGY1Mdk.s 			page 9


 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 334:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 131              		.loc 1 334 3 view .LVU29
 335:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 336:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 132              		.loc 1 336 3 view .LVU30
 337:./Library/stm32f4xx_rcc.c **** 
 338:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 133              		.loc 1 338 3 view .LVU31
 134              		.loc 1 338 10 is_stmt 0 view .LVU32
 135 0000 034A     		ldr	r2, .L8
 136 0002 1368     		ldr	r3, [r2]
 137              	.LVL2:
 339:./Library/stm32f4xx_rcc.c **** 
 340:./Library/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 138              		.loc 1 341 3 is_stmt 1 view .LVU33
 139              		.loc 1 341 10 is_stmt 0 view .LVU34
 140 0004 23F0F803 		bic	r3, r3, #248
 141              	.LVL3:
 342:./Library/stm32f4xx_rcc.c **** 
 343:./Library/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 344:./Library/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 142              		.loc 1 344 3 is_stmt 1 view .LVU35
 143              		.loc 1 344 10 is_stmt 0 view .LVU36
 144 0008 43EAC003 		orr	r3, r3, r0, lsl #3
 145              	.LVL4:
 345:./Library/stm32f4xx_rcc.c **** 
 346:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
 347:./Library/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 146              		.loc 1 347 3 is_stmt 1 view .LVU37
 147              		.loc 1 347 11 is_stmt 0 view .LVU38
 148 000c 1360     		str	r3, [r2]
 348:./Library/stm32f4xx_rcc.c **** }
 149              		.loc 1 348 1 view .LVU39
 150 000e 7047     		bx	lr
 151              	.L9:
 152              		.align	2
 153              	.L8:
 154 0010 00380240 		.word	1073887232
 155              		.cfi_endproc
 156              	.LFE126:
 158              		.section	.text.RCC_HSICmd,"ax",%progbits
 159              		.align	1
 160              		.global	RCC_HSICmd
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 165              	RCC_HSICmd:
 166              	.LVL5:
 167              	.LFB127:
 349:./Library/stm32f4xx_rcc.c **** 
 350:./Library/stm32f4xx_rcc.c **** /**
 351:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 352:./Library/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 353:./Library/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
ARM GAS  /tmp/ccGY1Mdk.s 			page 10


 354:./Library/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 355:./Library/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 356:./Library/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 357:./Library/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 358:./Library/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 359:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 360:./Library/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 361:./Library/stm32f4xx_rcc.c ****   *         system clock source.  
 362:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 363:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 364:./Library/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 365:./Library/stm32f4xx_rcc.c ****   *         clock cycles.  
 366:./Library/stm32f4xx_rcc.c ****   * @retval None
 367:./Library/stm32f4xx_rcc.c ****   */
 368:./Library/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 369:./Library/stm32f4xx_rcc.c **** {
 168              		.loc 1 369 1 is_stmt 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
 370:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 371:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 173              		.loc 1 371 3 view .LVU41
 372:./Library/stm32f4xx_rcc.c **** 
 373:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 174              		.loc 1 373 3 view .LVU42
 175              		.loc 1 373 34 is_stmt 0 view .LVU43
 176 0000 014B     		ldr	r3, .L11
 177 0002 1860     		str	r0, [r3]
 374:./Library/stm32f4xx_rcc.c **** }
 178              		.loc 1 374 1 view .LVU44
 179 0004 7047     		bx	lr
 180              	.L12:
 181 0006 00BF     		.align	2
 182              	.L11:
 183 0008 00004742 		.word	1111949312
 184              		.cfi_endproc
 185              	.LFE127:
 187              		.section	.text.RCC_LSEConfig,"ax",%progbits
 188              		.align	1
 189              		.global	RCC_LSEConfig
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 194              	RCC_LSEConfig:
 195              	.LVL6:
 196              	.LFB128:
 375:./Library/stm32f4xx_rcc.c **** 
 376:./Library/stm32f4xx_rcc.c **** /**
 377:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 378:./Library/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 379:./Library/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 380:./Library/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 381:./Library/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 382:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 383:./Library/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
ARM GAS  /tmp/ccGY1Mdk.s 			page 11


 384:./Library/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 385:./Library/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 386:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 387:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 388:./Library/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 389:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 390:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 391:./Library/stm32f4xx_rcc.c ****   * @retval None
 392:./Library/stm32f4xx_rcc.c ****   */
 393:./Library/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 394:./Library/stm32f4xx_rcc.c **** {
 197              		.loc 1 394 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 395:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 202              		.loc 1 396 3 view .LVU46
 397:./Library/stm32f4xx_rcc.c **** 
 398:./Library/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 399:./Library/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 400:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 203              		.loc 1 400 3 view .LVU47
 204              		.loc 1 400 34 is_stmt 0 view .LVU48
 205 0000 0A4B     		ldr	r3, .L17
 206 0002 0022     		movs	r2, #0
 207 0004 83F87020 		strb	r2, [r3, #112]
 401:./Library/stm32f4xx_rcc.c **** 
 402:./Library/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 403:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 208              		.loc 1 403 3 is_stmt 1 view .LVU49
 209              		.loc 1 403 34 is_stmt 0 view .LVU50
 210 0008 83F87020 		strb	r2, [r3, #112]
 404:./Library/stm32f4xx_rcc.c **** 
 405:./Library/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 406:./Library/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 211              		.loc 1 406 3 is_stmt 1 view .LVU51
 212 000c 0128     		cmp	r0, #1
 213 000e 02D0     		beq	.L14
 214 0010 0428     		cmp	r0, #4
 215 0012 05D0     		beq	.L15
 216 0014 7047     		bx	lr
 217              	.L14:
 407:./Library/stm32f4xx_rcc.c ****   {
 408:./Library/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 409:./Library/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 410:./Library/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 218              		.loc 1 410 7 view .LVU52
 219              		.loc 1 410 38 is_stmt 0 view .LVU53
 220 0016 054B     		ldr	r3, .L17
 221 0018 0122     		movs	r2, #1
 222 001a 83F87020 		strb	r2, [r3, #112]
 411:./Library/stm32f4xx_rcc.c ****       break;
 223              		.loc 1 411 7 is_stmt 1 view .LVU54
 224 001e 7047     		bx	lr
 225              	.L15:
ARM GAS  /tmp/ccGY1Mdk.s 			page 12


 412:./Library/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 413:./Library/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 414:./Library/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 226              		.loc 1 414 7 view .LVU55
 227              		.loc 1 414 38 is_stmt 0 view .LVU56
 228 0020 024B     		ldr	r3, .L17
 229 0022 0522     		movs	r2, #5
 230 0024 83F87020 		strb	r2, [r3, #112]
 415:./Library/stm32f4xx_rcc.c ****       break;
 231              		.loc 1 415 7 is_stmt 1 view .LVU57
 416:./Library/stm32f4xx_rcc.c ****     default:
 417:./Library/stm32f4xx_rcc.c ****       break;
 418:./Library/stm32f4xx_rcc.c ****   }
 419:./Library/stm32f4xx_rcc.c **** }
 232              		.loc 1 419 1 is_stmt 0 view .LVU58
 233 0028 7047     		bx	lr
 234              	.L18:
 235 002a 00BF     		.align	2
 236              	.L17:
 237 002c 00380240 		.word	1073887232
 238              		.cfi_endproc
 239              	.LFE128:
 241              		.section	.text.RCC_LSICmd,"ax",%progbits
 242              		.align	1
 243              		.global	RCC_LSICmd
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 248              	RCC_LSICmd:
 249              	.LVL7:
 250              	.LFB129:
 420:./Library/stm32f4xx_rcc.c **** 
 421:./Library/stm32f4xx_rcc.c **** /**
 422:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 423:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 424:./Library/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 425:./Library/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 426:./Library/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 427:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 428:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 429:./Library/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 430:./Library/stm32f4xx_rcc.c ****   *         clock cycles. 
 431:./Library/stm32f4xx_rcc.c ****   * @retval None
 432:./Library/stm32f4xx_rcc.c ****   */
 433:./Library/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 434:./Library/stm32f4xx_rcc.c **** {
 251              		.loc 1 434 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 435:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 436:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 256              		.loc 1 436 3 view .LVU60
 437:./Library/stm32f4xx_rcc.c **** 
 438:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 257              		.loc 1 438 3 view .LVU61
ARM GAS  /tmp/ccGY1Mdk.s 			page 13


 258              		.loc 1 438 35 is_stmt 0 view .LVU62
 259 0000 014B     		ldr	r3, .L20
 260 0002 C3F8800E 		str	r0, [r3, #3712]
 439:./Library/stm32f4xx_rcc.c **** }
 261              		.loc 1 439 1 view .LVU63
 262 0006 7047     		bx	lr
 263              	.L21:
 264              		.align	2
 265              	.L20:
 266 0008 00004742 		.word	1111949312
 267              		.cfi_endproc
 268              	.LFE129:
 270              		.section	.text.RCC_PLLConfig,"ax",%progbits
 271              		.align	1
 272              		.global	RCC_PLLConfig
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 277              	RCC_PLLConfig:
 278              	.LVL8:
 279              	.LFB130:
 440:./Library/stm32f4xx_rcc.c **** 
 441:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 442:./Library/stm32f4xx_rcc.c **** /**
 443:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 444:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 445:./Library/stm32f4xx_rcc.c ****   *  
 446:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 447:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 448:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 449:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 450:./Library/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 451:./Library/stm32f4xx_rcc.c ****   *  
 452:./Library/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 453:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 454:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 455:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 456:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 457:./Library/stm32f4xx_rcc.c ****   *  
 458:./Library/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 459:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 460:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 461:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 462:./Library/stm32f4xx_rcc.c ****   *   
 463:./Library/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 464:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 465:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 466:./Library/stm32f4xx_rcc.c ****   *         the System clock frequency.
 467:./Library/stm32f4xx_rcc.c ****   *  
 468:./Library/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 469:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 470:./Library/stm32f4xx_rcc.c ****   *
 471:./Library/stm32f4xx_rcc.c ****   * @param  PLLR: specifies the division factor for I2S, SAI, SYSTEM, SPDIF in STM32F446xx devices
 472:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 473:./Library/stm32f4xx_rcc.c ****   *
 474:./Library/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 475:./Library/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
ARM GAS  /tmp/ccGY1Mdk.s 			page 14


 476:./Library/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 477:./Library/stm32f4xx_rcc.c ****   *         correctly.
 478:./Library/stm32f4xx_rcc.c ****   *   
 479:./Library/stm32f4xx_rcc.c ****   * @retval None
 480:./Library/stm32f4xx_rcc.c ****   */
 481:./Library/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 482:./Library/stm32f4xx_rcc.c **** {
 483:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 484:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 485:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 486:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 487:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 488:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 489:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLR_VALUE(PLLR));
 490:./Library/stm32f4xx_rcc.c ****   
 491:./Library/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 492:./Library/stm32f4xx_rcc.c ****                  (PLLQ << 24) | (PLLR << 28);
 493:./Library/stm32f4xx_rcc.c **** }
 494:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
 495:./Library/stm32f4xx_rcc.c **** 
 496:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 497:./Library/stm32f4xx_rcc.c **** /**
 498:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 499:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 500:./Library/stm32f4xx_rcc.c ****   *  
 501:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 502:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 503:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 504:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 505:./Library/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 506:./Library/stm32f4xx_rcc.c ****   *  
 507:./Library/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 508:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 509:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 510:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 511:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 512:./Library/stm32f4xx_rcc.c ****   *  
 513:./Library/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 514:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 515:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 516:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 517:./Library/stm32f4xx_rcc.c ****   *   
 518:./Library/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 519:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 520:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 521:./Library/stm32f4xx_rcc.c ****   *         the System clock frequency.
 522:./Library/stm32f4xx_rcc.c ****   *  
 523:./Library/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 524:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 525:./Library/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 526:./Library/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 527:./Library/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 528:./Library/stm32f4xx_rcc.c ****   *         correctly.
 529:./Library/stm32f4xx_rcc.c ****   *   
 530:./Library/stm32f4xx_rcc.c ****   * @retval None
 531:./Library/stm32f4xx_rcc.c ****   */
 532:./Library/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
ARM GAS  /tmp/ccGY1Mdk.s 			page 15


 533:./Library/stm32f4xx_rcc.c **** {
 280              		.loc 1 533 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 4, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		@ link register save eliminated.
 534:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 535:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 285              		.loc 1 535 3 view .LVU65
 536:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 286              		.loc 1 536 3 view .LVU66
 537:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 287              		.loc 1 537 3 view .LVU67
 538:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 288              		.loc 1 538 3 view .LVU68
 539:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 289              		.loc 1 539 3 view .LVU69
 540:./Library/stm32f4xx_rcc.c **** 
 541:./Library/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 290              		.loc 1 541 3 view .LVU70
 291              		.loc 1 541 23 is_stmt 0 view .LVU71
 292 0000 41EA8211 		orr	r1, r1, r2, lsl #6
 293              	.LVL9:
 294              		.loc 1 541 47 view .LVU72
 295 0004 5B08     		lsrs	r3, r3, #1
 296              	.LVL10:
 297              		.loc 1 541 53 view .LVU73
 298 0006 013B     		subs	r3, r3, #1
 299              		.loc 1 541 37 view .LVU74
 300 0008 41EA0341 		orr	r1, r1, r3, lsl #16
 301              		.loc 1 541 64 view .LVU75
 302 000c 0143     		orrs	r1, r1, r0
 303              		.loc 1 541 82 view .LVU76
 304 000e 009B     		ldr	r3, [sp]
 305 0010 41EA0361 		orr	r1, r1, r3, lsl #24
 306              		.loc 1 541 16 view .LVU77
 307 0014 014B     		ldr	r3, .L23
 308 0016 5960     		str	r1, [r3, #4]
 309              	.LVL11:
 542:./Library/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 543:./Library/stm32f4xx_rcc.c **** }
 310              		.loc 1 543 1 view .LVU78
 311 0018 7047     		bx	lr
 312              	.L24:
 313 001a 00BF     		.align	2
 314              	.L23:
 315 001c 00380240 		.word	1073887232
 316              		.cfi_endproc
 317              	.LFE130:
 319              		.section	.text.RCC_PLLCmd,"ax",%progbits
 320              		.align	1
 321              		.global	RCC_PLLCmd
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 326              	RCC_PLLCmd:
 327              	.LVL12:
ARM GAS  /tmp/ccGY1Mdk.s 			page 16


 328              	.LFB131:
 544:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 545:./Library/stm32f4xx_rcc.c **** 
 546:./Library/stm32f4xx_rcc.c **** /**
 547:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 548:./Library/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 549:./Library/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 550:./Library/stm32f4xx_rcc.c ****   *         be used as system clock source.
 551:./Library/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 552:./Library/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 553:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 554:./Library/stm32f4xx_rcc.c ****   * @retval None
 555:./Library/stm32f4xx_rcc.c ****   */
 556:./Library/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 557:./Library/stm32f4xx_rcc.c **** {
 329              		.loc 1 557 1 is_stmt 1 view -0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333              		@ link register save eliminated.
 558:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 559:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 334              		.loc 1 559 3 view .LVU80
 560:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 335              		.loc 1 560 3 view .LVU81
 336              		.loc 1 560 34 is_stmt 0 view .LVU82
 337 0000 014B     		ldr	r3, .L26
 338 0002 1866     		str	r0, [r3, #96]
 561:./Library/stm32f4xx_rcc.c **** }
 339              		.loc 1 561 1 view .LVU83
 340 0004 7047     		bx	lr
 341              	.L27:
 342 0006 00BF     		.align	2
 343              	.L26:
 344 0008 00004742 		.word	1111949312
 345              		.cfi_endproc
 346              	.LFE131:
 348              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 349              		.align	1
 350              		.global	RCC_PLLI2SConfig
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 355              	RCC_PLLI2SConfig:
 356              	.LVL13:
 357              	.LFB132:
 562:./Library/stm32f4xx_rcc.c **** 
 563:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx)
 564:./Library/stm32f4xx_rcc.c **** /**
 565:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 566:./Library/stm32f4xx_rcc.c ****   *  
 567:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 568:./Library/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 569:./Library/stm32f4xx_rcc.c ****   *    
 570:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 571:./Library/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 572:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
ARM GAS  /tmp/ccGY1Mdk.s 			page 17


 573:./Library/stm32f4xx_rcc.c ****   *             
 574:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 575:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 576:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 577:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 578:./Library/stm32f4xx_rcc.c ****   *    
 579:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 580:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 581:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 582:./Library/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 583:./Library/stm32f4xx_rcc.c ****   *   
 584:./Library/stm32f4xx_rcc.c ****   * @retval None
 585:./Library/stm32f4xx_rcc.c ****   */
 586:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 587:./Library/stm32f4xx_rcc.c **** {
 358              		.loc 1 587 1 is_stmt 1 view -0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 588:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 589:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 363              		.loc 1 589 3 view .LVU85
 590:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 364              		.loc 1 590 3 view .LVU86
 591:./Library/stm32f4xx_rcc.c **** 
 592:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 365              		.loc 1 592 3 view .LVU87
 366              		.loc 1 592 47 is_stmt 0 view .LVU88
 367 0000 0907     		lsls	r1, r1, #28
 368              	.LVL14:
 369              		.loc 1 592 36 view .LVU89
 370 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 371              		.loc 1 592 19 view .LVU90
 372 0006 024B     		ldr	r3, .L29
 373 0008 C3F88410 		str	r1, [r3, #132]
 593:./Library/stm32f4xx_rcc.c **** }
 374              		.loc 1 593 1 view .LVU91
 375 000c 7047     		bx	lr
 376              	.L30:
 377 000e 00BF     		.align	2
 378              	.L29:
 379 0010 00380240 		.word	1073887232
 380              		.cfi_endproc
 381              	.LFE132:
 383              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 384              		.align	1
 385              		.global	RCC_PLLI2SCmd
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 390              	RCC_PLLI2SCmd:
 391              	.LVL15:
 392              	.LFB133:
 594:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 595:./Library/stm32f4xx_rcc.c **** 
 596:./Library/stm32f4xx_rcc.c **** #if defined(STM32F411xE)
ARM GAS  /tmp/ccGY1Mdk.s 			page 18


 597:./Library/stm32f4xx_rcc.c **** /**
 598:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 599:./Library/stm32f4xx_rcc.c ****   *  
 600:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 601:./Library/stm32f4xx_rcc.c ****   *    
 602:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 603:./Library/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 604:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 605:./Library/stm32f4xx_rcc.c ****   *
 606:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 607:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 608:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 609:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 610:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 611:./Library/stm32f4xx_rcc.c ****   *
 612:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 613:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 614:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 615:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 616:./Library/stm32f4xx_rcc.c ****   *    
 617:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 618:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 619:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 620:./Library/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 621:./Library/stm32f4xx_rcc.c ****   *   
 622:./Library/stm32f4xx_rcc.c ****   * @retval None
 623:./Library/stm32f4xx_rcc.c ****   */
 624:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 625:./Library/stm32f4xx_rcc.c **** {
 626:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 627:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 628:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 629:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 630:./Library/stm32f4xx_rcc.c **** 
 631:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 632:./Library/stm32f4xx_rcc.c **** }
 633:./Library/stm32f4xx_rcc.c **** #endif /* STM32F411xE */
 634:./Library/stm32f4xx_rcc.c **** 
 635:./Library/stm32f4xx_rcc.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 636:./Library/stm32f4xx_rcc.c **** /**
 637:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 638:./Library/stm32f4xx_rcc.c ****   * 
 639:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 640:./Library/stm32f4xx_rcc.c ****   *         
 641:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 642:./Library/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 643:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 644:./Library/stm32f4xx_rcc.c ****   *             
 645:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 646:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 647:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 648:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 649:./Library/stm32f4xx_rcc.c ****   * 
 650:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 651:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 652:./Library/stm32f4xx_rcc.c ****   *                 
 653:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
ARM GAS  /tmp/ccGY1Mdk.s 			page 19


 654:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 655:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 656:./Library/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 657:./Library/stm32f4xx_rcc.c ****   *   
 658:./Library/stm32f4xx_rcc.c ****   * @retval None
 659:./Library/stm32f4xx_rcc.c ****   */
 660:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 661:./Library/stm32f4xx_rcc.c **** {
 662:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 663:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 664:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 665:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 666:./Library/stm32f4xx_rcc.c **** 
 667:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 668:./Library/stm32f4xx_rcc.c **** }
 669:./Library/stm32f4xx_rcc.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
 670:./Library/stm32f4xx_rcc.c **** 
 671:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG ) || defined(STM32F413_423xx) || defined(STM32F446xx)
 672:./Library/stm32f4xx_rcc.c **** /**
 673:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 674:./Library/stm32f4xx_rcc.c ****   * 
 675:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 676:./Library/stm32f4xx_rcc.c ****   *         
 677:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 678:./Library/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 679:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 680:./Library/stm32f4xx_rcc.c ****   * 
 681:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 682:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 683:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 684:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 685:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 686:./Library/stm32f4xx_rcc.c ****   *
 687:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 688:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 689:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 690:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 691:./Library/stm32f4xx_rcc.c ****   *
 692:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SP: specifies the division factor for PLL 48Mhz clock output
 693:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 694:./Library/stm32f4xx_rcc.c ****   *
 695:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 696:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 697:./Library/stm32f4xx_rcc.c ****   *                 
 698:./Library/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 699:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 700:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 701:./Library/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 702:./Library/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 703:./Library/stm32f4xx_rcc.c ****   *   
 704:./Library/stm32f4xx_rcc.c ****   * @retval None
 705:./Library/stm32f4xx_rcc.c ****   */
 706:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SM, uint32_t PLLI2SN, uint32_t PLLI2SP, uint32_t PLLI2SQ, uint3
 707:./Library/stm32f4xx_rcc.c **** {
 708:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 709:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 710:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
ARM GAS  /tmp/ccGY1Mdk.s 			page 20


 711:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SP));
 712:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 713:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 714:./Library/stm32f4xx_rcc.c **** 
 715:./Library/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR =  PLLI2SM | (PLLI2SN << 6) | (((PLLI2SP >> 1) -1) << 16) | (PLLI2SQ << 24) | (PL
 716:./Library/stm32f4xx_rcc.c **** }
 717:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
 718:./Library/stm32f4xx_rcc.c **** 
 719:./Library/stm32f4xx_rcc.c **** /**
 720:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 721:./Library/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 722:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 723:./Library/stm32f4xx_rcc.c ****   * @retval None
 724:./Library/stm32f4xx_rcc.c ****   */
 725:./Library/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 726:./Library/stm32f4xx_rcc.c **** {
 393              		.loc 1 726 1 is_stmt 1 view -0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 727:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 728:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 398              		.loc 1 728 3 view .LVU93
 729:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 399              		.loc 1 729 3 view .LVU94
 400              		.loc 1 729 37 is_stmt 0 view .LVU95
 401 0000 014B     		ldr	r3, .L32
 402 0002 9866     		str	r0, [r3, #104]
 730:./Library/stm32f4xx_rcc.c **** }
 403              		.loc 1 730 1 view .LVU96
 404 0004 7047     		bx	lr
 405              	.L33:
 406 0006 00BF     		.align	2
 407              	.L32:
 408 0008 00004742 		.word	1111949312
 409              		.cfi_endproc
 410              	.LFE133:
 412              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 413              		.align	1
 414              		.global	RCC_PLLSAIConfig
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 419              	RCC_PLLSAIConfig:
 420              	.LVL16:
 421              	.LFB134:
 731:./Library/stm32f4xx_rcc.c **** 
 732:./Library/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
 733:./Library/stm32f4xx_rcc.c **** /**
 734:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 735:./Library/stm32f4xx_rcc.c ****   *
 736:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F469_479xx devices 
 737:./Library/stm32f4xx_rcc.c ****   *        
 738:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 739:./Library/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 740:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
ARM GAS  /tmp/ccGY1Mdk.s 			page 21


 741:./Library/stm32f4xx_rcc.c ****   *
 742:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 743:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 744:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 745:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 746:./Library/stm32f4xx_rcc.c ****   *
 747:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 748:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}..
 749:./Library/stm32f4xx_rcc.c ****   *           
 750:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 751:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 752:./Library/stm32f4xx_rcc.c ****   *            
 753:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 754:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 755:./Library/stm32f4xx_rcc.c ****   *   
 756:./Library/stm32f4xx_rcc.c ****   * @retval None
 757:./Library/stm32f4xx_rcc.c ****   */
 758:./Library/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 759:./Library/stm32f4xx_rcc.c **** {
 760:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 761:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 762:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 763:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 764:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 765:./Library/stm32f4xx_rcc.c **** 
 766:./Library/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16) | (PLLSAIQ << 24) | (PLLSAIR << 28
 767:./Library/stm32f4xx_rcc.c **** }
 768:./Library/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */
 769:./Library/stm32f4xx_rcc.c **** 
 770:./Library/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 771:./Library/stm32f4xx_rcc.c **** /**
 772:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 773:./Library/stm32f4xx_rcc.c ****   *
 774:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 775:./Library/stm32f4xx_rcc.c ****   *        
 776:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 777:./Library/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 778:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 779:./Library/stm32f4xx_rcc.c ****   * 
 780:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIM: specifies the division factor for PLLSAI VCO input clock
 781:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 782:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIM parameter correctly to ensure that the VCO input
 783:./Library/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 784:./Library/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLSAI jitter.
 785:./Library/stm32f4xx_rcc.c ****   *
 786:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 787:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 788:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 789:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 790:./Library/stm32f4xx_rcc.c ****   * 
 791:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 792:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}.
 793:./Library/stm32f4xx_rcc.c ****   *
 794:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 795:./Library/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 796:./Library/stm32f4xx_rcc.c ****   *   
 797:./Library/stm32f4xx_rcc.c ****   * @retval None
ARM GAS  /tmp/ccGY1Mdk.s 			page 22


 798:./Library/stm32f4xx_rcc.c ****   */
 799:./Library/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIM, uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ)
 800:./Library/stm32f4xx_rcc.c **** {
 801:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 802:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIM));
 803:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 804:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 805:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 806:./Library/stm32f4xx_rcc.c **** 
 807:./Library/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = PLLSAIM | (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16)  | (PLLSAIQ << 24);
 808:./Library/stm32f4xx_rcc.c **** }
 809:./Library/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 810:./Library/stm32f4xx_rcc.c **** 
 811:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 812:./Library/stm32f4xx_rcc.c **** /**
 813:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 814:./Library/stm32f4xx_rcc.c ****   *
 815:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 816:./Library/stm32f4xx_rcc.c ****   *        
 817:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 818:./Library/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 819:./Library/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 820:./Library/stm32f4xx_rcc.c ****   *             
 821:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 822:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 823:./Library/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 824:./Library/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 825:./Library/stm32f4xx_rcc.c ****   *           
 826:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 827:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 828:./Library/stm32f4xx_rcc.c ****   *            
 829:./Library/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 830:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 831:./Library/stm32f4xx_rcc.c ****   *   
 832:./Library/stm32f4xx_rcc.c ****   * @retval None
 833:./Library/stm32f4xx_rcc.c ****   */
 834:./Library/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 835:./Library/stm32f4xx_rcc.c **** {
 422              		.loc 1 835 1 is_stmt 1 view -0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              		@ link register save eliminated.
 836:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 837:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 427              		.loc 1 837 3 view .LVU98
 838:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 428              		.loc 1 838 3 view .LVU99
 839:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 429              		.loc 1 839 3 view .LVU100
 840:./Library/stm32f4xx_rcc.c ****   
 841:./Library/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 430              		.loc 1 841 3 view .LVU101
 431              		.loc 1 841 47 is_stmt 0 view .LVU102
 432 0000 0906     		lsls	r1, r1, #24
 433              	.LVL17:
 434              		.loc 1 841 36 view .LVU103
ARM GAS  /tmp/ccGY1Mdk.s 			page 23


 435 0002 41EA8011 		orr	r1, r1, r0, lsl #6
 436              		.loc 1 841 54 view .LVU104
 437 0006 41EA0271 		orr	r1, r1, r2, lsl #28
 438              		.loc 1 841 19 view .LVU105
 439 000a 024B     		ldr	r3, .L35
 440 000c C3F88810 		str	r1, [r3, #136]
 842:./Library/stm32f4xx_rcc.c **** }
 441              		.loc 1 842 1 view .LVU106
 442 0010 7047     		bx	lr
 443              	.L36:
 444 0012 00BF     		.align	2
 445              	.L35:
 446 0014 00380240 		.word	1073887232
 447              		.cfi_endproc
 448              	.LFE134:
 450              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 451              		.align	1
 452              		.global	RCC_PLLSAICmd
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 457              	RCC_PLLSAICmd:
 458              	.LVL18:
 459              	.LFB135:
 843:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 844:./Library/stm32f4xx_rcc.c **** 
 845:./Library/stm32f4xx_rcc.c **** /**
 846:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 847:./Library/stm32f4xx_rcc.c ****   * 
 848:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices 
 849:./Library/stm32f4xx_rcc.c ****   *       
 850:./Library/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 851:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 852:./Library/stm32f4xx_rcc.c ****   * @retval None
 853:./Library/stm32f4xx_rcc.c ****   */
 854:./Library/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 855:./Library/stm32f4xx_rcc.c **** {
 460              		.loc 1 855 1 is_stmt 1 view -0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		@ link register save eliminated.
 856:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 857:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 465              		.loc 1 857 3 view .LVU108
 858:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 466              		.loc 1 858 3 view .LVU109
 467              		.loc 1 858 37 is_stmt 0 view .LVU110
 468 0000 014B     		ldr	r3, .L38
 469 0002 1867     		str	r0, [r3, #112]
 859:./Library/stm32f4xx_rcc.c **** }
 470              		.loc 1 859 1 view .LVU111
 471 0004 7047     		bx	lr
 472              	.L39:
 473 0006 00BF     		.align	2
 474              	.L38:
 475 0008 00004742 		.word	1111949312
ARM GAS  /tmp/ccGY1Mdk.s 			page 24


 476              		.cfi_endproc
 477              	.LFE135:
 479              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 480              		.align	1
 481              		.global	RCC_ClockSecuritySystemCmd
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 486              	RCC_ClockSecuritySystemCmd:
 487              	.LVL19:
 488              	.LFB136:
 860:./Library/stm32f4xx_rcc.c **** 
 861:./Library/stm32f4xx_rcc.c **** /**
 862:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 863:./Library/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 864:./Library/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 865:./Library/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 866:./Library/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 867:./Library/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 868:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 869:./Library/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 870:./Library/stm32f4xx_rcc.c ****   * @retval None
 871:./Library/stm32f4xx_rcc.c ****   */
 872:./Library/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 873:./Library/stm32f4xx_rcc.c **** {
 489              		.loc 1 873 1 is_stmt 1 view -0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              		@ link register save eliminated.
 874:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 875:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 494              		.loc 1 875 3 view .LVU113
 876:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 495              		.loc 1 876 3 view .LVU114
 496              		.loc 1 876 34 is_stmt 0 view .LVU115
 497 0000 014B     		ldr	r3, .L41
 498 0002 D864     		str	r0, [r3, #76]
 877:./Library/stm32f4xx_rcc.c **** }
 499              		.loc 1 877 1 view .LVU116
 500 0004 7047     		bx	lr
 501              	.L42:
 502 0006 00BF     		.align	2
 503              	.L41:
 504 0008 00004742 		.word	1111949312
 505              		.cfi_endproc
 506              	.LFE136:
 508              		.section	.text.RCC_MCO1Config,"ax",%progbits
 509              		.align	1
 510              		.global	RCC_MCO1Config
 511              		.syntax unified
 512              		.thumb
 513              		.thumb_func
 515              	RCC_MCO1Config:
 516              	.LVL20:
 517              	.LFB137:
 878:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccGY1Mdk.s 			page 25


 879:./Library/stm32f4xx_rcc.c **** /**
 880:./Library/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 881:./Library/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 882:./Library/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 883:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 884:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 885:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 886:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 887:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 888:./Library/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 889:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 890:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 891:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 892:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 893:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 894:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 895:./Library/stm32f4xx_rcc.c ****   * @retval None
 896:./Library/stm32f4xx_rcc.c ****   */
 897:./Library/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 898:./Library/stm32f4xx_rcc.c **** {
 518              		.loc 1 898 1 is_stmt 1 view -0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 899:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 523              		.loc 1 899 3 view .LVU118
 900:./Library/stm32f4xx_rcc.c ****   
 901:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 902:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 524              		.loc 1 902 3 view .LVU119
 903:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 525              		.loc 1 903 3 view .LVU120
 904:./Library/stm32f4xx_rcc.c **** 
 905:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 526              		.loc 1 905 3 view .LVU121
 527              		.loc 1 905 10 is_stmt 0 view .LVU122
 528 0000 034A     		ldr	r2, .L44
 529 0002 9368     		ldr	r3, [r2, #8]
 530              	.LVL21:
 906:./Library/stm32f4xx_rcc.c **** 
 907:./Library/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 908:./Library/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 531              		.loc 1 908 3 is_stmt 1 view .LVU123
 532              		.loc 1 908 10 is_stmt 0 view .LVU124
 533 0004 23F0EC63 		bic	r3, r3, #123731968
 534              	.LVL22:
 909:./Library/stm32f4xx_rcc.c **** 
 910:./Library/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 911:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 535              		.loc 1 911 3 is_stmt 1 view .LVU125
 536              		.loc 1 911 28 is_stmt 0 view .LVU126
 537 0008 0843     		orrs	r0, r0, r1
 538              	.LVL23:
 539              		.loc 1 911 10 view .LVU127
 540 000a 1843     		orrs	r0, r0, r3
 541              	.LVL24:
ARM GAS  /tmp/ccGY1Mdk.s 			page 26


 912:./Library/stm32f4xx_rcc.c ****   
 913:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
 914:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 542              		.loc 1 914 3 is_stmt 1 view .LVU128
 543              		.loc 1 914 13 is_stmt 0 view .LVU129
 544 000c 9060     		str	r0, [r2, #8]
 915:./Library/stm32f4xx_rcc.c **** 
 916:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 917:./Library/stm32f4xx_rcc.c ****   RCC_MCO1Cmd(ENABLE);
 918:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 919:./Library/stm32f4xx_rcc.c **** }
 545              		.loc 1 919 1 view .LVU130
 546 000e 7047     		bx	lr
 547              	.L45:
 548              		.align	2
 549              	.L44:
 550 0010 00380240 		.word	1073887232
 551              		.cfi_endproc
 552              	.LFE137:
 554              		.section	.text.RCC_MCO2Config,"ax",%progbits
 555              		.align	1
 556              		.global	RCC_MCO2Config
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 561              	RCC_MCO2Config:
 562              	.LVL25:
 563              	.LFB138:
 920:./Library/stm32f4xx_rcc.c **** 
 921:./Library/stm32f4xx_rcc.c **** /**
 922:./Library/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 923:./Library/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 924:./Library/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 925:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 926:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 927:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 928:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 929:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 930:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 931:./Library/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 932:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 933:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 934:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 935:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 936:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 937:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 938:./Library/stm32f4xx_rcc.c ****   * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
 939:./Library/stm32f4xx_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 940:./Library/stm32f4xx_rcc.c ****   * @retval None
 941:./Library/stm32f4xx_rcc.c ****   */
 942:./Library/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 943:./Library/stm32f4xx_rcc.c **** {
 564              		.loc 1 943 1 is_stmt 1 view -0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              		@ link register save eliminated.
ARM GAS  /tmp/ccGY1Mdk.s 			page 27


 944:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 569              		.loc 1 944 3 view .LVU132
 945:./Library/stm32f4xx_rcc.c ****   
 946:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
 947:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 570              		.loc 1 947 3 view .LVU133
 948:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 571              		.loc 1 948 3 view .LVU134
 949:./Library/stm32f4xx_rcc.c ****   
 950:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 572              		.loc 1 950 3 view .LVU135
 573              		.loc 1 950 10 is_stmt 0 view .LVU136
 574 0000 034A     		ldr	r2, .L47
 575 0002 9368     		ldr	r3, [r2, #8]
 576              	.LVL26:
 951:./Library/stm32f4xx_rcc.c ****   
 952:./Library/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 953:./Library/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 577              		.loc 1 953 3 is_stmt 1 view .LVU137
 578              		.loc 1 953 10 is_stmt 0 view .LVU138
 579 0004 23F07843 		bic	r3, r3, #-134217728
 580              	.LVL27:
 954:./Library/stm32f4xx_rcc.c **** 
 955:./Library/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 956:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 581              		.loc 1 956 3 is_stmt 1 view .LVU139
 582              		.loc 1 956 28 is_stmt 0 view .LVU140
 583 0008 0843     		orrs	r0, r0, r1
 584              	.LVL28:
 585              		.loc 1 956 10 view .LVU141
 586 000a 1843     		orrs	r0, r0, r3
 587              	.LVL29:
 957:./Library/stm32f4xx_rcc.c ****   
 958:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
 959:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 588              		.loc 1 959 3 is_stmt 1 view .LVU142
 589              		.loc 1 959 13 is_stmt 0 view .LVU143
 590 000c 9060     		str	r0, [r2, #8]
 960:./Library/stm32f4xx_rcc.c **** 
 961:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 962:./Library/stm32f4xx_rcc.c ****   RCC_MCO2Cmd(ENABLE);
 963:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 964:./Library/stm32f4xx_rcc.c **** }
 591              		.loc 1 964 1 view .LVU144
 592 000e 7047     		bx	lr
 593              	.L48:
 594              		.align	2
 595              	.L47:
 596 0010 00380240 		.word	1073887232
 597              		.cfi_endproc
 598              	.LFE138:
 600              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 601              		.align	1
 602              		.global	RCC_SYSCLKConfig
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
ARM GAS  /tmp/ccGY1Mdk.s 			page 28


 607              	RCC_SYSCLKConfig:
 608              	.LVL30:
 609              	.LFB139:
 965:./Library/stm32f4xx_rcc.c **** 
 966:./Library/stm32f4xx_rcc.c **** /**
 967:./Library/stm32f4xx_rcc.c ****   * @}
 968:./Library/stm32f4xx_rcc.c ****   */
 969:./Library/stm32f4xx_rcc.c **** 
 970:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 971:./Library/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 972:./Library/stm32f4xx_rcc.c ****  *
 973:./Library/stm32f4xx_rcc.c **** @verbatim   
 974:./Library/stm32f4xx_rcc.c ****  ===============================================================================
 975:./Library/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 976:./Library/stm32f4xx_rcc.c ****  ===============================================================================  
 977:./Library/stm32f4xx_rcc.c ****     [..]
 978:./Library/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 979:./Library/stm32f4xx_rcc.c ****       APB2 busses clocks.
 980:./Library/stm32f4xx_rcc.c ****   
 981:./Library/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 982:./Library/stm32f4xx_rcc.c ****           HSE and PLL.
 983:./Library/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 984:./Library/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 985:./Library/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 986:./Library/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 987:./Library/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 988:./Library/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 989:./Library/stm32f4xx_rcc.c **** 
 990:./Library/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 991:./Library/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 992:./Library/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 993:./Library/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 994:./Library/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 995:./Library/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 996:./Library/stm32f4xx_rcc.c ****              functions to configure this clock. 
 997:./Library/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 998:./Library/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
 999:./Library/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
1000:./Library/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
1001:./Library/stm32f4xx_rcc.c ****        
1002:./Library/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
1003:./Library/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
1004:./Library/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
1005:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1006:./Library/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1007:./Library/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1008:./Library/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1009:./Library/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1010:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1011:./Library/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1012:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1013:./Library/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1014:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1015:./Library/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1016:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1017:./Library/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1018:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
ARM GAS  /tmp/ccGY1Mdk.s 			page 29


1019:./Library/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1020:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1021:./Library/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1022:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1023:./Library/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1024:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1025:./Library/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
1026:./Library/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+
1027:./Library/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx/469xx/479xx devices, the maximum frequency of the SYSCLK and HCLK i
1028:./Library/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
1029:./Library/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1030:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1031:./Library/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1032:./Library/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1033:./Library/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1034:./Library/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1035:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1036:./Library/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1037:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1038:./Library/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1039:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1040:./Library/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1041:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1042:./Library/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1043:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1044:./Library/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1045:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1046:./Library/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1047:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1048:./Library/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1049:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1050:./Library/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
1051:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1052:./Library/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
1053:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1054:./Library/stm32f4xx_rcc.c ****    
1055:./Library/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
1056:./Library/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
1057:./Library/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1058:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1059:./Library/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1060:./Library/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1061:./Library/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1062:./Library/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1063:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1064:./Library/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1065:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1066:./Library/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1067:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1068:./Library/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1069:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1070:./Library/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
1071:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1072:./Library/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
1073:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1074:./Library/stm32f4xx_rcc.c **** 
1075:./Library/stm32f4xx_rcc.c ****       (#) For STM32F410xx/STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 
ARM GAS  /tmp/ccGY1Mdk.s 			page 30


1076:./Library/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
1077:./Library/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1078:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1079:./Library/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1080:./Library/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1081:./Library/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1082:./Library/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1083:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1084:./Library/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
1085:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1086:./Library/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
1087:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1088:./Library/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
1089:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1090:./Library/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
1091:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1092:./Library/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
1093:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1094:./Library/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
1095:./Library/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1096:./Library/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
1097:./Library/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1098:./Library/stm32f4xx_rcc.c ****   
1099:./Library/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
1100:./Library/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
1101:./Library/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
1102:./Library/stm32f4xx_rcc.c ****           [..] 
1103:./Library/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx/469xx/479xx devices:
1104:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
1105:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
1106:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
1107:./Library/stm32f4xx_rcc.c ****           [..]  
1108:./Library/stm32f4xx_rcc.c ****           On STM32F401x devices:
1109:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
1110:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
1111:./Library/stm32f4xx_rcc.c ****           On STM32F410xx/STM32F411xE devices:
1112:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
1113:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
1114:./Library/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
1115:./Library/stm32f4xx_rcc.c **** 
1116:./Library/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
1117:./Library/stm32f4xx_rcc.c **** 
1118:./Library/stm32f4xx_rcc.c **** @endverbatim
1119:./Library/stm32f4xx_rcc.c ****   * @{
1120:./Library/stm32f4xx_rcc.c ****   */
1121:./Library/stm32f4xx_rcc.c **** 
1122:./Library/stm32f4xx_rcc.c **** /**
1123:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
1124:./Library/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
1125:./Library/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
1126:./Library/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
1127:./Library/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
1128:./Library/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
1129:./Library/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
1130:./Library/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
1131:./Library/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
1132:./Library/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
ARM GAS  /tmp/ccGY1Mdk.s 			page 31


1133:./Library/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
1134:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
1135:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1136:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI: HSI selected as system clock source
1137:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
1138:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_
1139:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F
1140:./Library/stm32f4xx_rcc.c ****   * @retval None
1141:./Library/stm32f4xx_rcc.c ****   */
1142:./Library/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
1143:./Library/stm32f4xx_rcc.c **** {
 610              		.loc 1 1143 1 is_stmt 1 view -0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              		@ link register save eliminated.
1144:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 615              		.loc 1 1144 3 view .LVU146
1145:./Library/stm32f4xx_rcc.c **** 
1146:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1147:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 616              		.loc 1 1147 3 view .LVU147
1148:./Library/stm32f4xx_rcc.c **** 
1149:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 617              		.loc 1 1149 3 view .LVU148
 618              		.loc 1 1149 10 is_stmt 0 view .LVU149
 619 0000 034A     		ldr	r2, .L50
 620 0002 9368     		ldr	r3, [r2, #8]
 621              	.LVL31:
1150:./Library/stm32f4xx_rcc.c **** 
1151:./Library/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
1152:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 622              		.loc 1 1152 3 is_stmt 1 view .LVU150
 623              		.loc 1 1152 10 is_stmt 0 view .LVU151
 624 0004 23F00303 		bic	r3, r3, #3
 625              	.LVL32:
1153:./Library/stm32f4xx_rcc.c **** 
1154:./Library/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
1155:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 626              		.loc 1 1155 3 is_stmt 1 view .LVU152
 627              		.loc 1 1155 10 is_stmt 0 view .LVU153
 628 0008 0343     		orrs	r3, r3, r0
 629              	.LVL33:
1156:./Library/stm32f4xx_rcc.c **** 
1157:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1158:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 630              		.loc 1 1158 3 is_stmt 1 view .LVU154
 631              		.loc 1 1158 13 is_stmt 0 view .LVU155
 632 000a 9360     		str	r3, [r2, #8]
1159:./Library/stm32f4xx_rcc.c **** }
 633              		.loc 1 1159 1 view .LVU156
 634 000c 7047     		bx	lr
 635              	.L51:
 636 000e 00BF     		.align	2
 637              	.L50:
 638 0010 00380240 		.word	1073887232
 639              		.cfi_endproc
ARM GAS  /tmp/ccGY1Mdk.s 			page 32


 640              	.LFE139:
 642              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 643              		.align	1
 644              		.global	RCC_GetSYSCLKSource
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 649              	RCC_GetSYSCLKSource:
 650              	.LFB140:
1160:./Library/stm32f4xx_rcc.c **** 
1161:./Library/stm32f4xx_rcc.c **** /**
1162:./Library/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
1163:./Library/stm32f4xx_rcc.c ****   * @param  None
1164:./Library/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
1165:./Library/stm32f4xx_rcc.c ****   *         of the following:
1166:./Library/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
1167:./Library/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
1168:./Library/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
1169:./Library/stm32f4xx_rcc.c ****   *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM3
1170:./Library/stm32f4xx_rcc.c ****   */
1171:./Library/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
1172:./Library/stm32f4xx_rcc.c **** {
 651              		.loc 1 1172 1 is_stmt 1 view -0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
1173:./Library/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 656              		.loc 1 1173 3 view .LVU158
 657              		.loc 1 1173 24 is_stmt 0 view .LVU159
 658 0000 024B     		ldr	r3, .L53
 659 0002 9868     		ldr	r0, [r3, #8]
1174:./Library/stm32f4xx_rcc.c **** }
 660              		.loc 1 1174 1 view .LVU160
 661 0004 00F00C00 		and	r0, r0, #12
 662 0008 7047     		bx	lr
 663              	.L54:
 664 000a 00BF     		.align	2
 665              	.L53:
 666 000c 00380240 		.word	1073887232
 667              		.cfi_endproc
 668              	.LFE140:
 670              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 671              		.align	1
 672              		.global	RCC_HCLKConfig
 673              		.syntax unified
 674              		.thumb
 675              		.thumb_func
 677              	RCC_HCLKConfig:
 678              	.LVL34:
 679              	.LFB141:
1175:./Library/stm32f4xx_rcc.c **** 
1176:./Library/stm32f4xx_rcc.c **** /**
1177:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
1178:./Library/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
1179:./Library/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
1180:./Library/stm32f4xx_rcc.c ****   *         (for more details refer to section above
ARM GAS  /tmp/ccGY1Mdk.s 			page 33


1181:./Library/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
1182:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
1183:./Library/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
1184:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1185:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
1186:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
1187:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
1188:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
1189:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
1190:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
1191:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
1192:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
1193:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
1194:./Library/stm32f4xx_rcc.c ****   * @retval None
1195:./Library/stm32f4xx_rcc.c ****   */
1196:./Library/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
1197:./Library/stm32f4xx_rcc.c **** {
 680              		.loc 1 1197 1 is_stmt 1 view -0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              		@ link register save eliminated.
1198:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 685              		.loc 1 1198 3 view .LVU162
1199:./Library/stm32f4xx_rcc.c ****   
1200:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1201:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 686              		.loc 1 1201 3 view .LVU163
1202:./Library/stm32f4xx_rcc.c **** 
1203:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 687              		.loc 1 1203 3 view .LVU164
 688              		.loc 1 1203 10 is_stmt 0 view .LVU165
 689 0000 034A     		ldr	r2, .L56
 690 0002 9368     		ldr	r3, [r2, #8]
 691              	.LVL35:
1204:./Library/stm32f4xx_rcc.c **** 
1205:./Library/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
1206:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 692              		.loc 1 1206 3 is_stmt 1 view .LVU166
 693              		.loc 1 1206 10 is_stmt 0 view .LVU167
 694 0004 23F0F003 		bic	r3, r3, #240
 695              	.LVL36:
1207:./Library/stm32f4xx_rcc.c **** 
1208:./Library/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
1209:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 696              		.loc 1 1209 3 is_stmt 1 view .LVU168
 697              		.loc 1 1209 10 is_stmt 0 view .LVU169
 698 0008 0343     		orrs	r3, r3, r0
 699              	.LVL37:
1210:./Library/stm32f4xx_rcc.c **** 
1211:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1212:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 700              		.loc 1 1212 3 is_stmt 1 view .LVU170
 701              		.loc 1 1212 13 is_stmt 0 view .LVU171
 702 000a 9360     		str	r3, [r2, #8]
1213:./Library/stm32f4xx_rcc.c **** }
 703              		.loc 1 1213 1 view .LVU172
ARM GAS  /tmp/ccGY1Mdk.s 			page 34


 704 000c 7047     		bx	lr
 705              	.L57:
 706 000e 00BF     		.align	2
 707              	.L56:
 708 0010 00380240 		.word	1073887232
 709              		.cfi_endproc
 710              	.LFE141:
 712              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 713              		.align	1
 714              		.global	RCC_PCLK1Config
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 719              	RCC_PCLK1Config:
 720              	.LVL38:
 721              	.LFB142:
1214:./Library/stm32f4xx_rcc.c **** 
1215:./Library/stm32f4xx_rcc.c **** /**
1216:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1217:./Library/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1218:./Library/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1219:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1220:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1221:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
1222:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1223:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1224:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1225:./Library/stm32f4xx_rcc.c ****   * @retval None
1226:./Library/stm32f4xx_rcc.c ****   */
1227:./Library/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1228:./Library/stm32f4xx_rcc.c **** {
 722              		.loc 1 1228 1 is_stmt 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              		@ link register save eliminated.
1229:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 727              		.loc 1 1229 3 view .LVU174
1230:./Library/stm32f4xx_rcc.c **** 
1231:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1232:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 728              		.loc 1 1232 3 view .LVU175
1233:./Library/stm32f4xx_rcc.c **** 
1234:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 729              		.loc 1 1234 3 view .LVU176
 730              		.loc 1 1234 10 is_stmt 0 view .LVU177
 731 0000 034A     		ldr	r2, .L59
 732 0002 9368     		ldr	r3, [r2, #8]
 733              	.LVL39:
1235:./Library/stm32f4xx_rcc.c **** 
1236:./Library/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1237:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 734              		.loc 1 1237 3 is_stmt 1 view .LVU178
 735              		.loc 1 1237 10 is_stmt 0 view .LVU179
 736 0004 23F4E053 		bic	r3, r3, #7168
 737              	.LVL40:
1238:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccGY1Mdk.s 			page 35


1239:./Library/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1240:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 738              		.loc 1 1240 3 is_stmt 1 view .LVU180
 739              		.loc 1 1240 10 is_stmt 0 view .LVU181
 740 0008 0343     		orrs	r3, r3, r0
 741              	.LVL41:
1241:./Library/stm32f4xx_rcc.c **** 
1242:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1243:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 742              		.loc 1 1243 3 is_stmt 1 view .LVU182
 743              		.loc 1 1243 13 is_stmt 0 view .LVU183
 744 000a 9360     		str	r3, [r2, #8]
1244:./Library/stm32f4xx_rcc.c **** }
 745              		.loc 1 1244 1 view .LVU184
 746 000c 7047     		bx	lr
 747              	.L60:
 748 000e 00BF     		.align	2
 749              	.L59:
 750 0010 00380240 		.word	1073887232
 751              		.cfi_endproc
 752              	.LFE142:
 754              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 755              		.align	1
 756              		.global	RCC_PCLK2Config
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 761              	RCC_PCLK2Config:
 762              	.LVL42:
 763              	.LFB143:
1245:./Library/stm32f4xx_rcc.c **** 
1246:./Library/stm32f4xx_rcc.c **** /**
1247:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1248:./Library/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1249:./Library/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1250:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1251:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1252:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1253:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1254:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1255:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1256:./Library/stm32f4xx_rcc.c ****   * @retval None
1257:./Library/stm32f4xx_rcc.c ****   */
1258:./Library/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1259:./Library/stm32f4xx_rcc.c **** {
 764              		.loc 1 1259 1 is_stmt 1 view -0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 0
 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768              		@ link register save eliminated.
1260:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 769              		.loc 1 1260 3 view .LVU186
1261:./Library/stm32f4xx_rcc.c **** 
1262:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1263:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 770              		.loc 1 1263 3 view .LVU187
1264:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccGY1Mdk.s 			page 36


1265:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 771              		.loc 1 1265 3 view .LVU188
 772              		.loc 1 1265 10 is_stmt 0 view .LVU189
 773 0000 034A     		ldr	r2, .L62
 774 0002 9368     		ldr	r3, [r2, #8]
 775              	.LVL43:
1266:./Library/stm32f4xx_rcc.c **** 
1267:./Library/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1268:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 776              		.loc 1 1268 3 is_stmt 1 view .LVU190
 777              		.loc 1 1268 10 is_stmt 0 view .LVU191
 778 0004 23F46043 		bic	r3, r3, #57344
 779              	.LVL44:
1269:./Library/stm32f4xx_rcc.c **** 
1270:./Library/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1271:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 780              		.loc 1 1271 3 is_stmt 1 view .LVU192
 781              		.loc 1 1271 10 is_stmt 0 view .LVU193
 782 0008 43EAC003 		orr	r3, r3, r0, lsl #3
 783              	.LVL45:
1272:./Library/stm32f4xx_rcc.c **** 
1273:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1274:./Library/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 784              		.loc 1 1274 3 is_stmt 1 view .LVU194
 785              		.loc 1 1274 13 is_stmt 0 view .LVU195
 786 000c 9360     		str	r3, [r2, #8]
1275:./Library/stm32f4xx_rcc.c **** }
 787              		.loc 1 1275 1 view .LVU196
 788 000e 7047     		bx	lr
 789              	.L63:
 790              		.align	2
 791              	.L62:
 792 0010 00380240 		.word	1073887232
 793              		.cfi_endproc
 794              	.LFE143:
 796              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 797              		.align	1
 798              		.global	RCC_GetClocksFreq
 799              		.syntax unified
 800              		.thumb
 801              		.thumb_func
 803              	RCC_GetClocksFreq:
 804              	.LVL46:
 805              	.LFB144:
1276:./Library/stm32f4xx_rcc.c **** 
1277:./Library/stm32f4xx_rcc.c **** /**
1278:./Library/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1279:./Library/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.
1280:./Library/stm32f4xx_rcc.c ****   * 
1281:./Library/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1282:./Library/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1283:./Library/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1284:./Library/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1285:./Library/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1286:./Library/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1287:./Library/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1288:./Library/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
ARM GAS  /tmp/ccGY1Mdk.s 			page 37


1289:./Library/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1290:./Library/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1291:./Library/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1292:./Library/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1293:./Library/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1294:./Library/stm32f4xx_rcc.c ****   *                have wrong result.
1295:./Library/stm32f4xx_rcc.c ****   *                
1296:./Library/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1297:./Library/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1298:./Library/stm32f4xx_rcc.c ****   *   
1299:./Library/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1300:./Library/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1301:./Library/stm32f4xx_rcc.c ****   *     
1302:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1303:./Library/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1304:./Library/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1305:./Library/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1306:./Library/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1307:./Library/stm32f4xx_rcc.c ****   *    
1308:./Library/stm32f4xx_rcc.c ****   * @retval None
1309:./Library/stm32f4xx_rcc.c ****   */
1310:./Library/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1311:./Library/stm32f4xx_rcc.c **** {
 806              		.loc 1 1311 1 is_stmt 1 view -0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810              		@ link register save eliminated.
 811              		.loc 1 1311 1 is_stmt 0 view .LVU198
 812 0000 10B4     		push	{r4}
 813              	.LCFI0:
 814              		.cfi_def_cfa_offset 4
 815              		.cfi_offset 4, -4
1312:./Library/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 816              		.loc 1 1312 3 is_stmt 1 view .LVU199
 817              	.LVL47:
1313:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
1314:./Library/stm32f4xx_rcc.c ****   uint32_t pllr = 2;
1315:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1316:./Library/stm32f4xx_rcc.c ****   
1317:./Library/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1318:./Library/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 818              		.loc 1 1318 3 view .LVU200
 819              		.loc 1 1318 12 is_stmt 0 view .LVU201
 820 0002 294B     		ldr	r3, .L73
 821 0004 9B68     		ldr	r3, [r3, #8]
 822              		.loc 1 1318 7 view .LVU202
 823 0006 03F00C03 		and	r3, r3, #12
 824              	.LVL48:
1319:./Library/stm32f4xx_rcc.c ****   
1320:./Library/stm32f4xx_rcc.c ****   switch (tmp)
 825              		.loc 1 1320 3 is_stmt 1 view .LVU203
 826 000a 042B     		cmp	r3, #4
 827 000c 23D0     		beq	.L65
 828 000e 082B     		cmp	r3, #8
 829 0010 24D0     		beq	.L66
 830 0012 13B1     		cbz	r3, .L72
ARM GAS  /tmp/ccGY1Mdk.s 			page 38


1321:./Library/stm32f4xx_rcc.c ****   {
1322:./Library/stm32f4xx_rcc.c ****   case 0x00:  /* HSI used as system clock source */
1323:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1324:./Library/stm32f4xx_rcc.c ****     break;
1325:./Library/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
1326:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1327:./Library/stm32f4xx_rcc.c ****     break;
1328:./Library/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
1329:./Library/stm32f4xx_rcc.c ****     
1330:./Library/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1331:./Library/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLP
1332:./Library/stm32f4xx_rcc.c ****     */    
1333:./Library/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1334:./Library/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1335:./Library/stm32f4xx_rcc.c ****     
1336:./Library/stm32f4xx_rcc.c ****     if (pllsource != 0)
1337:./Library/stm32f4xx_rcc.c ****     {
1338:./Library/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1339:./Library/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1340:./Library/stm32f4xx_rcc.c ****     }
1341:./Library/stm32f4xx_rcc.c ****     else
1342:./Library/stm32f4xx_rcc.c ****     {
1343:./Library/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1344:./Library/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1345:./Library/stm32f4xx_rcc.c ****     }
1346:./Library/stm32f4xx_rcc.c ****     
1347:./Library/stm32f4xx_rcc.c ****     pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
1348:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
1349:./Library/stm32f4xx_rcc.c ****     break;
1350:./Library/stm32f4xx_rcc.c **** 
1351:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1352:./Library/stm32f4xx_rcc.c ****   case 0x0C:  /* PLL R used as system clock  source */
1353:./Library/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1354:./Library/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLR
1355:./Library/stm32f4xx_rcc.c ****     */    
1356:./Library/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1357:./Library/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1358:./Library/stm32f4xx_rcc.c ****     
1359:./Library/stm32f4xx_rcc.c ****     if (pllsource != 0)
1360:./Library/stm32f4xx_rcc.c ****     {
1361:./Library/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1362:./Library/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1363:./Library/stm32f4xx_rcc.c ****     }
1364:./Library/stm32f4xx_rcc.c ****     else
1365:./Library/stm32f4xx_rcc.c ****     {
1366:./Library/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1367:./Library/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1368:./Library/stm32f4xx_rcc.c ****     }
1369:./Library/stm32f4xx_rcc.c ****     
1370:./Library/stm32f4xx_rcc.c ****     pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
1371:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
1372:./Library/stm32f4xx_rcc.c ****     break;
1373:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1374:./Library/stm32f4xx_rcc.c ****     
1375:./Library/stm32f4xx_rcc.c ****   default:
1376:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 831              		.loc 1 1376 5 view .LVU204
ARM GAS  /tmp/ccGY1Mdk.s 			page 39


 832              		.loc 1 1376 34 is_stmt 0 view .LVU205
 833 0014 254B     		ldr	r3, .L73+4
 834              	.LVL49:
 835              		.loc 1 1376 34 view .LVU206
 836 0016 0360     		str	r3, [r0]
1377:./Library/stm32f4xx_rcc.c ****     break;
 837              		.loc 1 1377 5 is_stmt 1 view .LVU207
 838 0018 01E0     		b	.L68
 839              	.LVL50:
 840              	.L72:
1323:./Library/stm32f4xx_rcc.c ****     break;
 841              		.loc 1 1323 5 view .LVU208
1323:./Library/stm32f4xx_rcc.c ****     break;
 842              		.loc 1 1323 34 is_stmt 0 view .LVU209
 843 001a 244B     		ldr	r3, .L73+4
 844              	.LVL51:
1323:./Library/stm32f4xx_rcc.c ****     break;
 845              		.loc 1 1323 34 view .LVU210
 846 001c 0360     		str	r3, [r0]
1324:./Library/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
 847              		.loc 1 1324 5 is_stmt 1 view .LVU211
 848              	.LVL52:
 849              	.L68:
1378:./Library/stm32f4xx_rcc.c ****   }
1379:./Library/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1380:./Library/stm32f4xx_rcc.c ****   
1381:./Library/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1382:./Library/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 850              		.loc 1 1382 3 view .LVU212
 851              		.loc 1 1382 12 is_stmt 0 view .LVU213
 852 001e 224C     		ldr	r4, .L73
 853 0020 A368     		ldr	r3, [r4, #8]
 854              	.LVL53:
1383:./Library/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 855              		.loc 1 1383 3 is_stmt 1 view .LVU214
 856              		.loc 1 1383 7 is_stmt 0 view .LVU215
 857 0022 C3F30313 		ubfx	r3, r3, #4, #4
 858              	.LVL54:
1384:./Library/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 859              		.loc 1 1384 3 is_stmt 1 view .LVU216
 860              		.loc 1 1384 27 is_stmt 0 view .LVU217
 861 0026 2249     		ldr	r1, .L73+8
 862 0028 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 863 002a D2B2     		uxtb	r2, r2
 864              	.LVL55:
1385:./Library/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1386:./Library/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 865              		.loc 1 1386 3 is_stmt 1 view .LVU218
 866              		.loc 1 1386 42 is_stmt 0 view .LVU219
 867 002c 0368     		ldr	r3, [r0]
 868              	.LVL56:
 869              		.loc 1 1386 61 view .LVU220
 870 002e D340     		lsrs	r3, r3, r2
 871              		.loc 1 1386 30 view .LVU221
 872 0030 4360     		str	r3, [r0, #4]
1387:./Library/stm32f4xx_rcc.c **** 
1388:./Library/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
ARM GAS  /tmp/ccGY1Mdk.s 			page 40


1389:./Library/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 873              		.loc 1 1389 3 is_stmt 1 view .LVU222
 874              		.loc 1 1389 12 is_stmt 0 view .LVU223
 875 0032 A268     		ldr	r2, [r4, #8]
 876              	.LVL57:
1390:./Library/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 877              		.loc 1 1390 3 is_stmt 1 view .LVU224
 878              		.loc 1 1390 7 is_stmt 0 view .LVU225
 879 0034 C2F38222 		ubfx	r2, r2, #10, #3
 880              	.LVL58:
1391:./Library/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 881              		.loc 1 1391 3 is_stmt 1 view .LVU226
 882              		.loc 1 1391 27 is_stmt 0 view .LVU227
 883 0038 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 884              	.LVL59:
 885              		.loc 1 1391 27 view .LVU228
 886 003a D2B2     		uxtb	r2, r2
 887              	.LVL60:
1392:./Library/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1393:./Library/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 888              		.loc 1 1393 3 is_stmt 1 view .LVU229
 889              		.loc 1 1393 60 is_stmt 0 view .LVU230
 890 003c 23FA02F2 		lsr	r2, r3, r2
 891              	.LVL61:
 892              		.loc 1 1393 31 view .LVU231
 893 0040 8260     		str	r2, [r0, #8]
1394:./Library/stm32f4xx_rcc.c **** 
1395:./Library/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1396:./Library/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 894              		.loc 1 1396 3 is_stmt 1 view .LVU232
 895              		.loc 1 1396 12 is_stmt 0 view .LVU233
 896 0042 A268     		ldr	r2, [r4, #8]
 897              	.LVL62:
1397:./Library/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 898              		.loc 1 1397 3 is_stmt 1 view .LVU234
 899              		.loc 1 1397 7 is_stmt 0 view .LVU235
 900 0044 C2F34232 		ubfx	r2, r2, #13, #3
 901              	.LVL63:
1398:./Library/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 902              		.loc 1 1398 3 is_stmt 1 view .LVU236
 903              		.loc 1 1398 27 is_stmt 0 view .LVU237
 904 0048 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 905              	.LVL64:
 906              		.loc 1 1398 27 view .LVU238
 907 004a D2B2     		uxtb	r2, r2
 908              	.LVL65:
1399:./Library/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1400:./Library/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 909              		.loc 1 1400 3 is_stmt 1 view .LVU239
 910              		.loc 1 1400 60 is_stmt 0 view .LVU240
 911 004c D340     		lsrs	r3, r3, r2
 912              		.loc 1 1400 31 view .LVU241
 913 004e C360     		str	r3, [r0, #12]
1401:./Library/stm32f4xx_rcc.c **** }
 914              		.loc 1 1401 1 view .LVU242
 915 0050 5DF8044B 		ldr	r4, [sp], #4
 916              	.LCFI1:
ARM GAS  /tmp/ccGY1Mdk.s 			page 41


 917              		.cfi_remember_state
 918              		.cfi_restore 4
 919              		.cfi_def_cfa_offset 0
 920 0054 7047     		bx	lr
 921              	.LVL66:
 922              	.L65:
 923              	.LCFI2:
 924              		.cfi_restore_state
1326:./Library/stm32f4xx_rcc.c ****     break;
 925              		.loc 1 1326 5 is_stmt 1 view .LVU243
1326:./Library/stm32f4xx_rcc.c ****     break;
 926              		.loc 1 1326 34 is_stmt 0 view .LVU244
 927 0056 174B     		ldr	r3, .L73+12
 928              	.LVL67:
1326:./Library/stm32f4xx_rcc.c ****     break;
 929              		.loc 1 1326 34 view .LVU245
 930 0058 0360     		str	r3, [r0]
1327:./Library/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
 931              		.loc 1 1327 5 is_stmt 1 view .LVU246
 932 005a E0E7     		b	.L68
 933              	.LVL68:
 934              	.L66:
1333:./Library/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 935              		.loc 1 1333 5 view .LVU247
1333:./Library/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 936              		.loc 1 1333 21 is_stmt 0 view .LVU248
 937 005c 124B     		ldr	r3, .L73
 938              	.LVL69:
1333:./Library/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 939              		.loc 1 1333 21 view .LVU249
 940 005e 5968     		ldr	r1, [r3, #4]
 941              	.LVL70:
1334:./Library/stm32f4xx_rcc.c ****     
 942              		.loc 1 1334 5 is_stmt 1 view .LVU250
1334:./Library/stm32f4xx_rcc.c ****     
 943              		.loc 1 1334 15 is_stmt 0 view .LVU251
 944 0060 5A68     		ldr	r2, [r3, #4]
1334:./Library/stm32f4xx_rcc.c ****     
 945              		.loc 1 1334 10 view .LVU252
 946 0062 02F03F02 		and	r2, r2, #63
 947              	.LVL71:
1336:./Library/stm32f4xx_rcc.c ****     {
 948              		.loc 1 1336 5 is_stmt 1 view .LVU253
1336:./Library/stm32f4xx_rcc.c ****     {
 949              		.loc 1 1336 8 is_stmt 0 view .LVU254
 950 0066 11F4800F 		tst	r1, #4194304
 951 006a 12D0     		beq	.L69
1339:./Library/stm32f4xx_rcc.c ****     }
 952              		.loc 1 1339 7 is_stmt 1 view .LVU255
1339:./Library/stm32f4xx_rcc.c ****     }
 953              		.loc 1 1339 27 is_stmt 0 view .LVU256
 954 006c 114B     		ldr	r3, .L73+12
 955 006e B3FBF2F3 		udiv	r3, r3, r2
1339:./Library/stm32f4xx_rcc.c ****     }
 956              		.loc 1 1339 42 view .LVU257
 957 0072 0D4A     		ldr	r2, .L73
 958              	.LVL72:
ARM GAS  /tmp/ccGY1Mdk.s 			page 42


1339:./Library/stm32f4xx_rcc.c ****     }
 959              		.loc 1 1339 42 view .LVU258
 960 0074 5268     		ldr	r2, [r2, #4]
1339:./Library/stm32f4xx_rcc.c ****     }
 961              		.loc 1 1339 72 view .LVU259
 962 0076 C2F38812 		ubfx	r2, r2, #6, #9
1339:./Library/stm32f4xx_rcc.c ****     }
 963              		.loc 1 1339 14 view .LVU260
 964 007a 02FB03F3 		mul	r3, r2, r3
 965              	.LVL73:
 966              	.L70:
1347:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 967              		.loc 1 1347 5 is_stmt 1 view .LVU261
1347:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 968              		.loc 1 1347 18 is_stmt 0 view .LVU262
 969 007e 0A4A     		ldr	r2, .L73
 970 0080 5268     		ldr	r2, [r2, #4]
1347:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 971              		.loc 1 1347 48 view .LVU263
 972 0082 C2F30142 		ubfx	r2, r2, #16, #2
1347:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 973              		.loc 1 1347 54 view .LVU264
 974 0086 0132     		adds	r2, r2, #1
1347:./Library/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 975              		.loc 1 1347 10 view .LVU265
 976 0088 5200     		lsls	r2, r2, #1
 977              	.LVL74:
1348:./Library/stm32f4xx_rcc.c ****     break;
 978              		.loc 1 1348 5 is_stmt 1 view .LVU266
1348:./Library/stm32f4xx_rcc.c ****     break;
 979              		.loc 1 1348 42 is_stmt 0 view .LVU267
 980 008a B3FBF2F3 		udiv	r3, r3, r2
 981              	.LVL75:
1348:./Library/stm32f4xx_rcc.c ****     break;
 982              		.loc 1 1348 34 view .LVU268
 983 008e 0360     		str	r3, [r0]
1349:./Library/stm32f4xx_rcc.c **** 
 984              		.loc 1 1349 5 is_stmt 1 view .LVU269
 985 0090 C5E7     		b	.L68
 986              	.LVL76:
 987              	.L69:
1344:./Library/stm32f4xx_rcc.c ****     }
 988              		.loc 1 1344 7 view .LVU270
1344:./Library/stm32f4xx_rcc.c ****     }
 989              		.loc 1 1344 27 is_stmt 0 view .LVU271
 990 0092 064B     		ldr	r3, .L73+4
 991 0094 B3FBF2F3 		udiv	r3, r3, r2
1344:./Library/stm32f4xx_rcc.c ****     }
 992              		.loc 1 1344 42 view .LVU272
 993 0098 034A     		ldr	r2, .L73
 994              	.LVL77:
1344:./Library/stm32f4xx_rcc.c ****     }
 995              		.loc 1 1344 42 view .LVU273
 996 009a 5268     		ldr	r2, [r2, #4]
1344:./Library/stm32f4xx_rcc.c ****     }
 997              		.loc 1 1344 72 view .LVU274
 998 009c C2F38812 		ubfx	r2, r2, #6, #9
ARM GAS  /tmp/ccGY1Mdk.s 			page 43


1344:./Library/stm32f4xx_rcc.c ****     }
 999              		.loc 1 1344 14 view .LVU275
 1000 00a0 02FB03F3 		mul	r3, r2, r3
 1001              	.LVL78:
1344:./Library/stm32f4xx_rcc.c ****     }
 1002              		.loc 1 1344 14 view .LVU276
 1003 00a4 EBE7     		b	.L70
 1004              	.L74:
 1005 00a6 00BF     		.align	2
 1006              	.L73:
 1007 00a8 00380240 		.word	1073887232
 1008 00ac 0024F400 		.word	16000000
 1009 00b0 00000000 		.word	APBAHBPrescTable
 1010 00b4 40787D01 		.word	25000000
 1011              		.cfi_endproc
 1012              	.LFE144:
 1014              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1015              		.align	1
 1016              		.global	RCC_RTCCLKConfig
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1021              	RCC_RTCCLKConfig:
 1022              	.LVL79:
 1023              	.LFB145:
1402:./Library/stm32f4xx_rcc.c **** 
1403:./Library/stm32f4xx_rcc.c **** /**
1404:./Library/stm32f4xx_rcc.c ****   * @}
1405:./Library/stm32f4xx_rcc.c ****   */
1406:./Library/stm32f4xx_rcc.c **** 
1407:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1408:./Library/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1409:./Library/stm32f4xx_rcc.c ****  *
1410:./Library/stm32f4xx_rcc.c **** @verbatim   
1411:./Library/stm32f4xx_rcc.c ****  ===============================================================================
1412:./Library/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1413:./Library/stm32f4xx_rcc.c ****  ===============================================================================  
1414:./Library/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1415:./Library/stm32f4xx_rcc.c ****   
1416:./Library/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1417:./Library/stm32f4xx_rcc.c ****           by 2 to 31.
1418:./Library/stm32f4xx_rcc.c ****      
1419:./Library/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1420:./Library/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1421:./Library/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1422:./Library/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1423:./Library/stm32f4xx_rcc.c **** 
1424:./Library/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1425:./Library/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1426:./Library/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1427:./Library/stm32f4xx_rcc.c ****      
1428:./Library/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1429:./Library/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1430:./Library/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1431:./Library/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1432:./Library/stm32f4xx_rcc.c **** 
1433:./Library/stm32f4xx_rcc.c **** @endverbatim
ARM GAS  /tmp/ccGY1Mdk.s 			page 44


1434:./Library/stm32f4xx_rcc.c ****   * @{
1435:./Library/stm32f4xx_rcc.c ****   */
1436:./Library/stm32f4xx_rcc.c **** 
1437:./Library/stm32f4xx_rcc.c **** /**
1438:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1439:./Library/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1440:./Library/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1441:./Library/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1442:./Library/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1443:./Library/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1444:./Library/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1445:./Library/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1446:./Library/stm32f4xx_rcc.c ****   *    
1447:./Library/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1448:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1449:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1450:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1451:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1452:./Library/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1453:./Library/stm32f4xx_rcc.c ****   *  
1454:./Library/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1455:./Library/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1456:./Library/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1457:./Library/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1458:./Library/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1459:./Library/stm32f4xx_rcc.c ****   *         RTC clock source).
1460:./Library/stm32f4xx_rcc.c ****   *  
1461:./Library/stm32f4xx_rcc.c ****   * @retval None
1462:./Library/stm32f4xx_rcc.c ****   */
1463:./Library/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1464:./Library/stm32f4xx_rcc.c **** {
 1024              		.loc 1 1464 1 is_stmt 1 view -0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028              		@ link register save eliminated.
1465:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1029              		.loc 1 1465 3 view .LVU278
1466:./Library/stm32f4xx_rcc.c **** 
1467:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1468:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 1030              		.loc 1 1468 3 view .LVU279
1469:./Library/stm32f4xx_rcc.c **** 
1470:./Library/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1031              		.loc 1 1470 3 view .LVU280
 1032              		.loc 1 1470 25 is_stmt 0 view .LVU281
 1033 0000 00F44073 		and	r3, r0, #768
 1034              		.loc 1 1470 6 view .LVU282
 1035 0004 B3F5407F 		cmp	r3, #768
 1036 0008 06D0     		beq	.L77
 1037              	.LVL80:
 1038              	.L76:
1471:./Library/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1472:./Library/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
1473:./Library/stm32f4xx_rcc.c **** 
1474:./Library/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1475:./Library/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
ARM GAS  /tmp/ccGY1Mdk.s 			page 45


1476:./Library/stm32f4xx_rcc.c **** 
1477:./Library/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1478:./Library/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
1479:./Library/stm32f4xx_rcc.c **** 
1480:./Library/stm32f4xx_rcc.c ****     /* Store the new value */
1481:./Library/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
1482:./Library/stm32f4xx_rcc.c ****   }
1483:./Library/stm32f4xx_rcc.c ****     
1484:./Library/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1485:./Library/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1039              		.loc 1 1485 3 is_stmt 1 view .LVU283
 1040              		.loc 1 1485 6 is_stmt 0 view .LVU284
 1041 000a 094A     		ldr	r2, .L78
 1042 000c 136F     		ldr	r3, [r2, #112]
 1043              		.loc 1 1485 34 view .LVU285
 1044 000e C0F30B00 		ubfx	r0, r0, #0, #12
 1045              	.LVL81:
 1046              		.loc 1 1485 13 view .LVU286
 1047 0012 0343     		orrs	r3, r3, r0
 1048 0014 1367     		str	r3, [r2, #112]
1486:./Library/stm32f4xx_rcc.c **** }
 1049              		.loc 1 1486 1 view .LVU287
 1050 0016 7047     		bx	lr
 1051              	.LVL82:
 1052              	.L77:
1472:./Library/stm32f4xx_rcc.c **** 
 1053              		.loc 1 1472 5 is_stmt 1 view .LVU288
1472:./Library/stm32f4xx_rcc.c **** 
 1054              		.loc 1 1472 12 is_stmt 0 view .LVU289
 1055 0018 0549     		ldr	r1, .L78
 1056 001a 8A68     		ldr	r2, [r1, #8]
 1057              	.LVL83:
1475:./Library/stm32f4xx_rcc.c **** 
 1058              		.loc 1 1475 5 is_stmt 1 view .LVU290
1475:./Library/stm32f4xx_rcc.c **** 
 1059              		.loc 1 1475 12 is_stmt 0 view .LVU291
 1060 001c 22F4F812 		bic	r2, r2, #2031616
 1061              	.LVL84:
1478:./Library/stm32f4xx_rcc.c **** 
 1062              		.loc 1 1478 5 is_stmt 1 view .LVU292
1478:./Library/stm32f4xx_rcc.c **** 
 1063              		.loc 1 1478 33 is_stmt 0 view .LVU293
 1064 0020 20F07043 		bic	r3, r0, #-268435456
 1065 0024 23F44073 		bic	r3, r3, #768
1478:./Library/stm32f4xx_rcc.c **** 
 1066              		.loc 1 1478 12 view .LVU294
 1067 0028 1343     		orrs	r3, r3, r2
 1068              	.LVL85:
1481:./Library/stm32f4xx_rcc.c ****   }
 1069              		.loc 1 1481 5 is_stmt 1 view .LVU295
1481:./Library/stm32f4xx_rcc.c ****   }
 1070              		.loc 1 1481 15 is_stmt 0 view .LVU296
 1071 002a 8B60     		str	r3, [r1, #8]
 1072 002c EDE7     		b	.L76
 1073              	.L79:
 1074 002e 00BF     		.align	2
 1075              	.L78:
ARM GAS  /tmp/ccGY1Mdk.s 			page 46


 1076 0030 00380240 		.word	1073887232
 1077              		.cfi_endproc
 1078              	.LFE145:
 1080              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1081              		.align	1
 1082              		.global	RCC_RTCCLKCmd
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1087              	RCC_RTCCLKCmd:
 1088              	.LVL86:
 1089              	.LFB146:
1487:./Library/stm32f4xx_rcc.c **** 
1488:./Library/stm32f4xx_rcc.c **** /**
1489:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1490:./Library/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1491:./Library/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1492:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1493:./Library/stm32f4xx_rcc.c ****   * @retval None
1494:./Library/stm32f4xx_rcc.c ****   */
1495:./Library/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1496:./Library/stm32f4xx_rcc.c **** {
 1090              		.loc 1 1496 1 is_stmt 1 view -0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              		@ link register save eliminated.
1497:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1498:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1095              		.loc 1 1498 3 view .LVU298
1499:./Library/stm32f4xx_rcc.c **** 
1500:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1096              		.loc 1 1500 3 view .LVU299
 1097              		.loc 1 1500 36 is_stmt 0 view .LVU300
 1098 0000 014B     		ldr	r3, .L81
 1099 0002 C3F83C0E 		str	r0, [r3, #3644]
1501:./Library/stm32f4xx_rcc.c **** }
 1100              		.loc 1 1501 1 view .LVU301
 1101 0006 7047     		bx	lr
 1102              	.L82:
 1103              		.align	2
 1104              	.L81:
 1105 0008 00004742 		.word	1111949312
 1106              		.cfi_endproc
 1107              	.LFE146:
 1109              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1110              		.align	1
 1111              		.global	RCC_BackupResetCmd
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1116              	RCC_BackupResetCmd:
 1117              	.LVL87:
 1118              	.LFB147:
1502:./Library/stm32f4xx_rcc.c **** 
1503:./Library/stm32f4xx_rcc.c **** /**
1504:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
ARM GAS  /tmp/ccGY1Mdk.s 			page 47


1505:./Library/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1506:./Library/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1507:./Library/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1508:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1509:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1510:./Library/stm32f4xx_rcc.c ****   * @retval None
1511:./Library/stm32f4xx_rcc.c ****   */
1512:./Library/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1513:./Library/stm32f4xx_rcc.c **** {
 1119              		.loc 1 1513 1 is_stmt 1 view -0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 0
 1122              		@ frame_needed = 0, uses_anonymous_args = 0
 1123              		@ link register save eliminated.
1514:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1515:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1124              		.loc 1 1515 3 view .LVU303
1516:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1125              		.loc 1 1516 3 view .LVU304
 1126              		.loc 1 1516 36 is_stmt 0 view .LVU305
 1127 0000 014B     		ldr	r3, .L84
 1128 0002 C3F8400E 		str	r0, [r3, #3648]
1517:./Library/stm32f4xx_rcc.c **** }
 1129              		.loc 1 1517 1 view .LVU306
 1130 0006 7047     		bx	lr
 1131              	.L85:
 1132              		.align	2
 1133              	.L84:
 1134 0008 00004742 		.word	1111949312
 1135              		.cfi_endproc
 1136              	.LFE147:
 1138              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1139              		.align	1
 1140              		.global	RCC_I2SCLKConfig
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1145              	RCC_I2SCLKConfig:
 1146              	.LVL88:
 1147              	.LFB148:
1518:./Library/stm32f4xx_rcc.c **** 
1519:./Library/stm32f4xx_rcc.c **** #if defined (STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1520:./Library/stm32f4xx_rcc.c **** /**
1521:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1522:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1523:./Library/stm32f4xx_rcc.c ****   *
1524:./Library/stm32f4xx_rcc.c ****   * @param  RCC_I2SAPBx: specifies the APBx I2S clock source.
1525:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1526:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB1: I2S peripheral instance is on APB1 Bus
1527:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB2: I2S peripheral instance is on APB2 Bus
1528:./Library/stm32f4xx_rcc.c ****   *
1529:./Library/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1530:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1531:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1532:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1533:./Library/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1534:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLL: PLL clock used as I2S clock source
ARM GAS  /tmp/ccGY1Mdk.s 			page 48


1535:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as I2S clock source
1536:./Library/stm32f4xx_rcc.c ****   * @retval None
1537:./Library/stm32f4xx_rcc.c ****   */
1538:./Library/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SAPBx, uint32_t RCC_I2SCLKSource)
1539:./Library/stm32f4xx_rcc.c **** {
1540:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1541:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1542:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2S_APBx(RCC_I2SAPBx));
1543:./Library/stm32f4xx_rcc.c ****   
1544:./Library/stm32f4xx_rcc.c ****   if(RCC_I2SAPBx == RCC_I2SBus_APB1)
1545:./Library/stm32f4xx_rcc.c ****   {
1546:./Library/stm32f4xx_rcc.c ****     /* Clear APB1 I2Sx clock source selection bits */
1547:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S1SRC;
1548:./Library/stm32f4xx_rcc.c ****     /* Set new APB1 I2Sx clock source*/
1549:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_I2SCLKSource;
1550:./Library/stm32f4xx_rcc.c ****   }
1551:./Library/stm32f4xx_rcc.c ****   else
1552:./Library/stm32f4xx_rcc.c ****   {
1553:./Library/stm32f4xx_rcc.c ****     /* Clear APB2 I2Sx clock source selection  bits */
1554:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S2SRC;
1555:./Library/stm32f4xx_rcc.c ****     /* Set new APB2 I2Sx clock source */
1556:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_I2SCLKSource << 2);
1557:./Library/stm32f4xx_rcc.c ****   }
1558:./Library/stm32f4xx_rcc.c **** }
1559:./Library/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
1560:./Library/stm32f4xx_rcc.c **** /**
1561:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAIx clock source (SAIxCLK).
1562:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the SAIx APB clock.
1563:./Library/stm32f4xx_rcc.c ****   *
1564:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIInstance: specifies the SAIx clock source.
1565:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1566:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI1: SAI1 clock source selection
1567:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI2: SAI2 clock source selections
1568:./Library/stm32f4xx_rcc.c ****   *
1569:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAICLKSource: specifies the SAI clock source.
1570:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1571:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLSAI: PLLSAI clock used as SAI clock source
1572:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1573:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLL: PLL clock used as SAI clock source
1574:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock source
1575:./Library/stm32f4xx_rcc.c ****   * @retval None
1576:./Library/stm32f4xx_rcc.c ****   */
1577:./Library/stm32f4xx_rcc.c **** void RCC_SAICLKConfig(uint32_t RCC_SAIInstance, uint32_t RCC_SAICLKSource)
1578:./Library/stm32f4xx_rcc.c **** {
1579:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1580:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAICLK_SOURCE(RCC_SAICLKSource));
1581:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAI_INSTANCE(RCC_SAIInstance));
1582:./Library/stm32f4xx_rcc.c ****   
1583:./Library/stm32f4xx_rcc.c ****   if(RCC_SAIInstance == RCC_SAIInstance_SAI1)
1584:./Library/stm32f4xx_rcc.c ****   {
1585:./Library/stm32f4xx_rcc.c ****     /* Clear SAI1 clock source selection bits */
1586:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI1SRC;
1587:./Library/stm32f4xx_rcc.c ****     /* Set new SAI1 clock source */
1588:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_SAICLKSource;
1589:./Library/stm32f4xx_rcc.c ****   }
1590:./Library/stm32f4xx_rcc.c ****   else
1591:./Library/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/ccGY1Mdk.s 			page 49


1592:./Library/stm32f4xx_rcc.c ****     /* Clear SAI2 clock source selection bits */
1593:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI2SRC;
1594:./Library/stm32f4xx_rcc.c ****     /* Set new SAI2 clock source */
1595:./Library/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_SAICLKSource << 2);
1596:./Library/stm32f4xx_rcc.c ****   }
1597:./Library/stm32f4xx_rcc.c **** }
1598:./Library/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1599:./Library/stm32f4xx_rcc.c **** 
1600:./Library/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1601:./Library/stm32f4xx_rcc.c **** /**
1602:./Library/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.      
1603:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1604:./Library/stm32f4xx_rcc.c ****   *         the SAI clock.
1605:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1606:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1607:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1608:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1609:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLL: PLL clock used as SAI clock source
1610:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1611:./Library/stm32f4xx_rcc.c ****   * @retval None
1612:./Library/stm32f4xx_rcc.c ****   */
1613:./Library/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1614:./Library/stm32f4xx_rcc.c **** {
1615:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1616:./Library/stm32f4xx_rcc.c ****   
1617:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1618:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1619:./Library/stm32f4xx_rcc.c ****   
1620:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1621:./Library/stm32f4xx_rcc.c **** 
1622:./Library/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1623:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1624:./Library/stm32f4xx_rcc.c **** 
1625:./Library/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1626:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1627:./Library/stm32f4xx_rcc.c **** 
1628:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1629:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1630:./Library/stm32f4xx_rcc.c **** }
1631:./Library/stm32f4xx_rcc.c **** 
1632:./Library/stm32f4xx_rcc.c **** /**
1633:./Library/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.      
1634:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1635:./Library/stm32f4xx_rcc.c ****   *         the SAI clock.
1636:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1637:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1638:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1639:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1640:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLL: PLL clock used as SAI clock source
1641:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1642:./Library/stm32f4xx_rcc.c ****   * @retval None
1643:./Library/stm32f4xx_rcc.c ****   */
1644:./Library/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1645:./Library/stm32f4xx_rcc.c **** {
1646:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1647:./Library/stm32f4xx_rcc.c ****   
1648:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccGY1Mdk.s 			page 50


1649:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1650:./Library/stm32f4xx_rcc.c ****   
1651:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1652:./Library/stm32f4xx_rcc.c **** 
1653:./Library/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1654:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1655:./Library/stm32f4xx_rcc.c **** 
1656:./Library/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1657:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1658:./Library/stm32f4xx_rcc.c **** 
1659:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1660:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1661:./Library/stm32f4xx_rcc.c **** }
1662:./Library/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1663:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1664:./Library/stm32f4xx_rcc.c **** 
1665:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
1666:./Library/stm32f4xx_rcc.c **** /**
1667:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1668:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S clock.
1669:./Library/stm32f4xx_rcc.c ****   *
1670:./Library/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1671:./Library/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1672:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLR: PLL VCO output clock divided by PLLR.
1673:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_EXT: External clock mapped on the I2S_CKIN pin.
1674:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLSRC: HSI/HSE depends on PLLSRC.
1675:./Library/stm32f4xx_rcc.c ****   * @retval None
1676:./Library/stm32f4xx_rcc.c ****   */
1677:./Library/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1678:./Library/stm32f4xx_rcc.c **** {
1679:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1680:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1681:./Library/stm32f4xx_rcc.c ****   
1682:./Library/stm32f4xx_rcc.c ****   /* Clear I2Sx clock source selection bits */
1683:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR &= ~RCC_DCKCFGR_I2SSRC;
1684:./Library/stm32f4xx_rcc.c ****   /* Set new I2Sx clock source*/
1685:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR |= RCC_I2SCLKSource;
1686:./Library/stm32f4xx_rcc.c **** }
1687:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
1688:./Library/stm32f4xx_rcc.c **** 
1689:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1690:./Library/stm32f4xx_rcc.c **** /**
1691:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1692:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1693:./Library/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1694:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1695:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1696:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1697:./Library/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1698:./Library/stm32f4xx_rcc.c ****   * @retval None
1699:./Library/stm32f4xx_rcc.c ****   */
1700:./Library/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1701:./Library/stm32f4xx_rcc.c **** {
 1148              		.loc 1 1701 1 is_stmt 1 view -0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 0
 1151              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccGY1Mdk.s 			page 51


 1152              		@ link register save eliminated.
1702:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1703:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
 1153              		.loc 1 1703 3 view .LVU308
1704:./Library/stm32f4xx_rcc.c **** 
1705:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 1154              		.loc 1 1705 3 view .LVU309
 1155              		.loc 1 1705 37 is_stmt 0 view .LVU310
 1156 0000 014B     		ldr	r3, .L87
 1157 0002 C3F85C01 		str	r0, [r3, #348]
1706:./Library/stm32f4xx_rcc.c **** }
 1158              		.loc 1 1706 1 view .LVU311
 1159 0006 7047     		bx	lr
 1160              	.L88:
 1161              		.align	2
 1162              	.L87:
 1163 0008 00004742 		.word	1111949312
 1164              		.cfi_endproc
 1165              	.LFE148:
 1167              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1168              		.align	1
 1169              		.global	RCC_SAIPLLI2SClkDivConfig
 1170              		.syntax unified
 1171              		.thumb
 1172              		.thumb_func
 1174              	RCC_SAIPLLI2SClkDivConfig:
 1175              	.LVL89:
 1176              	.LFB149:
1707:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
1708:./Library/stm32f4xx_rcc.c **** 
1709:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1710:./Library/stm32f4xx_rcc.c **** /**
1711:./Library/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1712:./Library/stm32f4xx_rcc.c ****   * 
1713:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1714:./Library/stm32f4xx_rcc.c ****   *       
1715:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1716:./Library/stm32f4xx_rcc.c ****   *         the SAI clock.
1717:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1718:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1719:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1720:./Library/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1721:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1722:./Library/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1723:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1724:./Library/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1725:./Library/stm32f4xx_rcc.c ****   * @retval None
1726:./Library/stm32f4xx_rcc.c ****   */
1727:./Library/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1728:./Library/stm32f4xx_rcc.c **** {
1729:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1730:./Library/stm32f4xx_rcc.c ****   
1731:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1732:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1733:./Library/stm32f4xx_rcc.c ****   
1734:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1735:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccGY1Mdk.s 			page 52


1736:./Library/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1737:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1738:./Library/stm32f4xx_rcc.c **** 
1739:./Library/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1740:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1741:./Library/stm32f4xx_rcc.c **** 
1742:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1743:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1744:./Library/stm32f4xx_rcc.c **** }
1745:./Library/stm32f4xx_rcc.c **** 
1746:./Library/stm32f4xx_rcc.c **** /**
1747:./Library/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1748:./Library/stm32f4xx_rcc.c ****   * 
1749:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1750:./Library/stm32f4xx_rcc.c ****   *       
1751:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1752:./Library/stm32f4xx_rcc.c ****   *         the SAI clock.
1753:./Library/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1754:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1755:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1756:./Library/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1757:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1758:./Library/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1759:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1760:./Library/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1761:./Library/stm32f4xx_rcc.c ****   * @retval None
1762:./Library/stm32f4xx_rcc.c ****   */
1763:./Library/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1764:./Library/stm32f4xx_rcc.c **** {
1765:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1766:./Library/stm32f4xx_rcc.c ****   
1767:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1768:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1769:./Library/stm32f4xx_rcc.c ****   
1770:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1771:./Library/stm32f4xx_rcc.c **** 
1772:./Library/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1773:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1774:./Library/stm32f4xx_rcc.c **** 
1775:./Library/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1776:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1777:./Library/stm32f4xx_rcc.c **** 
1778:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1779:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1780:./Library/stm32f4xx_rcc.c **** }
1781:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
1782:./Library/stm32f4xx_rcc.c **** 
1783:./Library/stm32f4xx_rcc.c **** /**
1784:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1785:./Library/stm32f4xx_rcc.c ****   * 
1786:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1787:./Library/stm32f4xx_rcc.c ****   *   
1788:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1789:./Library/stm32f4xx_rcc.c ****   *              
1790:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1791:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1792:./Library/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
ARM GAS  /tmp/ccGY1Mdk.s 			page 53


1793:./Library/stm32f4xx_rcc.c ****   *              
1794:./Library/stm32f4xx_rcc.c ****   * @retval None
1795:./Library/stm32f4xx_rcc.c ****   */
1796:./Library/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1797:./Library/stm32f4xx_rcc.c **** {
 1177              		.loc 1 1797 1 is_stmt 1 view -0
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 0
 1180              		@ frame_needed = 0, uses_anonymous_args = 0
 1181              		@ link register save eliminated.
1798:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1182              		.loc 1 1798 3 view .LVU313
1799:./Library/stm32f4xx_rcc.c ****   
1800:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1801:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
 1183              		.loc 1 1801 3 view .LVU314
1802:./Library/stm32f4xx_rcc.c ****   
1803:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1184              		.loc 1 1803 3 view .LVU315
 1185              		.loc 1 1803 10 is_stmt 0 view .LVU316
 1186 0000 044A     		ldr	r2, .L90
 1187 0002 D2F88C30 		ldr	r3, [r2, #140]
 1188              	.LVL90:
1804:./Library/stm32f4xx_rcc.c **** 
1805:./Library/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1806:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 1189              		.loc 1 1806 3 is_stmt 1 view .LVU317
 1190              		.loc 1 1806 10 is_stmt 0 view .LVU318
 1191 0006 23F01F03 		bic	r3, r3, #31
 1192              	.LVL91:
1807:./Library/stm32f4xx_rcc.c **** 
1808:./Library/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1809:./Library/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 1193              		.loc 1 1809 3 is_stmt 1 view .LVU319
 1194              		.loc 1 1809 29 is_stmt 0 view .LVU320
 1195 000a 0138     		subs	r0, r0, #1
 1196              	.LVL92:
 1197              		.loc 1 1809 10 view .LVU321
 1198 000c 1843     		orrs	r0, r0, r3
 1199              	.LVL93:
1810:./Library/stm32f4xx_rcc.c **** 
1811:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1812:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1200              		.loc 1 1812 3 is_stmt 1 view .LVU322
 1201              		.loc 1 1812 16 is_stmt 0 view .LVU323
 1202 000e C2F88C00 		str	r0, [r2, #140]
1813:./Library/stm32f4xx_rcc.c **** }
 1203              		.loc 1 1813 1 view .LVU324
 1204 0012 7047     		bx	lr
 1205              	.L91:
 1206              		.align	2
 1207              	.L90:
 1208 0014 00380240 		.word	1073887232
 1209              		.cfi_endproc
 1210              	.LFE149:
 1212              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1213              		.align	1
ARM GAS  /tmp/ccGY1Mdk.s 			page 54


 1214              		.global	RCC_SAIPLLSAIClkDivConfig
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1219              	RCC_SAIPLLSAIClkDivConfig:
 1220              	.LVL94:
 1221              	.LFB150:
1814:./Library/stm32f4xx_rcc.c **** 
1815:./Library/stm32f4xx_rcc.c **** /**
1816:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1817:./Library/stm32f4xx_rcc.c ****   * 
1818:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1819:./Library/stm32f4xx_rcc.c ****   *        
1820:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1821:./Library/stm32f4xx_rcc.c ****   *   
1822:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1823:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1824:./Library/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1825:./Library/stm32f4xx_rcc.c ****   *              
1826:./Library/stm32f4xx_rcc.c ****   * @retval None
1827:./Library/stm32f4xx_rcc.c ****   */
1828:./Library/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1829:./Library/stm32f4xx_rcc.c **** {
 1222              		.loc 1 1829 1 is_stmt 1 view -0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 0
 1225              		@ frame_needed = 0, uses_anonymous_args = 0
 1226              		@ link register save eliminated.
1830:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1227              		.loc 1 1830 3 view .LVU326
1831:./Library/stm32f4xx_rcc.c ****   
1832:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1833:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
 1228              		.loc 1 1833 3 view .LVU327
1834:./Library/stm32f4xx_rcc.c ****   
1835:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1229              		.loc 1 1835 3 view .LVU328
 1230              		.loc 1 1835 10 is_stmt 0 view .LVU329
 1231 0000 054A     		ldr	r2, .L93
 1232 0002 D2F88C30 		ldr	r3, [r2, #140]
 1233              	.LVL95:
1836:./Library/stm32f4xx_rcc.c **** 
1837:./Library/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1838:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1234              		.loc 1 1838 3 is_stmt 1 view .LVU330
 1235              		.loc 1 1838 10 is_stmt 0 view .LVU331
 1236 0006 23F4F853 		bic	r3, r3, #7936
 1237              	.LVL96:
1839:./Library/stm32f4xx_rcc.c **** 
1840:./Library/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1841:./Library/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1238              		.loc 1 1841 3 is_stmt 1 view .LVU332
 1239              		.loc 1 1841 30 is_stmt 0 view .LVU333
 1240 000a 0138     		subs	r0, r0, #1
 1241              	.LVL97:
 1242              		.loc 1 1841 10 view .LVU334
 1243 000c 43EA0023 		orr	r3, r3, r0, lsl #8
ARM GAS  /tmp/ccGY1Mdk.s 			page 55


 1244              	.LVL98:
1842:./Library/stm32f4xx_rcc.c **** 
1843:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1844:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1245              		.loc 1 1844 3 is_stmt 1 view .LVU335
 1246              		.loc 1 1844 16 is_stmt 0 view .LVU336
 1247 0010 C2F88C30 		str	r3, [r2, #140]
1845:./Library/stm32f4xx_rcc.c **** }
 1248              		.loc 1 1845 1 view .LVU337
 1249 0014 7047     		bx	lr
 1250              	.L94:
 1251 0016 00BF     		.align	2
 1252              	.L93:
 1253 0018 00380240 		.word	1073887232
 1254              		.cfi_endproc
 1255              	.LFE150:
 1257              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1258              		.align	1
 1259              		.global	RCC_LTDCCLKDivConfig
 1260              		.syntax unified
 1261              		.thumb
 1262              		.thumb_func
 1264              	RCC_LTDCCLKDivConfig:
 1265              	.LVL99:
 1266              	.LFB151:
1846:./Library/stm32f4xx_rcc.c **** 
1847:./Library/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1848:./Library/stm32f4xx_rcc.c **** /**
1849:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1850:./Library/stm32f4xx_rcc.c ****   * 
1851:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1852:./Library/stm32f4xx_rcc.c ****   *   
1853:./Library/stm32f4xx_rcc.c ****   * @param   RCC_PLLI2SDivR: specifies the PLLI2S division factor for SAI1 clock.
1854:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1855:./Library/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2SR) / RCC_PLLI2SDivR 
1856:./Library/stm32f4xx_rcc.c ****   * @retval None
1857:./Library/stm32f4xx_rcc.c ****   */
1858:./Library/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SRClkDivConfig(uint32_t RCC_PLLI2SDivR)  
1859:./Library/stm32f4xx_rcc.c **** {
1860:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1861:./Library/stm32f4xx_rcc.c ****   
1862:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1863:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVR_VALUE(RCC_PLLI2SDivR));
1864:./Library/stm32f4xx_rcc.c ****   
1865:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1866:./Library/stm32f4xx_rcc.c **** 
1867:./Library/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVR[4:0] bits */
1868:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVR);
1869:./Library/stm32f4xx_rcc.c **** 
1870:./Library/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVR values */
1871:./Library/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivR-1);
1872:./Library/stm32f4xx_rcc.c **** 
1873:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1874:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1875:./Library/stm32f4xx_rcc.c **** }
1876:./Library/stm32f4xx_rcc.c **** 
1877:./Library/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/ccGY1Mdk.s 			page 56


1878:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLL.
1879:./Library/stm32f4xx_rcc.c ****   * 
1880:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1881:./Library/stm32f4xx_rcc.c ****   *        
1882:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1883:./Library/stm32f4xx_rcc.c ****   *   
1884:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLDivR: specifies the PLL division factor for SAI1 clock.
1885:./Library/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1886:./Library/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLR) / RCC_PLLDivR 
1887:./Library/stm32f4xx_rcc.c ****   *              
1888:./Library/stm32f4xx_rcc.c ****   * @retval None
1889:./Library/stm32f4xx_rcc.c ****   */
1890:./Library/stm32f4xx_rcc.c **** void RCC_SAIPLLRClkDivConfig(uint32_t RCC_PLLDivR)  
1891:./Library/stm32f4xx_rcc.c **** {
1892:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1893:./Library/stm32f4xx_rcc.c ****   
1894:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1895:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_PLLDivR));
1896:./Library/stm32f4xx_rcc.c ****   
1897:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1898:./Library/stm32f4xx_rcc.c **** 
1899:./Library/stm32f4xx_rcc.c ****   /* Clear PLLDIVR[12:8] */
1900:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLDIVR);
1901:./Library/stm32f4xx_rcc.c **** 
1902:./Library/stm32f4xx_rcc.c ****   /* Set PLLDivR values */
1903:./Library/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLDivR - 1 ) << 8);
1904:./Library/stm32f4xx_rcc.c **** 
1905:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1906:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1907:./Library/stm32f4xx_rcc.c **** }
1908:./Library/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1909:./Library/stm32f4xx_rcc.c **** 
1910:./Library/stm32f4xx_rcc.c **** /**
1911:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1912:./Library/stm32f4xx_rcc.c ****   * 
1913:./Library/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F42xxx/43xxx/446xx/469xx/479xx Devices.
1914:./Library/stm32f4xx_rcc.c ****   *      
1915:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1916:./Library/stm32f4xx_rcc.c ****   *   
1917:./Library/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1918:./Library/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1919:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1920:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div2: LTDC clock = f(PLLSAI_R)/2
1921:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div4: LTDC clock = f(PLLSAI_R)/4
1922:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div8: LTDC clock = f(PLLSAI_R)/8
1923:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
1924:./Library/stm32f4xx_rcc.c ****   *            
1925:./Library/stm32f4xx_rcc.c ****   * @retval None
1926:./Library/stm32f4xx_rcc.c ****   */
1927:./Library/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1928:./Library/stm32f4xx_rcc.c **** {
 1267              		.loc 1 1928 1 is_stmt 1 view -0
 1268              		.cfi_startproc
 1269              		@ args = 0, pretend = 0, frame = 0
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              		@ link register save eliminated.
1929:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
ARM GAS  /tmp/ccGY1Mdk.s 			page 57


 1272              		.loc 1 1929 3 view .LVU339
1930:./Library/stm32f4xx_rcc.c ****   
1931:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1932:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
 1273              		.loc 1 1932 3 view .LVU340
1933:./Library/stm32f4xx_rcc.c ****   
1934:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1274              		.loc 1 1934 3 view .LVU341
 1275              		.loc 1 1934 10 is_stmt 0 view .LVU342
 1276 0000 044A     		ldr	r2, .L96
 1277 0002 D2F88C30 		ldr	r3, [r2, #140]
 1278              	.LVL100:
1935:./Library/stm32f4xx_rcc.c **** 
1936:./Library/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1937:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 1279              		.loc 1 1937 3 is_stmt 1 view .LVU343
 1280              		.loc 1 1937 10 is_stmt 0 view .LVU344
 1281 0006 23F44033 		bic	r3, r3, #196608
 1282              	.LVL101:
1938:./Library/stm32f4xx_rcc.c **** 
1939:./Library/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1940:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 1283              		.loc 1 1940 3 is_stmt 1 view .LVU345
 1284              		.loc 1 1940 10 is_stmt 0 view .LVU346
 1285 000a 0343     		orrs	r3, r3, r0
 1286              	.LVL102:
1941:./Library/stm32f4xx_rcc.c **** 
1942:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1943:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1287              		.loc 1 1943 3 is_stmt 1 view .LVU347
 1288              		.loc 1 1943 16 is_stmt 0 view .LVU348
 1289 000c C2F88C30 		str	r3, [r2, #140]
1944:./Library/stm32f4xx_rcc.c **** }
 1290              		.loc 1 1944 1 view .LVU349
 1291 0010 7047     		bx	lr
 1292              	.L97:
 1293 0012 00BF     		.align	2
 1294              	.L96:
 1295 0014 00380240 		.word	1073887232
 1296              		.cfi_endproc
 1297              	.LFE151:
 1299              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1300              		.align	1
 1301              		.global	RCC_TIMCLKPresConfig
 1302              		.syntax unified
 1303              		.thumb
 1304              		.thumb_func
 1306              	RCC_TIMCLKPresConfig:
 1307              	.LVL103:
 1308              	.LFB152:
1945:./Library/stm32f4xx_rcc.c **** 
1946:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx)
1947:./Library/stm32f4xx_rcc.c **** /**
1948:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM clock source (DFSDMCLK).
1949:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1950:./Library/stm32f4xx_rcc.c ****   * @param  RCC_DFSDMCLKSource: specifies the DFSDM clock source.
1951:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccGY1Mdk.s 			page 58


1952:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_APB: APB clock used as DFSDM clock source.
1953:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_SYS: System clock used as DFSDM clock source.
1954:./Library/stm32f4xx_rcc.c ****   *                                        
1955:./Library/stm32f4xx_rcc.c ****   * @retval None
1956:./Library/stm32f4xx_rcc.c ****   */
1957:./Library/stm32f4xx_rcc.c **** void RCC_DFSDM1CLKConfig(uint32_t RCC_DFSDMCLKSource)
1958:./Library/stm32f4xx_rcc.c **** {
1959:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1960:./Library/stm32f4xx_rcc.c ****   
1961:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1962:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDM1CLK_SOURCE(RCC_DFSDMCLKSource));
1963:./Library/stm32f4xx_rcc.c ****   
1964:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1965:./Library/stm32f4xx_rcc.c **** 
1966:./Library/stm32f4xx_rcc.c ****   /* Clear CKDFSDM-SEL  bit */
1967:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1SEL;
1968:./Library/stm32f4xx_rcc.c **** 
1969:./Library/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL bit according to RCC_DFSDMCLKSource value */
1970:./Library/stm32f4xx_rcc.c ****   tmpreg |= (RCC_DFSDMCLKSource << 31) ;
1971:./Library/stm32f4xx_rcc.c **** 
1972:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
1973:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1974:./Library/stm32f4xx_rcc.c **** }
1975:./Library/stm32f4xx_rcc.c **** 
1976:./Library/stm32f4xx_rcc.c **** /**
1977:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
1978:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1979:./Library/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM1ACLKSource: specifies the DFSDM clock source.
1980:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1981:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
1982:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
1983:./Library/stm32f4xx_rcc.c ****   *                                        
1984:./Library/stm32f4xx_rcc.c ****   * @retval None
1985:./Library/stm32f4xx_rcc.c ****   */
1986:./Library/stm32f4xx_rcc.c **** void RCC_DFSDM1ACLKConfig(uint32_t RCC_DFSDM1ACLKSource)
1987:./Library/stm32f4xx_rcc.c **** {
1988:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1989:./Library/stm32f4xx_rcc.c ****   
1990:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
1991:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMACLK_SOURCE(RCC_DFSDM1ACLKSource));
1992:./Library/stm32f4xx_rcc.c ****   
1993:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1994:./Library/stm32f4xx_rcc.c **** 
1995:./Library/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
1996:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
1997:./Library/stm32f4xx_rcc.c **** 
1998:./Library/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
1999:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDM1ACLKSource;
2000:./Library/stm32f4xx_rcc.c **** 
2001:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
2002:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2003:./Library/stm32f4xx_rcc.c **** }
2004:./Library/stm32f4xx_rcc.c **** 
2005:./Library/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
2006:./Library/stm32f4xx_rcc.c **** /**
2007:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
2008:./Library/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
ARM GAS  /tmp/ccGY1Mdk.s 			page 59


2009:./Library/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM2ACLKSource: specifies the DFSDM clock source.
2010:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2011:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
2012:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
2013:./Library/stm32f4xx_rcc.c ****   *                                        
2014:./Library/stm32f4xx_rcc.c ****   * @retval None
2015:./Library/stm32f4xx_rcc.c ****   */
2016:./Library/stm32f4xx_rcc.c **** void RCC_DFSDM2ACLKConfig(uint32_t RCC_DFSDMACLKSource)
2017:./Library/stm32f4xx_rcc.c **** {
2018:./Library/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
2019:./Library/stm32f4xx_rcc.c ****   
2020:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2021:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMCLK_SOURCE(RCC_DFSDMACLKSource));
2022:./Library/stm32f4xx_rcc.c ****   
2023:./Library/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2024:./Library/stm32f4xx_rcc.c **** 
2025:./Library/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2026:./Library/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2027:./Library/stm32f4xx_rcc.c **** 
2028:./Library/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2029:./Library/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDMACLKSource;
2030:./Library/stm32f4xx_rcc.c **** 
2031:./Library/stm32f4xx_rcc.c ****   /* Store the new value */
2032:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2033:./Library/stm32f4xx_rcc.c **** }
2034:./Library/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
2035:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx */
2036:./Library/stm32f4xx_rcc.c **** 
2037:./Library/stm32f4xx_rcc.c **** /**
2038:./Library/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
2039:./Library/stm32f4xx_rcc.c ****   * 
2040:./Library/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
2041:./Library/stm32f4xx_rcc.c ****   *   
2042:./Library/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
2043:./Library/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
2044:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
2045:./Library/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
2046:./Library/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
2047:./Library/stm32f4xx_rcc.c ****   *                 division by 4 or more.
2048:./Library/stm32f4xx_rcc.c ****   *                   
2049:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
2050:./Library/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
2051:./Library/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
2052:./Library/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
2053:./Library/stm32f4xx_rcc.c ****   * @retval None
2054:./Library/stm32f4xx_rcc.c ****   */
2055:./Library/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
2056:./Library/stm32f4xx_rcc.c **** {
 1309              		.loc 1 2056 1 is_stmt 1 view -0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 0
 1312              		@ frame_needed = 0, uses_anonymous_args = 0
 1313              		@ link register save eliminated.
2057:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2058:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
 1314              		.loc 1 2058 3 view .LVU351
2059:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccGY1Mdk.s 			page 60


2060:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 1315              		.loc 1 2060 3 view .LVU352
 1316              		.loc 1 2060 40 is_stmt 0 view .LVU353
 1317 0000 014B     		ldr	r3, .L99
 1318 0002 C3F8E001 		str	r0, [r3, #480]
2061:./Library/stm32f4xx_rcc.c **** }
 1319              		.loc 1 2061 1 view .LVU354
 1320 0006 7047     		bx	lr
 1321              	.L100:
 1322              		.align	2
 1323              	.L99:
 1324 0008 00104742 		.word	1111953408
 1325              		.cfi_endproc
 1326              	.LFE152:
 1328              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1329              		.align	1
 1330              		.global	RCC_AHB1PeriphClockCmd
 1331              		.syntax unified
 1332              		.thumb
 1333              		.thumb_func
 1335              	RCC_AHB1PeriphClockCmd:
 1336              	.LVL104:
 1337              	.LFB153:
2062:./Library/stm32f4xx_rcc.c **** 
2063:./Library/stm32f4xx_rcc.c **** /**
2064:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
2065:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2066:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2067:./Library/stm32f4xx_rcc.c ****   *         using it.   
2068:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2069:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2070:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2071:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2072:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2073:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2074:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2075:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2076:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2077:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2078:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2079:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2080:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
2081:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2082:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2083:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
2084:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2085:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2086:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
2087:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2088:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2089:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2090:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2091:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2092:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2093:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2094:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2095:./Library/stm32f4xx_rcc.c ****   * @retval None
ARM GAS  /tmp/ccGY1Mdk.s 			page 61


2096:./Library/stm32f4xx_rcc.c ****   */
2097:./Library/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2098:./Library/stm32f4xx_rcc.c **** {
 1338              		.loc 1 2098 1 is_stmt 1 view -0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 0
 1341              		@ frame_needed = 0, uses_anonymous_args = 0
 1342              		@ link register save eliminated.
2099:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2100:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 1343              		.loc 1 2100 3 view .LVU356
2101:./Library/stm32f4xx_rcc.c **** 
2102:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1344              		.loc 1 2102 3 view .LVU357
2103:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1345              		.loc 1 2103 3 view .LVU358
 1346              		.loc 1 2103 6 is_stmt 0 view .LVU359
 1347 0000 21B1     		cbz	r1, .L102
2104:./Library/stm32f4xx_rcc.c ****   {
2105:./Library/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1348              		.loc 1 2105 5 is_stmt 1 view .LVU360
 1349              		.loc 1 2105 8 is_stmt 0 view .LVU361
 1350 0002 054A     		ldr	r2, .L104
 1351 0004 136B     		ldr	r3, [r2, #48]
 1352              		.loc 1 2105 18 view .LVU362
 1353 0006 0343     		orrs	r3, r3, r0
 1354 0008 1363     		str	r3, [r2, #48]
 1355 000a 7047     		bx	lr
 1356              	.L102:
2106:./Library/stm32f4xx_rcc.c ****   }
2107:./Library/stm32f4xx_rcc.c ****   else
2108:./Library/stm32f4xx_rcc.c ****   {
2109:./Library/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1357              		.loc 1 2109 5 is_stmt 1 view .LVU363
 1358              		.loc 1 2109 8 is_stmt 0 view .LVU364
 1359 000c 024A     		ldr	r2, .L104
 1360 000e 136B     		ldr	r3, [r2, #48]
 1361              		.loc 1 2109 18 view .LVU365
 1362 0010 23EA0003 		bic	r3, r3, r0
 1363 0014 1363     		str	r3, [r2, #48]
2110:./Library/stm32f4xx_rcc.c ****   }
2111:./Library/stm32f4xx_rcc.c **** }
 1364              		.loc 1 2111 1 view .LVU366
 1365 0016 7047     		bx	lr
 1366              	.L105:
 1367              		.align	2
 1368              	.L104:
 1369 0018 00380240 		.word	1073887232
 1370              		.cfi_endproc
 1371              	.LFE153:
 1373              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1374              		.align	1
 1375              		.global	RCC_AHB2PeriphClockCmd
 1376              		.syntax unified
 1377              		.thumb
 1378              		.thumb_func
 1380              	RCC_AHB2PeriphClockCmd:
ARM GAS  /tmp/ccGY1Mdk.s 			page 62


 1381              	.LVL105:
 1382              	.LFB154:
2112:./Library/stm32f4xx_rcc.c **** 
2113:./Library/stm32f4xx_rcc.c **** /**
2114:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
2115:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2116:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2117:./Library/stm32f4xx_rcc.c ****   *         using it. 
2118:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2119:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2120:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2121:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2122:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2123:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2124:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2125:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2126:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2127:./Library/stm32f4xx_rcc.c ****   * @retval None
2128:./Library/stm32f4xx_rcc.c ****   */
2129:./Library/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2130:./Library/stm32f4xx_rcc.c **** {
 1383              		.loc 1 2130 1 is_stmt 1 view -0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 0
 1386              		@ frame_needed = 0, uses_anonymous_args = 0
 1387              		@ link register save eliminated.
2131:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2132:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
 1388              		.loc 1 2132 3 view .LVU368
2133:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1389              		.loc 1 2133 3 view .LVU369
2134:./Library/stm32f4xx_rcc.c **** 
2135:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1390              		.loc 1 2135 3 view .LVU370
 1391              		.loc 1 2135 6 is_stmt 0 view .LVU371
 1392 0000 21B1     		cbz	r1, .L107
2136:./Library/stm32f4xx_rcc.c ****   {
2137:./Library/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1393              		.loc 1 2137 5 is_stmt 1 view .LVU372
 1394              		.loc 1 2137 8 is_stmt 0 view .LVU373
 1395 0002 054A     		ldr	r2, .L109
 1396 0004 536B     		ldr	r3, [r2, #52]
 1397              		.loc 1 2137 18 view .LVU374
 1398 0006 0343     		orrs	r3, r3, r0
 1399 0008 5363     		str	r3, [r2, #52]
 1400 000a 7047     		bx	lr
 1401              	.L107:
2138:./Library/stm32f4xx_rcc.c ****   }
2139:./Library/stm32f4xx_rcc.c ****   else
2140:./Library/stm32f4xx_rcc.c ****   {
2141:./Library/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1402              		.loc 1 2141 5 is_stmt 1 view .LVU375
 1403              		.loc 1 2141 8 is_stmt 0 view .LVU376
 1404 000c 024A     		ldr	r2, .L109
 1405 000e 536B     		ldr	r3, [r2, #52]
 1406              		.loc 1 2141 18 view .LVU377
 1407 0010 23EA0003 		bic	r3, r3, r0
ARM GAS  /tmp/ccGY1Mdk.s 			page 63


 1408 0014 5363     		str	r3, [r2, #52]
2142:./Library/stm32f4xx_rcc.c ****   }
2143:./Library/stm32f4xx_rcc.c **** }
 1409              		.loc 1 2143 1 view .LVU378
 1410 0016 7047     		bx	lr
 1411              	.L110:
 1412              		.align	2
 1413              	.L109:
 1414 0018 00380240 		.word	1073887232
 1415              		.cfi_endproc
 1416              	.LFE154:
 1418              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1419              		.align	1
 1420              		.global	RCC_APB1PeriphClockCmd
 1421              		.syntax unified
 1422              		.thumb
 1423              		.thumb_func
 1425              	RCC_APB1PeriphClockCmd:
 1426              	.LVL106:
 1427              	.LFB155:
2144:./Library/stm32f4xx_rcc.c **** 
2145:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2146:./Library/stm32f4xx_rcc.c **** /**
2147:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
2148:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2149:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2150:./Library/stm32f4xx_rcc.c ****   *         using it. 
2151:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2152:./Library/stm32f4xx_rcc.c ****   *          This parameter must be: 
2153:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2154:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2155:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2156:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2157:./Library/stm32f4xx_rcc.c ****   * @retval None
2158:./Library/stm32f4xx_rcc.c ****   */
2159:./Library/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2160:./Library/stm32f4xx_rcc.c **** {
2161:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2162:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
2163:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2164:./Library/stm32f4xx_rcc.c **** 
2165:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2166:./Library/stm32f4xx_rcc.c ****   {
2167:./Library/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
2168:./Library/stm32f4xx_rcc.c ****   }
2169:./Library/stm32f4xx_rcc.c ****   else
2170:./Library/stm32f4xx_rcc.c ****   {
2171:./Library/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
2172:./Library/stm32f4xx_rcc.c ****   }
2173:./Library/stm32f4xx_rcc.c **** }
2174:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2175:./Library/stm32f4xx_rcc.c **** 
2176:./Library/stm32f4xx_rcc.c **** /**
2177:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
2178:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2179:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2180:./Library/stm32f4xx_rcc.c ****   *         using it. 
ARM GAS  /tmp/ccGY1Mdk.s 			page 64


2181:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2182:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2183:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2184:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2185:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2186:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2187:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2188:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2189:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2190:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2191:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2192:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2193:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2194:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2195:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2196:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2197:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2198:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2199:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2200:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2201:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2202:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2203:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2204:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2205:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2206:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2207:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2208:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2209:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2210:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2211:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2212:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2213:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2214:./Library/stm32f4xx_rcc.c ****   * @retval None
2215:./Library/stm32f4xx_rcc.c ****   */
2216:./Library/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2217:./Library/stm32f4xx_rcc.c **** {
 1428              		.loc 1 2217 1 is_stmt 1 view -0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
2218:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2219:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
 1433              		.loc 1 2219 3 view .LVU380
2220:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1434              		.loc 1 2220 3 view .LVU381
2221:./Library/stm32f4xx_rcc.c **** 
2222:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1435              		.loc 1 2222 3 view .LVU382
 1436              		.loc 1 2222 6 is_stmt 0 view .LVU383
 1437 0000 21B1     		cbz	r1, .L112
2223:./Library/stm32f4xx_rcc.c ****   {
2224:./Library/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1438              		.loc 1 2224 5 is_stmt 1 view .LVU384
 1439              		.loc 1 2224 8 is_stmt 0 view .LVU385
 1440 0002 054A     		ldr	r2, .L114
ARM GAS  /tmp/ccGY1Mdk.s 			page 65


 1441 0004 136C     		ldr	r3, [r2, #64]
 1442              		.loc 1 2224 18 view .LVU386
 1443 0006 0343     		orrs	r3, r3, r0
 1444 0008 1364     		str	r3, [r2, #64]
 1445 000a 7047     		bx	lr
 1446              	.L112:
2225:./Library/stm32f4xx_rcc.c ****   }
2226:./Library/stm32f4xx_rcc.c ****   else
2227:./Library/stm32f4xx_rcc.c ****   {
2228:./Library/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1447              		.loc 1 2228 5 is_stmt 1 view .LVU387
 1448              		.loc 1 2228 8 is_stmt 0 view .LVU388
 1449 000c 024A     		ldr	r2, .L114
 1450 000e 136C     		ldr	r3, [r2, #64]
 1451              		.loc 1 2228 18 view .LVU389
 1452 0010 23EA0003 		bic	r3, r3, r0
 1453 0014 1364     		str	r3, [r2, #64]
2229:./Library/stm32f4xx_rcc.c ****   }
2230:./Library/stm32f4xx_rcc.c **** }
 1454              		.loc 1 2230 1 view .LVU390
 1455 0016 7047     		bx	lr
 1456              	.L115:
 1457              		.align	2
 1458              	.L114:
 1459 0018 00380240 		.word	1073887232
 1460              		.cfi_endproc
 1461              	.LFE155:
 1463              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1464              		.align	1
 1465              		.global	RCC_APB2PeriphClockCmd
 1466              		.syntax unified
 1467              		.thumb
 1468              		.thumb_func
 1470              	RCC_APB2PeriphClockCmd:
 1471              	.LVL107:
 1472              	.LFB156:
2231:./Library/stm32f4xx_rcc.c **** 
2232:./Library/stm32f4xx_rcc.c **** /**
2233:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
2234:./Library/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2235:./Library/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2236:./Library/stm32f4xx_rcc.c ****   *         using it.
2237:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2238:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2239:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2240:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2241:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2242:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2243:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2244:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2245:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2246:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2247:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2248:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2249:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2250:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2251:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
ARM GAS  /tmp/ccGY1Mdk.s 			page 66


2252:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2253:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2254:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2255:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2256:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2257:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2258:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2259:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2260:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2261:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2262:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2263:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2264:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2265:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2266:./Library/stm32f4xx_rcc.c ****   * @retval None
2267:./Library/stm32f4xx_rcc.c ****   */
2268:./Library/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2269:./Library/stm32f4xx_rcc.c **** {
 1473              		.loc 1 2269 1 is_stmt 1 view -0
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 0
 1476              		@ frame_needed = 0, uses_anonymous_args = 0
 1477              		@ link register save eliminated.
2270:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2271:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1478              		.loc 1 2271 3 view .LVU392
2272:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1479              		.loc 1 2272 3 view .LVU393
2273:./Library/stm32f4xx_rcc.c **** 
2274:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1480              		.loc 1 2274 3 view .LVU394
 1481              		.loc 1 2274 6 is_stmt 0 view .LVU395
 1482 0000 21B1     		cbz	r1, .L117
2275:./Library/stm32f4xx_rcc.c ****   {
2276:./Library/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1483              		.loc 1 2276 5 is_stmt 1 view .LVU396
 1484              		.loc 1 2276 8 is_stmt 0 view .LVU397
 1485 0002 054A     		ldr	r2, .L119
 1486 0004 536C     		ldr	r3, [r2, #68]
 1487              		.loc 1 2276 18 view .LVU398
 1488 0006 0343     		orrs	r3, r3, r0
 1489 0008 5364     		str	r3, [r2, #68]
 1490 000a 7047     		bx	lr
 1491              	.L117:
2277:./Library/stm32f4xx_rcc.c ****   }
2278:./Library/stm32f4xx_rcc.c ****   else
2279:./Library/stm32f4xx_rcc.c ****   {
2280:./Library/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1492              		.loc 1 2280 5 is_stmt 1 view .LVU399
 1493              		.loc 1 2280 8 is_stmt 0 view .LVU400
 1494 000c 024A     		ldr	r2, .L119
 1495 000e 536C     		ldr	r3, [r2, #68]
 1496              		.loc 1 2280 18 view .LVU401
 1497 0010 23EA0003 		bic	r3, r3, r0
 1498 0014 5364     		str	r3, [r2, #68]
2281:./Library/stm32f4xx_rcc.c ****   }
2282:./Library/stm32f4xx_rcc.c **** }
ARM GAS  /tmp/ccGY1Mdk.s 			page 67


 1499              		.loc 1 2282 1 view .LVU402
 1500 0016 7047     		bx	lr
 1501              	.L120:
 1502              		.align	2
 1503              	.L119:
 1504 0018 00380240 		.word	1073887232
 1505              		.cfi_endproc
 1506              	.LFE156:
 1508              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1509              		.align	1
 1510              		.global	RCC_AHB1PeriphResetCmd
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1515              	RCC_AHB1PeriphResetCmd:
 1516              	.LVL108:
 1517              	.LFB157:
2283:./Library/stm32f4xx_rcc.c **** 
2284:./Library/stm32f4xx_rcc.c **** /**
2285:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
2286:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
2287:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2288:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
2289:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
2290:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
2291:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
2292:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
2293:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
2294:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2295:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2296:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
2297:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
2298:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
2299:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
2300:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
2301:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
2302:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
2303:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
2304:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
2305:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_RNG:     RNG clock for STM32F410xx devices   
2306:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2307:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2308:./Library/stm32f4xx_rcc.c ****   * @retval None
2309:./Library/stm32f4xx_rcc.c ****   */
2310:./Library/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2311:./Library/stm32f4xx_rcc.c **** {
 1518              		.loc 1 2311 1 is_stmt 1 view -0
 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 0
 1521              		@ frame_needed = 0, uses_anonymous_args = 0
 1522              		@ link register save eliminated.
2312:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2313:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
 1523              		.loc 1 2313 3 view .LVU404
2314:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1524              		.loc 1 2314 3 view .LVU405
2315:./Library/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccGY1Mdk.s 			page 68


2316:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1525              		.loc 1 2316 3 view .LVU406
 1526              		.loc 1 2316 6 is_stmt 0 view .LVU407
 1527 0000 21B1     		cbz	r1, .L122
2317:./Library/stm32f4xx_rcc.c ****   {
2318:./Library/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1528              		.loc 1 2318 5 is_stmt 1 view .LVU408
 1529              		.loc 1 2318 8 is_stmt 0 view .LVU409
 1530 0002 054A     		ldr	r2, .L124
 1531 0004 1369     		ldr	r3, [r2, #16]
 1532              		.loc 1 2318 19 view .LVU410
 1533 0006 0343     		orrs	r3, r3, r0
 1534 0008 1361     		str	r3, [r2, #16]
 1535 000a 7047     		bx	lr
 1536              	.L122:
2319:./Library/stm32f4xx_rcc.c ****   }
2320:./Library/stm32f4xx_rcc.c ****   else
2321:./Library/stm32f4xx_rcc.c ****   {
2322:./Library/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1537              		.loc 1 2322 5 is_stmt 1 view .LVU411
 1538              		.loc 1 2322 8 is_stmt 0 view .LVU412
 1539 000c 024A     		ldr	r2, .L124
 1540 000e 1369     		ldr	r3, [r2, #16]
 1541              		.loc 1 2322 19 view .LVU413
 1542 0010 23EA0003 		bic	r3, r3, r0
 1543 0014 1361     		str	r3, [r2, #16]
2323:./Library/stm32f4xx_rcc.c ****   }
2324:./Library/stm32f4xx_rcc.c **** }
 1544              		.loc 1 2324 1 view .LVU414
 1545 0016 7047     		bx	lr
 1546              	.L125:
 1547              		.align	2
 1548              	.L124:
 1549 0018 00380240 		.word	1073887232
 1550              		.cfi_endproc
 1551              	.LFE157:
 1553              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1554              		.align	1
 1555              		.global	RCC_AHB2PeriphResetCmd
 1556              		.syntax unified
 1557              		.thumb
 1558              		.thumb_func
 1560              	RCC_AHB2PeriphResetCmd:
 1561              	.LVL109:
 1562              	.LFB158:
2325:./Library/stm32f4xx_rcc.c **** 
2326:./Library/stm32f4xx_rcc.c **** /**
2327:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
2328:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
2329:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2330:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2331:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2332:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2333:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock for STM32F40_41xxx/STM32F412xG/STM32F413_423xx
2334:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2335:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2336:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccGY1Mdk.s 			page 69


2337:./Library/stm32f4xx_rcc.c ****   * @retval None
2338:./Library/stm32f4xx_rcc.c ****   */
2339:./Library/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2340:./Library/stm32f4xx_rcc.c **** {
 1563              		.loc 1 2340 1 is_stmt 1 view -0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 0
 1566              		@ frame_needed = 0, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
2341:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2342:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
 1568              		.loc 1 2342 3 view .LVU416
2343:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1569              		.loc 1 2343 3 view .LVU417
2344:./Library/stm32f4xx_rcc.c **** 
2345:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1570              		.loc 1 2345 3 view .LVU418
 1571              		.loc 1 2345 6 is_stmt 0 view .LVU419
 1572 0000 21B1     		cbz	r1, .L127
2346:./Library/stm32f4xx_rcc.c ****   {
2347:./Library/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1573              		.loc 1 2347 5 is_stmt 1 view .LVU420
 1574              		.loc 1 2347 8 is_stmt 0 view .LVU421
 1575 0002 054A     		ldr	r2, .L129
 1576 0004 5369     		ldr	r3, [r2, #20]
 1577              		.loc 1 2347 19 view .LVU422
 1578 0006 0343     		orrs	r3, r3, r0
 1579 0008 5361     		str	r3, [r2, #20]
 1580 000a 7047     		bx	lr
 1581              	.L127:
2348:./Library/stm32f4xx_rcc.c ****   }
2349:./Library/stm32f4xx_rcc.c ****   else
2350:./Library/stm32f4xx_rcc.c ****   {
2351:./Library/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1582              		.loc 1 2351 5 is_stmt 1 view .LVU423
 1583              		.loc 1 2351 8 is_stmt 0 view .LVU424
 1584 000c 024A     		ldr	r2, .L129
 1585 000e 5369     		ldr	r3, [r2, #20]
 1586              		.loc 1 2351 19 view .LVU425
 1587 0010 23EA0003 		bic	r3, r3, r0
 1588 0014 5361     		str	r3, [r2, #20]
2352:./Library/stm32f4xx_rcc.c ****   }
2353:./Library/stm32f4xx_rcc.c **** }
 1589              		.loc 1 2353 1 view .LVU426
 1590 0016 7047     		bx	lr
 1591              	.L130:
 1592              		.align	2
 1593              	.L129:
 1594 0018 00380240 		.word	1073887232
 1595              		.cfi_endproc
 1596              	.LFE158:
 1598              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1599              		.align	1
 1600              		.global	RCC_APB1PeriphResetCmd
 1601              		.syntax unified
 1602              		.thumb
 1603              		.thumb_func
ARM GAS  /tmp/ccGY1Mdk.s 			page 70


 1605              	RCC_APB1PeriphResetCmd:
 1606              	.LVL110:
 1607              	.LFB159:
2354:./Library/stm32f4xx_rcc.c **** 
2355:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2356:./Library/stm32f4xx_rcc.c **** /**
2357:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
2358:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
2359:./Library/stm32f4xx_rcc.c ****   *          This parameter must be: 
2360:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG, STM32F413_423xx and STM32F4
2361:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F446xx/STM32F469_479xx devices)
2362:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2363:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2364:./Library/stm32f4xx_rcc.c ****   * @retval None
2365:./Library/stm32f4xx_rcc.c ****   */
2366:./Library/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2367:./Library/stm32f4xx_rcc.c **** {
2368:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2369:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2370:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2371:./Library/stm32f4xx_rcc.c **** 
2372:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2373:./Library/stm32f4xx_rcc.c ****   {
2374:./Library/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
2375:./Library/stm32f4xx_rcc.c ****   }
2376:./Library/stm32f4xx_rcc.c ****   else
2377:./Library/stm32f4xx_rcc.c ****   {
2378:./Library/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
2379:./Library/stm32f4xx_rcc.c ****   }
2380:./Library/stm32f4xx_rcc.c **** }
2381:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2382:./Library/stm32f4xx_rcc.c **** 
2383:./Library/stm32f4xx_rcc.c **** /**
2384:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
2385:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
2386:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2387:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2388:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2389:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2390:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2391:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2392:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2393:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2394:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2395:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2396:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2397:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2398:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2399:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2400:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2401:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2402:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2403:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2404:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2405:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2406:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2407:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
ARM GAS  /tmp/ccGY1Mdk.s 			page 71


2408:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2409:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2410:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2411:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock(STM32F446xx devices)
2412:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2413:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2414:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2415:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
2416:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2417:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2418:./Library/stm32f4xx_rcc.c ****   * @retval None
2419:./Library/stm32f4xx_rcc.c ****   */
2420:./Library/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2421:./Library/stm32f4xx_rcc.c **** {
 1608              		.loc 1 2421 1 is_stmt 1 view -0
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 0
 1611              		@ frame_needed = 0, uses_anonymous_args = 0
 1612              		@ link register save eliminated.
2422:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2423:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 1613              		.loc 1 2423 3 view .LVU428
2424:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1614              		.loc 1 2424 3 view .LVU429
2425:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1615              		.loc 1 2425 3 view .LVU430
 1616              		.loc 1 2425 6 is_stmt 0 view .LVU431
 1617 0000 21B1     		cbz	r1, .L132
2426:./Library/stm32f4xx_rcc.c ****   {
2427:./Library/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1618              		.loc 1 2427 5 is_stmt 1 view .LVU432
 1619              		.loc 1 2427 8 is_stmt 0 view .LVU433
 1620 0002 054A     		ldr	r2, .L134
 1621 0004 136A     		ldr	r3, [r2, #32]
 1622              		.loc 1 2427 19 view .LVU434
 1623 0006 0343     		orrs	r3, r3, r0
 1624 0008 1362     		str	r3, [r2, #32]
 1625 000a 7047     		bx	lr
 1626              	.L132:
2428:./Library/stm32f4xx_rcc.c ****   }
2429:./Library/stm32f4xx_rcc.c ****   else
2430:./Library/stm32f4xx_rcc.c ****   {
2431:./Library/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1627              		.loc 1 2431 5 is_stmt 1 view .LVU435
 1628              		.loc 1 2431 8 is_stmt 0 view .LVU436
 1629 000c 024A     		ldr	r2, .L134
 1630 000e 136A     		ldr	r3, [r2, #32]
 1631              		.loc 1 2431 19 view .LVU437
 1632 0010 23EA0003 		bic	r3, r3, r0
 1633 0014 1362     		str	r3, [r2, #32]
2432:./Library/stm32f4xx_rcc.c ****   }
2433:./Library/stm32f4xx_rcc.c **** }
 1634              		.loc 1 2433 1 view .LVU438
 1635 0016 7047     		bx	lr
 1636              	.L135:
 1637              		.align	2
 1638              	.L134:
ARM GAS  /tmp/ccGY1Mdk.s 			page 72


 1639 0018 00380240 		.word	1073887232
 1640              		.cfi_endproc
 1641              	.LFE159:
 1643              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1644              		.align	1
 1645              		.global	RCC_APB2PeriphResetCmd
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1650              	RCC_APB2PeriphResetCmd:
 1651              	.LVL111:
 1652              	.LFB160:
2434:./Library/stm32f4xx_rcc.c **** 
2435:./Library/stm32f4xx_rcc.c **** /**
2436:./Library/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
2437:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
2438:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2439:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2440:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2441:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2442:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2443:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2444:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2445:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2446:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2447:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2448:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
2449:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2450:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2451:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2452:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2453:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2454:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2455:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2456:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2457:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2458:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2459:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2460:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2461:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2462:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2463:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2464:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2465:./Library/stm32f4xx_rcc.c ****   * @retval None
2466:./Library/stm32f4xx_rcc.c ****   */
2467:./Library/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2468:./Library/stm32f4xx_rcc.c **** {
 1653              		.loc 1 2468 1 is_stmt 1 view -0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 1657              		@ link register save eliminated.
2469:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2470:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
 1658              		.loc 1 2470 3 view .LVU440
2471:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1659              		.loc 1 2471 3 view .LVU441
ARM GAS  /tmp/ccGY1Mdk.s 			page 73


2472:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1660              		.loc 1 2472 3 view .LVU442
 1661              		.loc 1 2472 6 is_stmt 0 view .LVU443
 1662 0000 21B1     		cbz	r1, .L137
2473:./Library/stm32f4xx_rcc.c ****   {
2474:./Library/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1663              		.loc 1 2474 5 is_stmt 1 view .LVU444
 1664              		.loc 1 2474 8 is_stmt 0 view .LVU445
 1665 0002 054A     		ldr	r2, .L139
 1666 0004 536A     		ldr	r3, [r2, #36]
 1667              		.loc 1 2474 19 view .LVU446
 1668 0006 0343     		orrs	r3, r3, r0
 1669 0008 5362     		str	r3, [r2, #36]
 1670 000a 7047     		bx	lr
 1671              	.L137:
2475:./Library/stm32f4xx_rcc.c ****   }
2476:./Library/stm32f4xx_rcc.c ****   else
2477:./Library/stm32f4xx_rcc.c ****   {
2478:./Library/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1672              		.loc 1 2478 5 is_stmt 1 view .LVU447
 1673              		.loc 1 2478 8 is_stmt 0 view .LVU448
 1674 000c 024A     		ldr	r2, .L139
 1675 000e 536A     		ldr	r3, [r2, #36]
 1676              		.loc 1 2478 19 view .LVU449
 1677 0010 23EA0003 		bic	r3, r3, r0
 1678 0014 5362     		str	r3, [r2, #36]
2479:./Library/stm32f4xx_rcc.c ****   }
2480:./Library/stm32f4xx_rcc.c **** }
 1679              		.loc 1 2480 1 view .LVU450
 1680 0016 7047     		bx	lr
 1681              	.L140:
 1682              		.align	2
 1683              	.L139:
 1684 0018 00380240 		.word	1073887232
 1685              		.cfi_endproc
 1686              	.LFE160:
 1688              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1689              		.align	1
 1690              		.global	RCC_AHB1PeriphClockLPModeCmd
 1691              		.syntax unified
 1692              		.thumb
 1693              		.thumb_func
 1695              	RCC_AHB1PeriphClockLPModeCmd:
 1696              	.LVL112:
 1697              	.LFB161:
2481:./Library/stm32f4xx_rcc.c **** 
2482:./Library/stm32f4xx_rcc.c **** /**
2483:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
2484:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2485:./Library/stm32f4xx_rcc.c ****   *         power consumption.
2486:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2487:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2488:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2489:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2490:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2491:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2492:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
ARM GAS  /tmp/ccGY1Mdk.s 			page 74


2493:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2494:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2495:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2496:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2497:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2498:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2499:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2500:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
2501:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2502:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2503:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2504:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2505:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
2506:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2507:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2508:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2509:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2510:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2511:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2512:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2513:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2514:./Library/stm32f4xx_rcc.c ****   * @retval None
2515:./Library/stm32f4xx_rcc.c ****   */
2516:./Library/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2517:./Library/stm32f4xx_rcc.c **** {
 1698              		.loc 1 2517 1 is_stmt 1 view -0
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 0
 1701              		@ frame_needed = 0, uses_anonymous_args = 0
 1702              		@ link register save eliminated.
2518:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2519:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
 1703              		.loc 1 2519 3 view .LVU452
2520:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1704              		.loc 1 2520 3 view .LVU453
2521:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1705              		.loc 1 2521 3 view .LVU454
 1706              		.loc 1 2521 6 is_stmt 0 view .LVU455
 1707 0000 21B1     		cbz	r1, .L142
2522:./Library/stm32f4xx_rcc.c ****   {
2523:./Library/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 1708              		.loc 1 2523 5 is_stmt 1 view .LVU456
 1709              		.loc 1 2523 8 is_stmt 0 view .LVU457
 1710 0002 054A     		ldr	r2, .L144
 1711 0004 136D     		ldr	r3, [r2, #80]
 1712              		.loc 1 2523 20 view .LVU458
 1713 0006 0343     		orrs	r3, r3, r0
 1714 0008 1365     		str	r3, [r2, #80]
 1715 000a 7047     		bx	lr
 1716              	.L142:
2524:./Library/stm32f4xx_rcc.c ****   }
2525:./Library/stm32f4xx_rcc.c ****   else
2526:./Library/stm32f4xx_rcc.c ****   {
2527:./Library/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1717              		.loc 1 2527 5 is_stmt 1 view .LVU459
 1718              		.loc 1 2527 8 is_stmt 0 view .LVU460
 1719 000c 024A     		ldr	r2, .L144
ARM GAS  /tmp/ccGY1Mdk.s 			page 75


 1720 000e 136D     		ldr	r3, [r2, #80]
 1721              		.loc 1 2527 20 view .LVU461
 1722 0010 23EA0003 		bic	r3, r3, r0
 1723 0014 1365     		str	r3, [r2, #80]
2528:./Library/stm32f4xx_rcc.c ****   }
2529:./Library/stm32f4xx_rcc.c **** }
 1724              		.loc 1 2529 1 view .LVU462
 1725 0016 7047     		bx	lr
 1726              	.L145:
 1727              		.align	2
 1728              	.L144:
 1729 0018 00380240 		.word	1073887232
 1730              		.cfi_endproc
 1731              	.LFE161:
 1733              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1734              		.align	1
 1735              		.global	RCC_AHB2PeriphClockLPModeCmd
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1740              	RCC_AHB2PeriphClockLPModeCmd:
 1741              	.LVL113:
 1742              	.LFB162:
2530:./Library/stm32f4xx_rcc.c **** 
2531:./Library/stm32f4xx_rcc.c **** /**
2532:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
2533:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2534:./Library/stm32f4xx_rcc.c ****   *           power consumption.
2535:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2536:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2537:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2538:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2539:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2540:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2541:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2542:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2543:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
2544:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2545:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2546:./Library/stm32f4xx_rcc.c ****   * @retval None
2547:./Library/stm32f4xx_rcc.c ****   */
2548:./Library/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2549:./Library/stm32f4xx_rcc.c **** {
 1743              		.loc 1 2549 1 is_stmt 1 view -0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              		@ link register save eliminated.
2550:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2551:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
 1748              		.loc 1 2551 3 view .LVU464
2552:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1749              		.loc 1 2552 3 view .LVU465
2553:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1750              		.loc 1 2553 3 view .LVU466
 1751              		.loc 1 2553 6 is_stmt 0 view .LVU467
 1752 0000 21B1     		cbz	r1, .L147
ARM GAS  /tmp/ccGY1Mdk.s 			page 76


2554:./Library/stm32f4xx_rcc.c ****   {
2555:./Library/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 1753              		.loc 1 2555 5 is_stmt 1 view .LVU468
 1754              		.loc 1 2555 8 is_stmt 0 view .LVU469
 1755 0002 054A     		ldr	r2, .L149
 1756 0004 536D     		ldr	r3, [r2, #84]
 1757              		.loc 1 2555 20 view .LVU470
 1758 0006 0343     		orrs	r3, r3, r0
 1759 0008 5365     		str	r3, [r2, #84]
 1760 000a 7047     		bx	lr
 1761              	.L147:
2556:./Library/stm32f4xx_rcc.c ****   }
2557:./Library/stm32f4xx_rcc.c ****   else
2558:./Library/stm32f4xx_rcc.c ****   {
2559:./Library/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1762              		.loc 1 2559 5 is_stmt 1 view .LVU471
 1763              		.loc 1 2559 8 is_stmt 0 view .LVU472
 1764 000c 024A     		ldr	r2, .L149
 1765 000e 536D     		ldr	r3, [r2, #84]
 1766              		.loc 1 2559 20 view .LVU473
 1767 0010 23EA0003 		bic	r3, r3, r0
 1768 0014 5365     		str	r3, [r2, #84]
2560:./Library/stm32f4xx_rcc.c ****   }
2561:./Library/stm32f4xx_rcc.c **** }
 1769              		.loc 1 2561 1 view .LVU474
 1770 0016 7047     		bx	lr
 1771              	.L150:
 1772              		.align	2
 1773              	.L149:
 1774 0018 00380240 		.word	1073887232
 1775              		.cfi_endproc
 1776              	.LFE162:
 1778              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1779              		.align	1
 1780              		.global	RCC_APB1PeriphClockLPModeCmd
 1781              		.syntax unified
 1782              		.thumb
 1783              		.thumb_func
 1785              	RCC_APB1PeriphClockLPModeCmd:
 1786              	.LVL114:
 1787              	.LFB163:
2562:./Library/stm32f4xx_rcc.c **** 
2563:./Library/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2564:./Library/stm32f4xx_rcc.c **** /**
2565:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
2566:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2567:./Library/stm32f4xx_rcc.c ****   *         power consumption.
2568:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2569:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2570:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2571:./Library/stm32f4xx_rcc.c ****   *          This parameter must be: 
2572:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2573:./Library/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2574:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2575:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2576:./Library/stm32f4xx_rcc.c ****   * @retval None
2577:./Library/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/ccGY1Mdk.s 			page 77


2578:./Library/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2579:./Library/stm32f4xx_rcc.c **** {
2580:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2581:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2582:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2583:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2584:./Library/stm32f4xx_rcc.c ****   {
2585:./Library/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
2586:./Library/stm32f4xx_rcc.c ****   }
2587:./Library/stm32f4xx_rcc.c ****   else
2588:./Library/stm32f4xx_rcc.c ****   {
2589:./Library/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
2590:./Library/stm32f4xx_rcc.c ****   }
2591:./Library/stm32f4xx_rcc.c **** }
2592:./Library/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2593:./Library/stm32f4xx_rcc.c **** 
2594:./Library/stm32f4xx_rcc.c **** /**
2595:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
2596:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2597:./Library/stm32f4xx_rcc.c ****   *         power consumption.
2598:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2599:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2600:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2601:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2602:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2603:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2604:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2605:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2606:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2607:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2608:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2609:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2610:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2611:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2612:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2613:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2614:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2615:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
2616:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2617:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2618:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2619:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2620:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2621:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2622:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2623:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
2624:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2625:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2626:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2627:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2628:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2629:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2630:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2631:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2632:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2633:./Library/stm32f4xx_rcc.c ****   * @retval None
2634:./Library/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/ccGY1Mdk.s 			page 78


2635:./Library/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2636:./Library/stm32f4xx_rcc.c **** {
 1788              		.loc 1 2636 1 is_stmt 1 view -0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 0
 1791              		@ frame_needed = 0, uses_anonymous_args = 0
 1792              		@ link register save eliminated.
2637:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2638:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
 1793              		.loc 1 2638 3 view .LVU476
2639:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1794              		.loc 1 2639 3 view .LVU477
2640:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1795              		.loc 1 2640 3 view .LVU478
 1796              		.loc 1 2640 6 is_stmt 0 view .LVU479
 1797 0000 21B1     		cbz	r1, .L152
2641:./Library/stm32f4xx_rcc.c ****   {
2642:./Library/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 1798              		.loc 1 2642 5 is_stmt 1 view .LVU480
 1799              		.loc 1 2642 8 is_stmt 0 view .LVU481
 1800 0002 054A     		ldr	r2, .L154
 1801 0004 136E     		ldr	r3, [r2, #96]
 1802              		.loc 1 2642 20 view .LVU482
 1803 0006 0343     		orrs	r3, r3, r0
 1804 0008 1366     		str	r3, [r2, #96]
 1805 000a 7047     		bx	lr
 1806              	.L152:
2643:./Library/stm32f4xx_rcc.c ****   }
2644:./Library/stm32f4xx_rcc.c ****   else
2645:./Library/stm32f4xx_rcc.c ****   {
2646:./Library/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1807              		.loc 1 2646 5 is_stmt 1 view .LVU483
 1808              		.loc 1 2646 8 is_stmt 0 view .LVU484
 1809 000c 024A     		ldr	r2, .L154
 1810 000e 136E     		ldr	r3, [r2, #96]
 1811              		.loc 1 2646 20 view .LVU485
 1812 0010 23EA0003 		bic	r3, r3, r0
 1813 0014 1366     		str	r3, [r2, #96]
2647:./Library/stm32f4xx_rcc.c ****   }
2648:./Library/stm32f4xx_rcc.c **** }
 1814              		.loc 1 2648 1 view .LVU486
 1815 0016 7047     		bx	lr
 1816              	.L155:
 1817              		.align	2
 1818              	.L154:
 1819 0018 00380240 		.word	1073887232
 1820              		.cfi_endproc
 1821              	.LFE163:
 1823              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1824              		.align	1
 1825              		.global	RCC_APB2PeriphClockLPModeCmd
 1826              		.syntax unified
 1827              		.thumb
 1828              		.thumb_func
 1830              	RCC_APB2PeriphClockLPModeCmd:
 1831              	.LVL115:
 1832              	.LFB164:
ARM GAS  /tmp/ccGY1Mdk.s 			page 79


2649:./Library/stm32f4xx_rcc.c **** 
2650:./Library/stm32f4xx_rcc.c **** /**
2651:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2652:./Library/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2653:./Library/stm32f4xx_rcc.c ****   *         power consumption.
2654:./Library/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2655:./Library/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2656:./Library/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2657:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2658:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2659:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2660:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2661:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2662:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2663:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2664:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2665:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2666:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2667:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2668:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2669:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2670:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2671:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2672:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2673:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2674:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2675:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2676:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices)
2677:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2678:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2679:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2680:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2681:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2682:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2683:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2684:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2685:./Library/stm32f4xx_rcc.c ****   * @retval None
2686:./Library/stm32f4xx_rcc.c ****   */
2687:./Library/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2688:./Library/stm32f4xx_rcc.c **** {
 1833              		.loc 1 2688 1 is_stmt 1 view -0
 1834              		.cfi_startproc
 1835              		@ args = 0, pretend = 0, frame = 0
 1836              		@ frame_needed = 0, uses_anonymous_args = 0
 1837              		@ link register save eliminated.
2689:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2690:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 1838              		.loc 1 2690 3 view .LVU488
2691:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1839              		.loc 1 2691 3 view .LVU489
2692:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1840              		.loc 1 2692 3 view .LVU490
 1841              		.loc 1 2692 6 is_stmt 0 view .LVU491
 1842 0000 21B1     		cbz	r1, .L157
2693:./Library/stm32f4xx_rcc.c ****   {
2694:./Library/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 1843              		.loc 1 2694 5 is_stmt 1 view .LVU492
ARM GAS  /tmp/ccGY1Mdk.s 			page 80


 1844              		.loc 1 2694 8 is_stmt 0 view .LVU493
 1845 0002 054A     		ldr	r2, .L159
 1846 0004 536E     		ldr	r3, [r2, #100]
 1847              		.loc 1 2694 20 view .LVU494
 1848 0006 0343     		orrs	r3, r3, r0
 1849 0008 5366     		str	r3, [r2, #100]
 1850 000a 7047     		bx	lr
 1851              	.L157:
2695:./Library/stm32f4xx_rcc.c ****   }
2696:./Library/stm32f4xx_rcc.c ****   else
2697:./Library/stm32f4xx_rcc.c ****   {
2698:./Library/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 1852              		.loc 1 2698 5 is_stmt 1 view .LVU495
 1853              		.loc 1 2698 8 is_stmt 0 view .LVU496
 1854 000c 024A     		ldr	r2, .L159
 1855 000e 536E     		ldr	r3, [r2, #100]
 1856              		.loc 1 2698 20 view .LVU497
 1857 0010 23EA0003 		bic	r3, r3, r0
 1858 0014 5366     		str	r3, [r2, #100]
2699:./Library/stm32f4xx_rcc.c ****   }
2700:./Library/stm32f4xx_rcc.c **** }
 1859              		.loc 1 2700 1 view .LVU498
 1860 0016 7047     		bx	lr
 1861              	.L160:
 1862              		.align	2
 1863              	.L159:
 1864 0018 00380240 		.word	1073887232
 1865              		.cfi_endproc
 1866              	.LFE164:
 1868              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 1869              		.align	1
 1870              		.global	RCC_LSEModeConfig
 1871              		.syntax unified
 1872              		.thumb
 1873              		.thumb_func
 1875              	RCC_LSEModeConfig:
 1876              	.LVL116:
 1877              	.LFB165:
2701:./Library/stm32f4xx_rcc.c **** 
2702:./Library/stm32f4xx_rcc.c **** /**
2703:./Library/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2704:./Library/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469_479xx devic
2705:./Library/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2706:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2707:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2708:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2709:./Library/stm32f4xx_rcc.c ****   * @retval None
2710:./Library/stm32f4xx_rcc.c ****   */
2711:./Library/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t RCC_Mode)
2712:./Library/stm32f4xx_rcc.c **** {
 1878              		.loc 1 2712 1 is_stmt 1 view -0
 1879              		.cfi_startproc
 1880              		@ args = 0, pretend = 0, frame = 0
 1881              		@ frame_needed = 0, uses_anonymous_args = 0
 1882              		@ link register save eliminated.
2713:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2714:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(RCC_Mode));
ARM GAS  /tmp/ccGY1Mdk.s 			page 81


 1883              		.loc 1 2714 3 view .LVU500
2715:./Library/stm32f4xx_rcc.c ****   
2716:./Library/stm32f4xx_rcc.c ****   if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
 1884              		.loc 1 2716 3 view .LVU501
 1885              		.loc 1 2716 5 is_stmt 0 view .LVU502
 1886 0000 0128     		cmp	r0, #1
 1887 0002 05D0     		beq	.L164
2717:./Library/stm32f4xx_rcc.c ****   {
2718:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2719:./Library/stm32f4xx_rcc.c ****   }
2720:./Library/stm32f4xx_rcc.c ****   else
2721:./Library/stm32f4xx_rcc.c ****   {
2722:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 1888              		.loc 1 2722 5 is_stmt 1 view .LVU503
 1889 0004 054A     		ldr	r2, .L165
 1890 0006 136F     		ldr	r3, [r2, #112]
 1891 0008 23F00803 		bic	r3, r3, #8
 1892 000c 1367     		str	r3, [r2, #112]
2723:./Library/stm32f4xx_rcc.c ****   }
2724:./Library/stm32f4xx_rcc.c **** }
 1893              		.loc 1 2724 1 is_stmt 0 view .LVU504
 1894 000e 7047     		bx	lr
 1895              	.L164:
2718:./Library/stm32f4xx_rcc.c ****   }
 1896              		.loc 1 2718 5 is_stmt 1 view .LVU505
 1897 0010 024A     		ldr	r2, .L165
 1898 0012 136F     		ldr	r3, [r2, #112]
 1899 0014 43F00803 		orr	r3, r3, #8
 1900 0018 1367     		str	r3, [r2, #112]
 1901 001a 7047     		bx	lr
 1902              	.L166:
 1903              		.align	2
 1904              	.L165:
 1905 001c 00380240 		.word	1073887232
 1906              		.cfi_endproc
 1907              	.LFE165:
 1909              		.section	.text.RCC_ITConfig,"ax",%progbits
 1910              		.align	1
 1911              		.global	RCC_ITConfig
 1912              		.syntax unified
 1913              		.thumb
 1914              		.thumb_func
 1916              	RCC_ITConfig:
 1917              	.LVL117:
 1918              	.LFB166:
2725:./Library/stm32f4xx_rcc.c **** 
2726:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
2727:./Library/stm32f4xx_rcc.c **** /**
2728:./Library/stm32f4xx_rcc.c ****   * @brief Configures the LPTIM1 clock Source.
2729:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F410xx devices.
2730:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the LPTIM1 clock Source.
2731:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2732:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_PCLK: LPTIM1 clock from APB1 selected.
2733:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_HSI:  LPTIM1 clock from HSI selected.
2734:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSI:  LPTIM1 clock from LSI selected.
2735:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSE:  LPTIM1 clock from LSE selected.
2736:./Library/stm32f4xx_rcc.c ****   * @retval None
ARM GAS  /tmp/ccGY1Mdk.s 			page 82


2737:./Library/stm32f4xx_rcc.c ****   */
2738:./Library/stm32f4xx_rcc.c **** void RCC_LPTIM1ClockSourceConfig(uint32_t RCC_ClockSource)
2739:./Library/stm32f4xx_rcc.c **** {
2740:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2741:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LPTIM1_CLOCKSOURCE(RCC_ClockSource));
2742:./Library/stm32f4xx_rcc.c **** 
2743:./Library/stm32f4xx_rcc.c ****   /* Clear LPTIM1 clock source selection source bits */
2744:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_LPTIM1SEL;
2745:./Library/stm32f4xx_rcc.c ****   /* Set new LPTIM1 clock source */
2746:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2747:./Library/stm32f4xx_rcc.c **** }
2748:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */
2749:./Library/stm32f4xx_rcc.c **** 
2750:./Library/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
2751:./Library/stm32f4xx_rcc.c **** /**
2752:./Library/stm32f4xx_rcc.c ****   * @brief Configures the DSI clock Source.
2753:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx devices.
2754:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the DSI clock Source.
2755:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2756:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PHY: DSI-PHY used as DSI byte lane clock source (usual case).
2757:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PLLR: PLL_R used as DSI byte lane clock source, used in case D
2758:./Library/stm32f4xx_rcc.c ****   * @retval None
2759:./Library/stm32f4xx_rcc.c ****   */
2760:./Library/stm32f4xx_rcc.c **** void RCC_DSIClockSourceConfig(uint8_t RCC_ClockSource)
2761:./Library/stm32f4xx_rcc.c **** {
2762:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2763:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DSI_CLOCKSOURCE(RCC_ClockSource));
2764:./Library/stm32f4xx_rcc.c ****   
2765:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_DSICLKSource_PLLR)
2766:./Library/stm32f4xx_rcc.c ****   {
2767:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2768:./Library/stm32f4xx_rcc.c ****   }
2769:./Library/stm32f4xx_rcc.c ****   else
2770:./Library/stm32f4xx_rcc.c ****   {
2771:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2772:./Library/stm32f4xx_rcc.c ****   }
2773:./Library/stm32f4xx_rcc.c **** }
2774:./Library/stm32f4xx_rcc.c **** #endif /*  STM32F469_479xx */
2775:./Library/stm32f4xx_rcc.c **** 
2776:./Library/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_4
2777:./Library/stm32f4xx_rcc.c **** /**
2778:./Library/stm32f4xx_rcc.c ****   * @brief Configures the 48MHz clock Source.
2779:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx/STM32F469_479xx devices.
2780:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the 48MHz clock Source.
2781:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2782:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLL: 48MHz from PLL selected.
2783:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLLSAI: 48MHz from PLLSAI selected.
2784:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_CK48CLKSOURCE_PLLI2SQ : 48MHz from PLLI2SQ
2785:./Library/stm32f4xx_rcc.c ****   * @retval None
2786:./Library/stm32f4xx_rcc.c ****   */
2787:./Library/stm32f4xx_rcc.c **** void RCC_48MHzClockSourceConfig(uint8_t RCC_ClockSource)
2788:./Library/stm32f4xx_rcc.c **** {
2789:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2790:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_48MHZ_CLOCKSOURCE(RCC_ClockSource));
2791:./Library/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx) 
2792:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2793:./Library/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/ccGY1Mdk.s 			page 83


2794:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2795:./Library/stm32f4xx_rcc.c ****   }
2796:./Library/stm32f4xx_rcc.c ****   else
2797:./Library/stm32f4xx_rcc.c ****   {
2798:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2799:./Library/stm32f4xx_rcc.c ****   }
2800:./Library/stm32f4xx_rcc.c **** #elif  defined(STM32F446xx)
2801:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2802:./Library/stm32f4xx_rcc.c ****   {
2803:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2804:./Library/stm32f4xx_rcc.c ****   }
2805:./Library/stm32f4xx_rcc.c ****   else
2806:./Library/stm32f4xx_rcc.c ****   {
2807:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2808:./Library/stm32f4xx_rcc.c ****   }
2809:./Library/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx)
2810:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CK48CLKSOURCE_PLLI2SQ)
2811:./Library/stm32f4xx_rcc.c ****   {
2812:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2813:./Library/stm32f4xx_rcc.c ****   }
2814:./Library/stm32f4xx_rcc.c ****   else
2815:./Library/stm32f4xx_rcc.c ****   {
2816:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2817:./Library/stm32f4xx_rcc.c ****   }
2818:./Library/stm32f4xx_rcc.c **** #else
2819:./Library/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */  
2820:./Library/stm32f4xx_rcc.c **** }
2821:./Library/stm32f4xx_rcc.c **** 
2822:./Library/stm32f4xx_rcc.c **** /**
2823:./Library/stm32f4xx_rcc.c ****   * @brief Configures the SDIO clock Source.
2824:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx/STM32F446xx devices.
2825:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SDIO clock Source.
2826:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2827:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_48MHZ: 48MHz clock selected.
2828:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_SYSCLK: system clock selected.
2829:./Library/stm32f4xx_rcc.c ****   * @retval None
2830:./Library/stm32f4xx_rcc.c ****   */
2831:./Library/stm32f4xx_rcc.c **** void RCC_SDIOClockSourceConfig(uint8_t RCC_ClockSource)
2832:./Library/stm32f4xx_rcc.c **** {
2833:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2834:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SDIO_CLOCKSOURCE(RCC_ClockSource));
2835:./Library/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)   
2836:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2837:./Library/stm32f4xx_rcc.c ****   {
2838:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2839:./Library/stm32f4xx_rcc.c ****   }
2840:./Library/stm32f4xx_rcc.c ****   else
2841:./Library/stm32f4xx_rcc.c ****   {
2842:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2843:./Library/stm32f4xx_rcc.c ****   }
2844:./Library/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
2845:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2846:./Library/stm32f4xx_rcc.c ****   {
2847:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2848:./Library/stm32f4xx_rcc.c ****   }
2849:./Library/stm32f4xx_rcc.c ****   else
2850:./Library/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/ccGY1Mdk.s 			page 84


2851:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2852:./Library/stm32f4xx_rcc.c ****   }
2853:./Library/stm32f4xx_rcc.c **** #else
2854:./Library/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */ 
2855:./Library/stm32f4xx_rcc.c **** }
2856:./Library/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
2857:./Library/stm32f4xx_rcc.c **** 
2858:./Library/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
2859:./Library/stm32f4xx_rcc.c **** /**
2860:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 clock gating for the specified IPs.
2861:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2862:./Library/stm32f4xx_rcc.c ****   * @param  RCC_AHB1ClockGating: specifies the AHB1 clock gating.
2863:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2864:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB1Bridge: AHB1 to APB1 clock
2865:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB2Bridge: AHB1 to APB2 clock 
2866:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_CM4DBG: Cortex M4 ETM clock
2867:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SPARE: Spare clock
2868:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SRAM: SRAM controller clock
2869:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_FLITF: Flash interface clock
2870:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_RCC: RCC clock
2871:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2872:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2873:./Library/stm32f4xx_rcc.c ****   * @retval None
2874:./Library/stm32f4xx_rcc.c ****   */
2875:./Library/stm32f4xx_rcc.c **** void RCC_AHB1ClockGatingCmd(uint32_t RCC_AHB1ClockGating, FunctionalState NewState)
2876:./Library/stm32f4xx_rcc.c **** {
2877:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2878:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCKGATING(RCC_AHB1ClockGating));
2879:./Library/stm32f4xx_rcc.c **** 
2880:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2881:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2882:./Library/stm32f4xx_rcc.c ****   {
2883:./Library/stm32f4xx_rcc.c ****     RCC->CKGATENR &= ~RCC_AHB1ClockGating;
2884:./Library/stm32f4xx_rcc.c ****   }
2885:./Library/stm32f4xx_rcc.c ****   else
2886:./Library/stm32f4xx_rcc.c ****   {
2887:./Library/stm32f4xx_rcc.c ****     RCC->CKGATENR |= RCC_AHB1ClockGating;
2888:./Library/stm32f4xx_rcc.c ****   }
2889:./Library/stm32f4xx_rcc.c **** }
2890:./Library/stm32f4xx_rcc.c **** 
2891:./Library/stm32f4xx_rcc.c **** /**
2892:./Library/stm32f4xx_rcc.c ****   * @brief Configures the SPDIFRX clock Source.
2893:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2894:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SPDIFRX clock Source.
2895:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2896:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLR: SPDIFRX clock from PLL_R selected.
2897:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLI2SP: SPDIFRX clock from PLLI2S_P selected.
2898:./Library/stm32f4xx_rcc.c ****   * @retval None
2899:./Library/stm32f4xx_rcc.c ****   */
2900:./Library/stm32f4xx_rcc.c **** void RCC_SPDIFRXClockSourceConfig(uint8_t RCC_ClockSource)
2901:./Library/stm32f4xx_rcc.c **** {
2902:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2903:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SPDIFRX_CLOCKSOURCE(RCC_ClockSource));
2904:./Library/stm32f4xx_rcc.c ****   
2905:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SPDIFRXCLKSource_PLLI2SP)
2906:./Library/stm32f4xx_rcc.c ****   {
2907:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
ARM GAS  /tmp/ccGY1Mdk.s 			page 85


2908:./Library/stm32f4xx_rcc.c ****   }
2909:./Library/stm32f4xx_rcc.c ****   else
2910:./Library/stm32f4xx_rcc.c ****   {
2911:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2912:./Library/stm32f4xx_rcc.c ****   }
2913:./Library/stm32f4xx_rcc.c **** }
2914:./Library/stm32f4xx_rcc.c **** 
2915:./Library/stm32f4xx_rcc.c **** /**
2916:./Library/stm32f4xx_rcc.c ****   * @brief Configures the CEC clock Source.
2917:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2918:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the CEC clock Source.
2919:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2920:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_HSIDiv488: CEC clock from HSI/488 selected.
2921:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_LSE: CEC clock from LSE selected.
2922:./Library/stm32f4xx_rcc.c ****   * @retval None
2923:./Library/stm32f4xx_rcc.c ****   */
2924:./Library/stm32f4xx_rcc.c **** void RCC_CECClockSourceConfig(uint8_t RCC_ClockSource)
2925:./Library/stm32f4xx_rcc.c **** {
2926:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2927:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CEC_CLOCKSOURCE(RCC_ClockSource));
2928:./Library/stm32f4xx_rcc.c ****   
2929:./Library/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CECCLKSource_LSE)
2930:./Library/stm32f4xx_rcc.c ****   {
2931:./Library/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2932:./Library/stm32f4xx_rcc.c ****   }
2933:./Library/stm32f4xx_rcc.c ****   else
2934:./Library/stm32f4xx_rcc.c ****   {
2935:./Library/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2936:./Library/stm32f4xx_rcc.c ****   }
2937:./Library/stm32f4xx_rcc.c **** }
2938:./Library/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
2939:./Library/stm32f4xx_rcc.c **** 
2940:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
2941:./Library/stm32f4xx_rcc.c **** /**
2942:./Library/stm32f4xx_rcc.c ****   * @brief Configures the FMPI2C1 clock Source.
2943:./Library/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2944:./Library/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the FMPI2C1 clock Source.
2945:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2946:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_APB1: FMPI2C1 clock from APB1 selected.
2947:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_SYSCLK: FMPI2C1 clock from Sytem clock selected.
2948:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_HSI: FMPI2C1 clock from HSI selected.
2949:./Library/stm32f4xx_rcc.c ****   * @retval None
2950:./Library/stm32f4xx_rcc.c ****   */
2951:./Library/stm32f4xx_rcc.c **** void RCC_FMPI2C1ClockSourceConfig(uint32_t RCC_ClockSource)
2952:./Library/stm32f4xx_rcc.c **** {
2953:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2954:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FMPI2C1_CLOCKSOURCE(RCC_ClockSource));
2955:./Library/stm32f4xx_rcc.c **** 
2956:./Library/stm32f4xx_rcc.c ****   /* Clear FMPI2C1 clock source selection source bits */
2957:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_FMPI2C1SEL;
2958:./Library/stm32f4xx_rcc.c ****   /* Set new FMPI2C1 clock source */
2959:./Library/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2960:./Library/stm32f4xx_rcc.c **** }
2961:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
2962:./Library/stm32f4xx_rcc.c **** /**
2963:./Library/stm32f4xx_rcc.c ****   * @}
2964:./Library/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/ccGY1Mdk.s 			page 86


2965:./Library/stm32f4xx_rcc.c **** 
2966:./Library/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
2967:./Library/stm32f4xx_rcc.c **** /**
2968:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO1.
2969:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO1.
2970:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2971:./Library/stm32f4xx_rcc.c ****   * @retval None
2972:./Library/stm32f4xx_rcc.c ****   */
2973:./Library/stm32f4xx_rcc.c **** void RCC_MCO1Cmd(FunctionalState NewState)
2974:./Library/stm32f4xx_rcc.c **** {
2975:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2976:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2977:./Library/stm32f4xx_rcc.c **** 
2978:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO1EN_BB = (uint32_t)NewState;
2979:./Library/stm32f4xx_rcc.c **** }
2980:./Library/stm32f4xx_rcc.c **** 
2981:./Library/stm32f4xx_rcc.c **** /**
2982:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO2.
2983:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO2.
2984:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2985:./Library/stm32f4xx_rcc.c ****   * @retval None
2986:./Library/stm32f4xx_rcc.c ****   */
2987:./Library/stm32f4xx_rcc.c **** void RCC_MCO2Cmd(FunctionalState NewState)
2988:./Library/stm32f4xx_rcc.c **** {
2989:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
2990:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2991:./Library/stm32f4xx_rcc.c **** 
2992:./Library/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO2EN_BB = (uint32_t)NewState;
2993:./Library/stm32f4xx_rcc.c **** }
2994:./Library/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
2995:./Library/stm32f4xx_rcc.c **** 
2996:./Library/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
2997:./Library/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
2998:./Library/stm32f4xx_rcc.c ****  *
2999:./Library/stm32f4xx_rcc.c **** @verbatim   
3000:./Library/stm32f4xx_rcc.c ****  ===============================================================================
3001:./Library/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
3002:./Library/stm32f4xx_rcc.c ****  ===============================================================================  
3003:./Library/stm32f4xx_rcc.c **** 
3004:./Library/stm32f4xx_rcc.c **** @endverbatim
3005:./Library/stm32f4xx_rcc.c ****   * @{
3006:./Library/stm32f4xx_rcc.c ****   */
3007:./Library/stm32f4xx_rcc.c **** 
3008:./Library/stm32f4xx_rcc.c **** /**
3009:./Library/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
3010:./Library/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
3011:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3012:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3013:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3014:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3015:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3016:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3017:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3018:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3019:./Library/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
3020:./Library/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
3021:./Library/stm32f4xx_rcc.c ****   * @retval None
ARM GAS  /tmp/ccGY1Mdk.s 			page 87


3022:./Library/stm32f4xx_rcc.c ****   */
3023:./Library/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
3024:./Library/stm32f4xx_rcc.c **** {
 1919              		.loc 1 3024 1 view -0
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
3025:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
3026:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 1924              		.loc 1 3026 3 view .LVU507
3027:./Library/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 1925              		.loc 1 3027 3 view .LVU508
3028:./Library/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1926              		.loc 1 3028 3 view .LVU509
 1927              		.loc 1 3028 6 is_stmt 0 view .LVU510
 1928 0000 21B1     		cbz	r1, .L168
3029:./Library/stm32f4xx_rcc.c ****   {
3030:./Library/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
3031:./Library/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 1929              		.loc 1 3031 5 is_stmt 1 view .LVU511
 1930 0002 054A     		ldr	r2, .L170
 1931 0004 537B     		ldrb	r3, [r2, #13]	@ zero_extendqisi2
 1932              		.loc 1 3031 41 is_stmt 0 view .LVU512
 1933 0006 0343     		orrs	r3, r3, r0
 1934 0008 5373     		strb	r3, [r2, #13]
 1935 000a 7047     		bx	lr
 1936              	.L168:
3032:./Library/stm32f4xx_rcc.c ****   }
3033:./Library/stm32f4xx_rcc.c ****   else
3034:./Library/stm32f4xx_rcc.c ****   {
3035:./Library/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
3036:./Library/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1937              		.loc 1 3036 5 is_stmt 1 view .LVU513
 1938 000c 024A     		ldr	r2, .L170
 1939 000e 537B     		ldrb	r3, [r2, #13]	@ zero_extendqisi2
 1940              		.loc 1 3036 41 is_stmt 0 view .LVU514
 1941 0010 23EA0003 		bic	r3, r3, r0
 1942 0014 5373     		strb	r3, [r2, #13]
3037:./Library/stm32f4xx_rcc.c ****   }
3038:./Library/stm32f4xx_rcc.c **** }
 1943              		.loc 1 3038 1 view .LVU515
 1944 0016 7047     		bx	lr
 1945              	.L171:
 1946              		.align	2
 1947              	.L170:
 1948 0018 00380240 		.word	1073887232
 1949              		.cfi_endproc
 1950              	.LFE166:
 1952              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1953              		.align	1
 1954              		.global	RCC_GetFlagStatus
 1955              		.syntax unified
 1956              		.thumb
 1957              		.thumb_func
 1959              	RCC_GetFlagStatus:
 1960              	.LVL118:
ARM GAS  /tmp/ccGY1Mdk.s 			page 88


 1961              	.LFB167:
3039:./Library/stm32f4xx_rcc.c **** 
3040:./Library/stm32f4xx_rcc.c **** /**
3041:./Library/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
3042:./Library/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
3043:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3044:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
3045:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
3046:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
3047:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
3048:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx/446xx/469xx/
3049:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
3050:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
3051:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
3052:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
3053:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
3054:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
3055:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
3056:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
3057:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
3058:./Library/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
3059:./Library/stm32f4xx_rcc.c ****   */
3060:./Library/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
3061:./Library/stm32f4xx_rcc.c **** {
 1962              		.loc 1 3061 1 is_stmt 1 view -0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 0, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
3062:./Library/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 1967              		.loc 1 3062 3 view .LVU517
3063:./Library/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 1968              		.loc 1 3063 3 view .LVU518
3064:./Library/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 1969              		.loc 1 3064 3 view .LVU519
3065:./Library/stm32f4xx_rcc.c **** 
3066:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
3067:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
 1970              		.loc 1 3067 3 view .LVU520
3068:./Library/stm32f4xx_rcc.c **** 
3069:./Library/stm32f4xx_rcc.c ****   /* Get the RCC register index */
3070:./Library/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1971              		.loc 1 3070 3 view .LVU521
 1972              		.loc 1 3070 18 is_stmt 0 view .LVU522
 1973 0000 4309     		lsrs	r3, r0, #5
 1974              	.LVL119:
3071:./Library/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1975              		.loc 1 3071 3 is_stmt 1 view .LVU523
 1976              		.loc 1 3071 6 is_stmt 0 view .LVU524
 1977 0002 012B     		cmp	r3, #1
 1978 0004 0BD0     		beq	.L178
3072:./Library/stm32f4xx_rcc.c ****   {
3073:./Library/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
3074:./Library/stm32f4xx_rcc.c ****   }
3075:./Library/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1979              		.loc 1 3075 8 is_stmt 1 view .LVU525
 1980              		.loc 1 3075 11 is_stmt 0 view .LVU526
ARM GAS  /tmp/ccGY1Mdk.s 			page 89


 1981 0006 022B     		cmp	r3, #2
 1982 0008 0CD0     		beq	.L179
3076:./Library/stm32f4xx_rcc.c ****   {
3077:./Library/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
3078:./Library/stm32f4xx_rcc.c ****   }
3079:./Library/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
3080:./Library/stm32f4xx_rcc.c ****   {
3081:./Library/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1983              		.loc 1 3081 5 is_stmt 1 view .LVU527
 1984              		.loc 1 3081 15 is_stmt 0 view .LVU528
 1985 000a 094B     		ldr	r3, .L180
 1986              	.LVL120:
 1987              		.loc 1 3081 15 view .LVU529
 1988 000c 5B6F     		ldr	r3, [r3, #116]
 1989              	.LVL121:
 1990              	.L174:
3082:./Library/stm32f4xx_rcc.c ****   }
3083:./Library/stm32f4xx_rcc.c **** 
3084:./Library/stm32f4xx_rcc.c ****   /* Get the flag position */
3085:./Library/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1991              		.loc 1 3085 3 is_stmt 1 view .LVU530
 1992              		.loc 1 3085 7 is_stmt 0 view .LVU531
 1993 000e 00F01F00 		and	r0, r0, #31
 1994              	.LVL122:
3086:./Library/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1995              		.loc 1 3086 3 is_stmt 1 view .LVU532
 1996              		.loc 1 3086 42 is_stmt 0 view .LVU533
 1997 0012 C340     		lsrs	r3, r3, r0
 1998              	.LVL123:
 1999              		.loc 1 3086 6 view .LVU534
 2000 0014 13F0010F 		tst	r3, #1
 2001 0018 07D0     		beq	.L177
3087:./Library/stm32f4xx_rcc.c ****   {
3088:./Library/stm32f4xx_rcc.c ****     bitstatus = SET;
 2002              		.loc 1 3088 15 view .LVU535
 2003 001a 0120     		movs	r0, #1
 2004              	.LVL124:
 2005              		.loc 1 3088 15 view .LVU536
 2006 001c 7047     		bx	lr
 2007              	.LVL125:
 2008              	.L178:
3073:./Library/stm32f4xx_rcc.c ****   }
 2009              		.loc 1 3073 5 is_stmt 1 view .LVU537
3073:./Library/stm32f4xx_rcc.c ****   }
 2010              		.loc 1 3073 15 is_stmt 0 view .LVU538
 2011 001e 044B     		ldr	r3, .L180
 2012              	.LVL126:
3073:./Library/stm32f4xx_rcc.c ****   }
 2013              		.loc 1 3073 15 view .LVU539
 2014 0020 1B68     		ldr	r3, [r3]
 2015              	.LVL127:
3073:./Library/stm32f4xx_rcc.c ****   }
 2016              		.loc 1 3073 15 view .LVU540
 2017 0022 F4E7     		b	.L174
 2018              	.LVL128:
 2019              	.L179:
3077:./Library/stm32f4xx_rcc.c ****   }
ARM GAS  /tmp/ccGY1Mdk.s 			page 90


 2020              		.loc 1 3077 5 is_stmt 1 view .LVU541
3077:./Library/stm32f4xx_rcc.c ****   }
 2021              		.loc 1 3077 15 is_stmt 0 view .LVU542
 2022 0024 024B     		ldr	r3, .L180
 2023              	.LVL129:
3077:./Library/stm32f4xx_rcc.c ****   }
 2024              		.loc 1 3077 15 view .LVU543
 2025 0026 1B6F     		ldr	r3, [r3, #112]
 2026              	.LVL130:
3077:./Library/stm32f4xx_rcc.c ****   }
 2027              		.loc 1 3077 15 view .LVU544
 2028 0028 F1E7     		b	.L174
 2029              	.LVL131:
 2030              	.L177:
3089:./Library/stm32f4xx_rcc.c ****   }
3090:./Library/stm32f4xx_rcc.c ****   else
3091:./Library/stm32f4xx_rcc.c ****   {
3092:./Library/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2031              		.loc 1 3092 15 view .LVU545
 2032 002a 0020     		movs	r0, #0
 2033              	.LVL132:
3093:./Library/stm32f4xx_rcc.c ****   }
3094:./Library/stm32f4xx_rcc.c ****   /* Return the flag status */
3095:./Library/stm32f4xx_rcc.c ****   return bitstatus;
 2034              		.loc 1 3095 3 is_stmt 1 view .LVU546
3096:./Library/stm32f4xx_rcc.c **** }
 2035              		.loc 1 3096 1 is_stmt 0 view .LVU547
 2036 002c 7047     		bx	lr
 2037              	.L181:
 2038 002e 00BF     		.align	2
 2039              	.L180:
 2040 0030 00380240 		.word	1073887232
 2041              		.cfi_endproc
 2042              	.LFE167:
 2044              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 2045              		.align	1
 2046              		.global	RCC_WaitForHSEStartUp
 2047              		.syntax unified
 2048              		.thumb
 2049              		.thumb_func
 2051              	RCC_WaitForHSEStartUp:
 2052              	.LFB125:
 302:./Library/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 2053              		.loc 1 302 1 is_stmt 1 view -0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 8
 2056              		@ frame_needed = 0, uses_anonymous_args = 0
 2057 0000 00B5     		push	{lr}
 2058              	.LCFI3:
 2059              		.cfi_def_cfa_offset 4
 2060              		.cfi_offset 14, -4
 2061 0002 83B0     		sub	sp, sp, #12
 2062              	.LCFI4:
 2063              		.cfi_def_cfa_offset 16
 303:./Library/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 2064              		.loc 1 303 3 view .LVU549
 303:./Library/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
ARM GAS  /tmp/ccGY1Mdk.s 			page 91


 2065              		.loc 1 303 17 is_stmt 0 view .LVU550
 2066 0004 0023     		movs	r3, #0
 2067 0006 0193     		str	r3, [sp, #4]
 304:./Library/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 2068              		.loc 1 304 3 is_stmt 1 view .LVU551
 2069              	.LVL133:
 305:./Library/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 2070              		.loc 1 305 3 view .LVU552
 2071              	.L184:
 307:./Library/stm32f4xx_rcc.c ****   {
 2072              		.loc 1 307 3 discriminator 2 view .LVU553
 309:./Library/stm32f4xx_rcc.c ****     startupcounter++;
 2073              		.loc 1 309 5 discriminator 2 view .LVU554
 309:./Library/stm32f4xx_rcc.c ****     startupcounter++;
 2074              		.loc 1 309 17 is_stmt 0 discriminator 2 view .LVU555
 2075 0008 3120     		movs	r0, #49
 2076 000a FFF7FEFF 		bl	RCC_GetFlagStatus
 2077              	.LVL134:
 310:./Library/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 2078              		.loc 1 310 5 is_stmt 1 discriminator 2 view .LVU556
 310:./Library/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 2079              		.loc 1 310 19 is_stmt 0 discriminator 2 view .LVU557
 2080 000e 019B     		ldr	r3, [sp, #4]
 2081 0010 0133     		adds	r3, r3, #1
 2082 0012 0193     		str	r3, [sp, #4]
 311:./Library/stm32f4xx_rcc.c **** 
 2083              		.loc 1 311 51 is_stmt 1 discriminator 2 view .LVU558
 311:./Library/stm32f4xx_rcc.c **** 
 2084              		.loc 1 311 27 is_stmt 0 discriminator 2 view .LVU559
 2085 0014 019B     		ldr	r3, [sp, #4]
 311:./Library/stm32f4xx_rcc.c **** 
 2086              		.loc 1 311 51 discriminator 2 view .LVU560
 2087 0016 B3F5A04F 		cmp	r3, #20480
 2088 001a 01D0     		beq	.L183
 311:./Library/stm32f4xx_rcc.c **** 
 2089              		.loc 1 311 51 discriminator 1 view .LVU561
 2090 001c 0028     		cmp	r0, #0
 2091 001e F3D0     		beq	.L184
 2092              	.L183:
 313:./Library/stm32f4xx_rcc.c ****   {
 2093              		.loc 1 313 3 is_stmt 1 view .LVU562
 313:./Library/stm32f4xx_rcc.c ****   {
 2094              		.loc 1 313 7 is_stmt 0 view .LVU563
 2095 0020 3120     		movs	r0, #49
 2096              	.LVL135:
 313:./Library/stm32f4xx_rcc.c ****   {
 2097              		.loc 1 313 7 view .LVU564
 2098 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 2099              	.LVL136:
 313:./Library/stm32f4xx_rcc.c ****   {
 2100              		.loc 1 313 6 view .LVU565
 2101 0026 00B1     		cbz	r0, .L185
 315:./Library/stm32f4xx_rcc.c ****   }
 2102              		.loc 1 315 12 view .LVU566
 2103 0028 0120     		movs	r0, #1
 2104              	.L185:
 2105              	.LVL137:
ARM GAS  /tmp/ccGY1Mdk.s 			page 92


 321:./Library/stm32f4xx_rcc.c **** }
 2106              		.loc 1 321 3 is_stmt 1 view .LVU567
 322:./Library/stm32f4xx_rcc.c **** 
 2107              		.loc 1 322 1 is_stmt 0 view .LVU568
 2108 002a 03B0     		add	sp, sp, #12
 2109              	.LCFI5:
 2110              		.cfi_def_cfa_offset 4
 2111              		@ sp needed
 2112 002c 5DF804FB 		ldr	pc, [sp], #4
 2113              		.cfi_endproc
 2114              	.LFE125:
 2116              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2117              		.align	1
 2118              		.global	RCC_ClearFlag
 2119              		.syntax unified
 2120              		.thumb
 2121              		.thumb_func
 2123              	RCC_ClearFlag:
 2124              	.LFB168:
3097:./Library/stm32f4xx_rcc.c **** 
3098:./Library/stm32f4xx_rcc.c **** /**
3099:./Library/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
3100:./Library/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
3101:./Library/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
3102:./Library/stm32f4xx_rcc.c ****   * @param  None
3103:./Library/stm32f4xx_rcc.c ****   * @retval None
3104:./Library/stm32f4xx_rcc.c ****   */
3105:./Library/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
3106:./Library/stm32f4xx_rcc.c **** {
 2125              		.loc 1 3106 1 is_stmt 1 view -0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 0
 2128              		@ frame_needed = 0, uses_anonymous_args = 0
 2129              		@ link register save eliminated.
3107:./Library/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
3108:./Library/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2130              		.loc 1 3108 3 view .LVU570
 2131              		.loc 1 3108 6 is_stmt 0 view .LVU571
 2132 0000 024A     		ldr	r2, .L188
 2133 0002 536F     		ldr	r3, [r2, #116]
 2134              		.loc 1 3108 12 view .LVU572
 2135 0004 43F08073 		orr	r3, r3, #16777216
 2136 0008 5367     		str	r3, [r2, #116]
3109:./Library/stm32f4xx_rcc.c **** }
 2137              		.loc 1 3109 1 view .LVU573
 2138 000a 7047     		bx	lr
 2139              	.L189:
 2140              		.align	2
 2141              	.L188:
 2142 000c 00380240 		.word	1073887232
 2143              		.cfi_endproc
 2144              	.LFE168:
 2146              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2147              		.align	1
 2148              		.global	RCC_GetITStatus
 2149              		.syntax unified
 2150              		.thumb
ARM GAS  /tmp/ccGY1Mdk.s 			page 93


 2151              		.thumb_func
 2153              	RCC_GetITStatus:
 2154              	.LVL138:
 2155              	.LFB169:
3110:./Library/stm32f4xx_rcc.c **** 
3111:./Library/stm32f4xx_rcc.c **** /**
3112:./Library/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
3113:./Library/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
3114:./Library/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3115:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3116:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3117:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3118:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3119:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3120:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3121:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446x
3122:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3123:./Library/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
3124:./Library/stm32f4xx_rcc.c ****   */
3125:./Library/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
3126:./Library/stm32f4xx_rcc.c **** {
 2156              		.loc 1 3126 1 is_stmt 1 view -0
 2157              		.cfi_startproc
 2158              		@ args = 0, pretend = 0, frame = 0
 2159              		@ frame_needed = 0, uses_anonymous_args = 0
 2160              		@ link register save eliminated.
3127:./Library/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2161              		.loc 1 3127 3 view .LVU575
3128:./Library/stm32f4xx_rcc.c **** 
3129:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
3130:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
 2162              		.loc 1 3130 3 view .LVU576
3131:./Library/stm32f4xx_rcc.c **** 
3132:./Library/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
3133:./Library/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2163              		.loc 1 3133 3 view .LVU577
 2164              		.loc 1 3133 11 is_stmt 0 view .LVU578
 2165 0000 034B     		ldr	r3, .L193
 2166 0002 DB68     		ldr	r3, [r3, #12]
 2167              		.loc 1 3133 6 view .LVU579
 2168 0004 1842     		tst	r0, r3
 2169 0006 01D0     		beq	.L192
3134:./Library/stm32f4xx_rcc.c ****   {
3135:./Library/stm32f4xx_rcc.c ****     bitstatus = SET;
 2170              		.loc 1 3135 15 view .LVU580
 2171 0008 0120     		movs	r0, #1
 2172              	.LVL139:
 2173              		.loc 1 3135 15 view .LVU581
 2174 000a 7047     		bx	lr
 2175              	.LVL140:
 2176              	.L192:
3136:./Library/stm32f4xx_rcc.c ****   }
3137:./Library/stm32f4xx_rcc.c ****   else
3138:./Library/stm32f4xx_rcc.c ****   {
3139:./Library/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2177              		.loc 1 3139 15 view .LVU582
 2178 000c 0020     		movs	r0, #0
ARM GAS  /tmp/ccGY1Mdk.s 			page 94


 2179              	.LVL141:
3140:./Library/stm32f4xx_rcc.c ****   }
3141:./Library/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
3142:./Library/stm32f4xx_rcc.c ****   return  bitstatus;
 2180              		.loc 1 3142 3 is_stmt 1 view .LVU583
3143:./Library/stm32f4xx_rcc.c **** }
 2181              		.loc 1 3143 1 is_stmt 0 view .LVU584
 2182 000e 7047     		bx	lr
 2183              	.L194:
 2184              		.align	2
 2185              	.L193:
 2186 0010 00380240 		.word	1073887232
 2187              		.cfi_endproc
 2188              	.LFE169:
 2190              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2191              		.align	1
 2192              		.global	RCC_ClearITPendingBit
 2193              		.syntax unified
 2194              		.thumb
 2195              		.thumb_func
 2197              	RCC_ClearITPendingBit:
 2198              	.LVL142:
 2199              	.LFB170:
3144:./Library/stm32f4xx_rcc.c **** 
3145:./Library/stm32f4xx_rcc.c **** /**
3146:./Library/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
3147:./Library/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
3148:./Library/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3149:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3150:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3151:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3152:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3153:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3154:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
3155:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3156:./Library/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3157:./Library/stm32f4xx_rcc.c ****   * @retval None
3158:./Library/stm32f4xx_rcc.c ****   */
3159:./Library/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
3160:./Library/stm32f4xx_rcc.c **** {
 2200              		.loc 1 3160 1 is_stmt 1 view -0
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 0
 2203              		@ frame_needed = 0, uses_anonymous_args = 0
 2204              		@ link register save eliminated.
3161:./Library/stm32f4xx_rcc.c ****   /* Check the parameters */
3162:./Library/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
 2205              		.loc 1 3162 3 view .LVU586
3163:./Library/stm32f4xx_rcc.c **** 
3164:./Library/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
3165:./Library/stm32f4xx_rcc.c ****      pending bits */
3166:./Library/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2206              		.loc 1 3166 3 view .LVU587
 2207              		.loc 1 3166 39 is_stmt 0 view .LVU588
 2208 0000 014B     		ldr	r3, .L196
 2209 0002 9873     		strb	r0, [r3, #14]
3167:./Library/stm32f4xx_rcc.c **** }
ARM GAS  /tmp/ccGY1Mdk.s 			page 95


 2210              		.loc 1 3167 1 view .LVU589
 2211 0004 7047     		bx	lr
 2212              	.L197:
 2213 0006 00BF     		.align	2
 2214              	.L196:
 2215 0008 00380240 		.word	1073887232
 2216              		.cfi_endproc
 2217              	.LFE170:
 2219              		.section	.data.APBAHBPrescTable,"aw"
 2220              		.align	2
 2223              	APBAHBPrescTable:
 2224 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004\001\002\003\004\006"
 2224      01020304 
 2224      01020304 
 2224      06
 2225 000d 070809   		.ascii	"\007\010\011"
 2226              		.text
 2227              	.Letext0:
 2228              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 2229              		.file 3 "./CORE/stm32f4xx.h"
 2230              		.file 4 "./Library/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccGY1Mdk.s 			page 96


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
     /tmp/ccGY1Mdk.s:21     .text.RCC_DeInit:0000000000000000 $t
     /tmp/ccGY1Mdk.s:27     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/ccGY1Mdk.s:77     .text.RCC_DeInit:0000000000000034 $d
     /tmp/ccGY1Mdk.s:84     .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:90     .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/ccGY1Mdk.s:112    .text.RCC_HSEConfig:000000000000000c $d
     /tmp/ccGY1Mdk.s:117    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/ccGY1Mdk.s:123    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/ccGY1Mdk.s:154    .text.RCC_AdjustHSICalibrationValue:0000000000000010 $d
     /tmp/ccGY1Mdk.s:159    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:165    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/ccGY1Mdk.s:183    .text.RCC_HSICmd:0000000000000008 $d
     /tmp/ccGY1Mdk.s:188    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:194    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/ccGY1Mdk.s:237    .text.RCC_LSEConfig:000000000000002c $d
     /tmp/ccGY1Mdk.s:242    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:248    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/ccGY1Mdk.s:266    .text.RCC_LSICmd:0000000000000008 $d
     /tmp/ccGY1Mdk.s:271    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:277    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/ccGY1Mdk.s:315    .text.RCC_PLLConfig:000000000000001c $d
     /tmp/ccGY1Mdk.s:320    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:326    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/ccGY1Mdk.s:344    .text.RCC_PLLCmd:0000000000000008 $d
     /tmp/ccGY1Mdk.s:349    .text.RCC_PLLI2SConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:355    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
     /tmp/ccGY1Mdk.s:379    .text.RCC_PLLI2SConfig:0000000000000010 $d
     /tmp/ccGY1Mdk.s:384    .text.RCC_PLLI2SCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:390    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
     /tmp/ccGY1Mdk.s:408    .text.RCC_PLLI2SCmd:0000000000000008 $d
     /tmp/ccGY1Mdk.s:413    .text.RCC_PLLSAIConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:419    .text.RCC_PLLSAIConfig:0000000000000000 RCC_PLLSAIConfig
     /tmp/ccGY1Mdk.s:446    .text.RCC_PLLSAIConfig:0000000000000014 $d
     /tmp/ccGY1Mdk.s:451    .text.RCC_PLLSAICmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:457    .text.RCC_PLLSAICmd:0000000000000000 RCC_PLLSAICmd
     /tmp/ccGY1Mdk.s:475    .text.RCC_PLLSAICmd:0000000000000008 $d
     /tmp/ccGY1Mdk.s:480    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:486    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/ccGY1Mdk.s:504    .text.RCC_ClockSecuritySystemCmd:0000000000000008 $d
     /tmp/ccGY1Mdk.s:509    .text.RCC_MCO1Config:0000000000000000 $t
     /tmp/ccGY1Mdk.s:515    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
     /tmp/ccGY1Mdk.s:550    .text.RCC_MCO1Config:0000000000000010 $d
     /tmp/ccGY1Mdk.s:555    .text.RCC_MCO2Config:0000000000000000 $t
     /tmp/ccGY1Mdk.s:561    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
     /tmp/ccGY1Mdk.s:596    .text.RCC_MCO2Config:0000000000000010 $d
     /tmp/ccGY1Mdk.s:601    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:607    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/ccGY1Mdk.s:638    .text.RCC_SYSCLKConfig:0000000000000010 $d
     /tmp/ccGY1Mdk.s:643    .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/ccGY1Mdk.s:649    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
     /tmp/ccGY1Mdk.s:666    .text.RCC_GetSYSCLKSource:000000000000000c $d
     /tmp/ccGY1Mdk.s:671    .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:677    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/ccGY1Mdk.s:708    .text.RCC_HCLKConfig:0000000000000010 $d
     /tmp/ccGY1Mdk.s:713    .text.RCC_PCLK1Config:0000000000000000 $t
ARM GAS  /tmp/ccGY1Mdk.s 			page 97


     /tmp/ccGY1Mdk.s:719    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/ccGY1Mdk.s:750    .text.RCC_PCLK1Config:0000000000000010 $d
     /tmp/ccGY1Mdk.s:755    .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/ccGY1Mdk.s:761    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/ccGY1Mdk.s:792    .text.RCC_PCLK2Config:0000000000000010 $d
     /tmp/ccGY1Mdk.s:797    .text.RCC_GetClocksFreq:0000000000000000 $t
     /tmp/ccGY1Mdk.s:803    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/ccGY1Mdk.s:1007   .text.RCC_GetClocksFreq:00000000000000a8 $d
     /tmp/ccGY1Mdk.s:2223   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
     /tmp/ccGY1Mdk.s:1015   .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1021   .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/ccGY1Mdk.s:1076   .text.RCC_RTCCLKConfig:0000000000000030 $d
     /tmp/ccGY1Mdk.s:1081   .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1087   .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/ccGY1Mdk.s:1105   .text.RCC_RTCCLKCmd:0000000000000008 $d
     /tmp/ccGY1Mdk.s:1110   .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1116   .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/ccGY1Mdk.s:1134   .text.RCC_BackupResetCmd:0000000000000008 $d
     /tmp/ccGY1Mdk.s:1139   .text.RCC_I2SCLKConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1145   .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
     /tmp/ccGY1Mdk.s:1163   .text.RCC_I2SCLKConfig:0000000000000008 $d
     /tmp/ccGY1Mdk.s:1168   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1174   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 RCC_SAIPLLI2SClkDivConfig
     /tmp/ccGY1Mdk.s:1208   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000014 $d
     /tmp/ccGY1Mdk.s:1213   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1219   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 RCC_SAIPLLSAIClkDivConfig
     /tmp/ccGY1Mdk.s:1253   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1258   .text.RCC_LTDCCLKDivConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1264   .text.RCC_LTDCCLKDivConfig:0000000000000000 RCC_LTDCCLKDivConfig
     /tmp/ccGY1Mdk.s:1295   .text.RCC_LTDCCLKDivConfig:0000000000000014 $d
     /tmp/ccGY1Mdk.s:1300   .text.RCC_TIMCLKPresConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1306   .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
     /tmp/ccGY1Mdk.s:1324   .text.RCC_TIMCLKPresConfig:0000000000000008 $d
     /tmp/ccGY1Mdk.s:1329   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1335   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
     /tmp/ccGY1Mdk.s:1369   .text.RCC_AHB1PeriphClockCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1374   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1380   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/ccGY1Mdk.s:1414   .text.RCC_AHB2PeriphClockCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1419   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1425   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/ccGY1Mdk.s:1459   .text.RCC_APB1PeriphClockCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1464   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1470   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/ccGY1Mdk.s:1504   .text.RCC_APB2PeriphClockCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1509   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1515   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
     /tmp/ccGY1Mdk.s:1549   .text.RCC_AHB1PeriphResetCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1554   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1560   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
     /tmp/ccGY1Mdk.s:1594   .text.RCC_AHB2PeriphResetCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1599   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1605   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
     /tmp/ccGY1Mdk.s:1639   .text.RCC_APB1PeriphResetCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1644   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1650   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/ccGY1Mdk.s:1684   .text.RCC_APB2PeriphResetCmd:0000000000000018 $d
ARM GAS  /tmp/ccGY1Mdk.s 			page 98


     /tmp/ccGY1Mdk.s:1689   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1695   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/ccGY1Mdk.s:1729   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1734   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1740   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/ccGY1Mdk.s:1774   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1779   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1785   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/ccGY1Mdk.s:1819   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1824   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1830   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/ccGY1Mdk.s:1864   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1869   .text.RCC_LSEModeConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1875   .text.RCC_LSEModeConfig:0000000000000000 RCC_LSEModeConfig
     /tmp/ccGY1Mdk.s:1905   .text.RCC_LSEModeConfig:000000000000001c $d
     /tmp/ccGY1Mdk.s:1910   .text.RCC_ITConfig:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1916   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/ccGY1Mdk.s:1948   .text.RCC_ITConfig:0000000000000018 $d
     /tmp/ccGY1Mdk.s:1953   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/ccGY1Mdk.s:1959   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/ccGY1Mdk.s:2040   .text.RCC_GetFlagStatus:0000000000000030 $d
     /tmp/ccGY1Mdk.s:2045   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/ccGY1Mdk.s:2051   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/ccGY1Mdk.s:2117   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/ccGY1Mdk.s:2123   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/ccGY1Mdk.s:2142   .text.RCC_ClearFlag:000000000000000c $d
     /tmp/ccGY1Mdk.s:2147   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/ccGY1Mdk.s:2153   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/ccGY1Mdk.s:2186   .text.RCC_GetITStatus:0000000000000010 $d
     /tmp/ccGY1Mdk.s:2191   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccGY1Mdk.s:2197   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
     /tmp/ccGY1Mdk.s:2215   .text.RCC_ClearITPendingBit:0000000000000008 $d
     /tmp/ccGY1Mdk.s:2220   .data.APBAHBPrescTable:0000000000000000 $d

NO UNDEFINED SYMBOLS
